
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a04  080000c4  080000c4  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002ac8  08002ac8  0000aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000028  20000000  08002ae4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000860  20000028  08002b0c  00010028  2**2
                  ALLOC
  5 ._user_heap_stack 00000080  20000888  08002b0c  00010888  2**0
                  ALLOC
  6 .ARM.attributes 0000002f  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000839e  00000000  00000000  00010057  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016a8  00000000  00000000  000183f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000057eb  00000000  00000000  00019a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000188  00000000  00000000  0001f288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c61  00000000  00000000  0001f410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000027b3  00000000  00000000  00021071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  00023824  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00001314  00000000  00000000  00023894  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002b0  00000000  00000000  00024ba8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c4 <hw_init>:
#define ADC_WDG_H 1024
#define ADC_WDG_L 900
#endif


void hw_init(void){
 80000c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80000c6:	465f      	mov	r7, fp
 80000c8:	4656      	mov	r6, sl
 80000ca:	464d      	mov	r5, r9
 80000cc:	4644      	mov	r4, r8
 80000ce:	b4f0      	push	{r4, r5, r6, r7}
	I2C_InitTypeDef  I2C_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	EXTI_InitTypeDef   EXTI_InitStructure;

	// MOTOR CONTROL GPIO / PWM CONFIG
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB,ENABLE);
 80000d0:	20c0      	movs	r0, #192	; 0xc0
#define ADC_WDG_H 1024
#define ADC_WDG_L 900
#endif


void hw_init(void){
 80000d2:	b09d      	sub	sp, #116	; 0x74
	I2C_InitTypeDef  I2C_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	EXTI_InitTypeDef   EXTI_InitStructure;

	// MOTOR CONTROL GPIO / PWM CONFIG
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB,ENABLE);
 80000d4:	02c0      	lsls	r0, r0, #11
 80000d6:	2101      	movs	r1, #1



	// Configure Pins for UP fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80000d8:	ad01      	add	r5, sp, #4
	I2C_InitTypeDef  I2C_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	EXTI_InitTypeDef   EXTI_InitStructure;

	// MOTOR CONTROL GPIO / PWM CONFIG
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB,ENABLE);
 80000da:	f001 fdaf 	bl	8001c3c <RCC_AHBPeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //should be faster than OD, go up to 3.3V pushing, then up to 5 with external
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);
 80000de:	2790      	movs	r7, #144	; 0x90
	// Configure Pins for UP fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //should be faster than OD, go up to 3.3V pushing, then up to 5 with external
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
 80000e0:	21e0      	movs	r1, #224	; 0xe0



	// Configure Pins for UP fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80000e2:	2400      	movs	r4, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB,ENABLE);



	// Configure Pins for UP fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80000e4:	2201      	movs	r2, #1
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //should be faster than OD, go up to 3.3V pushing, then up to 5 with external
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);
 80000e6:	05f8      	lsls	r0, r7, #23
	// Configure Pins for UP fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //should be faster than OD, go up to 3.3V pushing, then up to 5 with external
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
 80000e8:	00ce      	lsls	r6, r1, #3
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);
 80000ea:	1c29      	adds	r1, r5, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB,ENABLE);



	// Configure Pins for UP fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80000ec:	4690      	mov	r8, r2
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //should be faster than OD, go up to 3.3V pushing, then up to 5 with external
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);
 80000ee:	4681      	mov	r9, r0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB,ENABLE);



	// Configure Pins for UP fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80000f0:	712a      	strb	r2, [r5, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80000f2:	716c      	strb	r4, [r5, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //should be faster than OD, go up to 3.3V pushing, then up to 5 with external
 80000f4:	71ac      	strb	r4, [r5, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80000f6:	71ec      	strb	r4, [r5, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
 80000f8:	9601      	str	r6, [sp, #4]
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);
 80000fa:	f000 ffc9 	bl	8001090 <GPIO_Init>

	// 1 keeps Upper PMOS off
	AU(1);
	BU(1);
 80000fe:	2680      	movs	r6, #128	; 0x80
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);

	// 1 keeps Upper PMOS off
	AU(1);
 8000100:	2280      	movs	r2, #128	; 0x80
	BU(1);
	CU(1);
 8000102:	2080      	movs	r0, #128	; 0x80
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);

	// 1 keeps Upper PMOS off
	AU(1);
 8000104:	00d3      	lsls	r3, r2, #3
 8000106:	4649      	mov	r1, r9
	BU(1);
	CU(1);
 8000108:	0042      	lsls	r2, r0, #1
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);

	// 1 keeps Upper PMOS off
	AU(1);
	BU(1);
 800010a:	00b7      	lsls	r7, r6, #2
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);

	// 1 keeps Upper PMOS off
	AU(1);
 800010c:	618b      	str	r3, [r1, #24]
	BU(1);
 800010e:	618f      	str	r7, [r1, #24]
	CU(1);
 8000110:	618a      	str	r2, [r1, #24]
	// Configure Pins for DOWN fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8000112:	2180      	movs	r1, #128	; 0x80
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10;
	GPIO_Init(GPIOA,&GPIO_InitStructure);	//AU(1);

	// 1 keeps Upper PMOS off
	AU(1);
 8000114:	469b      	mov	fp, r3
	// Configure Pins for DOWN fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8000116:	9101      	str	r1, [sp, #4]
	AU(1);
	BU(1);
	CU(1);

	// Configure Pins for DOWN fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000118:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
	GPIO_Init(GPIOA,&GPIO_InitStructure);
 800011a:	1c29      	adds	r1, r5, #0
 800011c:	4648      	mov	r0, r9
	AU(1);
	BU(1);
	CU(1);

	// Configure Pins for DOWN fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800011e:	712b      	strb	r3, [r5, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
 8000120:	71eb      	strb	r3, [r5, #7]
	BU(1);
	CU(1);

	// Configure Pins for DOWN fets
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000122:	716c      	strb	r4, [r5, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000124:	71ac      	strb	r4, [r5, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
	GPIO_Init(GPIOA,&GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
 8000126:	2603      	movs	r6, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
	GPIO_Init(GPIOA,&GPIO_InitStructure);
 8000128:	f000 ffb2 	bl	8001090 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
	GPIO_Init(GPIOB,&GPIO_InitStructure);
 800012c:	1c29      	adds	r1, r5, #0
 800012e:	4890      	ldr	r0, [pc, #576]	; (8000370 <hw_init+0x2ac>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
	GPIO_Init(GPIOA,&GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
 8000130:	9601      	str	r6, [sp, #4]

	// Configure Pins for Analog In (Hall,V,I) I
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;
 8000132:	271f      	movs	r7, #31
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
	GPIO_Init(GPIOA,&GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
	GPIO_Init(GPIOB,&GPIO_InitStructure);
 8000134:	f000 ffac 	bl	8001090 <GPIO_Init>
	// Configure Pins for Analog In (Hall,V,I) I
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;
	GPIO_Init(GPIOA,&GPIO_InitStructure);
 8000138:	1c29      	adds	r1, r5, #0
 800013a:	4648      	mov	r0, r9
	GPIO_Init(GPIOA,&GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;
	GPIO_Init(GPIOB,&GPIO_InitStructure);

	// Configure Pins for Analog In (Hall,V,I) I
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 800013c:	712e      	strb	r6, [r5, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800013e:	716c      	strb	r4, [r5, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000140:	71ec      	strb	r4, [r5, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;
 8000142:	9701      	str	r7, [sp, #4]
	GPIO_Init(GPIOA,&GPIO_InitStructure);
 8000144:	f000 ffa4 	bl	8001090 <GPIO_Init>


	//Init TIMER1 for PWM Out
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
 8000148:	2080      	movs	r0, #128	; 0x80
 800014a:	0100      	lsls	r0, r0, #4
 800014c:	2101      	movs	r1, #1

	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
 800014e:	af03      	add	r7, sp, #12
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;
	GPIO_Init(GPIOA,&GPIO_InitStructure);


	//Init TIMER1 for PWM Out
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
 8000150:	f001 fd80 	bl	8001c54 <RCC_APB2PeriphClockCmd>

	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Period=M_PWM_TickPeriod-1;
 8000154:	4b87      	ldr	r3, [pc, #540]	; (8000374 <hw_init+0x2b0>)


	//Init TIMER1 for PWM Out
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);

	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
 8000156:	2200      	movs	r2, #0
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Period=M_PWM_TickPeriod-1;
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8000158:	1c39      	adds	r1, r7, #0
 800015a:	4887      	ldr	r0, [pc, #540]	; (8000378 <hw_init+0x2b4>)

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
 800015c:	ae06      	add	r6, sp, #24


	//Init TIMER1 for PWM Out
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);

	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
 800015e:	4692      	mov	sl, r2
 8000160:	807c      	strh	r4, [r7, #2]
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
 8000162:	813c      	strh	r4, [r7, #8]
	TIM_TimeBaseStructure.TIM_Period=M_PWM_TickPeriod-1;
	TIM_TimeBaseStructure.TIM_Prescaler=0;
 8000164:	803c      	strh	r4, [r7, #0]
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
 8000166:	72ba      	strb	r2, [r7, #10]
	//Init TIMER1 for PWM Out
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);

	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Period=M_PWM_TickPeriod-1;
 8000168:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800016a:	f001 fe77 	bl	8001e5c <TIM_TimeBaseInit>

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
 800016e:	2060      	movs	r0, #96	; 0x60
	TIM_OCInitStructure.TIM_OCIdleState=TIM_OCIdleState_Reset;
	TIM_OCInitStructure.TIM_OCNIdleState=TIM_OCNIdleState_Reset;
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;
	TIM_OCInitStructure.TIM_OCNPolarity=TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Enable;
 8000170:	2304      	movs	r3, #4
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OCIdleState=TIM_OCIdleState_Reset;
	TIM_OCInitStructure.TIM_OCNIdleState=TIM_OCNIdleState_Reset;
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;
 8000172:	2202      	movs	r2, #2
	TIM_TimeBaseStructure.TIM_Period=M_PWM_TickPeriod-1;
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
 8000174:	8030      	strh	r0, [r6, #0]
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;
	TIM_OCInitStructure.TIM_OCNPolarity=TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse=0;
	TIM_OC1Init(TIM1,&TIM_OCInitStructure);
 8000176:	1c31      	adds	r1, r6, #0
 8000178:	487f      	ldr	r0, [pc, #508]	; (8000378 <hw_init+0x2b4>)
	TIM_OCInitStructure.TIM_OCIdleState=TIM_OCIdleState_Reset;
	TIM_OCInitStructure.TIM_OCNIdleState=TIM_OCNIdleState_Reset;
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;
	TIM_OCInitStructure.TIM_OCNPolarity=TIM_OCNPolarity_High;
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Enable;
 800017a:	80b3      	strh	r3, [r6, #4]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OCIdleState=TIM_OCIdleState_Reset;
	TIM_OCInitStructure.TIM_OCNIdleState=TIM_OCNIdleState_Reset;
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;
 800017c:	81b2      	strh	r2, [r6, #12]
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OCIdleState=TIM_OCIdleState_Reset;
 800017e:	8234      	strh	r4, [r6, #16]
	TIM_OCInitStructure.TIM_OCNIdleState=TIM_OCNIdleState_Reset;
 8000180:	8274      	strh	r4, [r6, #18]
	TIM_OCInitStructure.TIM_OCPolarity=TIM_OCPolarity_Low;
	TIM_OCInitStructure.TIM_OCNPolarity=TIM_OCNPolarity_High;
 8000182:	81f4      	strh	r4, [r6, #14]
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Disable;
 8000184:	8074      	strh	r4, [r6, #2]
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Enable;
	TIM_OCInitStructure.TIM_Pulse=0;
 8000186:	9408      	str	r4, [sp, #32]
	TIM_OC1Init(TIM1,&TIM_OCInitStructure);
 8000188:	f001 ff34 	bl	8001ff4 <TIM_OC1Init>
	TIM_OC2Init(TIM1,&TIM_OCInitStructure);
 800018c:	1c31      	adds	r1, r6, #0
 800018e:	487a      	ldr	r0, [pc, #488]	; (8000378 <hw_init+0x2b4>)
 8000190:	f001 ff6e 	bl	8002070 <TIM_OC2Init>
	TIM_OC3Init(TIM1,&TIM_OCInitStructure);
 8000194:	1c31      	adds	r1, r6, #0
 8000196:	4878      	ldr	r0, [pc, #480]	; (8000378 <hw_init+0x2b4>)
 8000198:	f001 ffb8 	bl	800210c <TIM_OC3Init>

	TIM_Cmd(TIM1, ENABLE);
 800019c:	4876      	ldr	r0, [pc, #472]	; (8000378 <hw_init+0x2b4>)
 800019e:	2101      	movs	r1, #1
 80001a0:	f001 fef4 	bl	8001f8c <TIM_Cmd>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80001a4:	4874      	ldr	r0, [pc, #464]	; (8000378 <hw_init+0x2b4>)
 80001a6:	2101      	movs	r1, #1
 80001a8:	f001 ff16 	bl	8001fd8 <TIM_CtrlPWMOutputs>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource7,GPIO_AF_2);
 80001ac:	4648      	mov	r0, r9
 80001ae:	2107      	movs	r1, #7
 80001b0:	2202      	movs	r2, #2
 80001b2:	f001 f851 	bl	8001258 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource0,GPIO_AF_2);
 80001b6:	486e      	ldr	r0, [pc, #440]	; (8000370 <hw_init+0x2ac>)
 80001b8:	2100      	movs	r1, #0
 80001ba:	2202      	movs	r2, #2
 80001bc:	f001 f84c 	bl	8001258 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource1,GPIO_AF_2);
 80001c0:	2202      	movs	r2, #2
 80001c2:	486b      	ldr	r0, [pc, #428]	; (8000370 <hw_init+0x2ac>)
 80001c4:	2101      	movs	r1, #1
 80001c6:	f001 f847 	bl	8001258 <GPIO_PinAFConfig>



	//Setup 32bit TIM2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 80001ca:	2001      	movs	r0, #1
 80001cc:	2101      	movs	r1, #1
 80001ce:	f001 fd4d 	bl	8001c6c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Period=0xFFFFFFFF;
 80001d2:	2101      	movs	r1, #1
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80001d4:	2380      	movs	r3, #128	; 0x80

	//Setup 32bit TIM2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Period=0xFFFFFFFF;
 80001d6:	4248      	negs	r0, r1
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
 80001d8:	4652      	mov	r2, sl

	//Setup 32bit TIM2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Period=0xFFFFFFFF;
 80001da:	6078      	str	r0, [r7, #4]
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80001dc:	1c39      	adds	r1, r7, #0
 80001de:	05d8      	lsls	r0, r3, #23
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_Period=0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
 80001e0:	72ba      	strb	r2, [r7, #10]



	//Setup 32bit TIM2
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
	TIM_TimeBaseStructure.TIM_CounterMode=TIM_CounterMode_Up;
 80001e2:	807c      	strh	r4, [r7, #2]
	TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;
 80001e4:	813c      	strh	r4, [r7, #8]
	TIM_TimeBaseStructure.TIM_Period=0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler=0;
 80001e6:	803c      	strh	r4, [r7, #0]
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80001e8:	f001 fe38 	bl	8001e5c <TIM_TimeBaseInit>

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_Toggle;
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Disable;
	TIM_OCInitStructure.TIM_Pulse=48*10000; //10ms
 80001ec:	4963      	ldr	r1, [pc, #396]	; (800037c <hw_init+0x2b8>)
	TIM_TimeBaseStructure.TIM_Period=0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_Toggle;
 80001ee:	2730      	movs	r7, #48	; 0x30
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Disable;
	TIM_OCInitStructure.TIM_Pulse=48*10000; //10ms
	TIM_OC1Init(TIM2,&TIM_OCInitStructure);
 80001f0:	2080      	movs	r0, #128	; 0x80
	TIM_TimeBaseStructure.TIM_Period=0xFFFFFFFF;
	TIM_TimeBaseStructure.TIM_Prescaler=0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_Toggle;
 80001f2:	8037      	strh	r7, [r6, #0]
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Disable;
 80001f4:	8074      	strh	r4, [r6, #2]
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Disable;
 80001f6:	80b4      	strh	r4, [r6, #4]
	TIM_OCInitStructure.TIM_Pulse=48*10000; //10ms
 80001f8:	60b1      	str	r1, [r6, #8]
	TIM_OC1Init(TIM2,&TIM_OCInitStructure);
 80001fa:	05c0      	lsls	r0, r0, #23
 80001fc:	1c31      	adds	r1, r6, #0
	TIM_OC1PreloadConfig(TIM2,TIM_OCPreload_Disable);
 80001fe:	2680      	movs	r6, #128	; 0x80

	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_Toggle;
	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OutputNState=TIM_OutputNState_Disable;
	TIM_OCInitStructure.TIM_Pulse=48*10000; //10ms
	TIM_OC1Init(TIM2,&TIM_OCInitStructure);
 8000200:	f001 fef8 	bl	8001ff4 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2,TIM_OCPreload_Disable);
 8000204:	05f0      	lsls	r0, r6, #23
 8000206:	2100      	movs	r1, #0
 8000208:	f002 f85c 	bl	80022c4 <TIM_OC1PreloadConfig>
	TIM_ITConfig(TIM2,TIM_IT_CC1,ENABLE);
 800020c:	2280      	movs	r2, #128	; 0x80
 800020e:	05d0      	lsls	r0, r2, #23
 8000210:	2102      	movs	r1, #2
 8000212:	2201      	movs	r2, #1
 8000214:	f002 fab6 	bl	8002784 <TIM_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannelPriority = 0; // well it doesn't have minus ones..!
 8000218:	466f      	mov	r7, sp
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 800021a:	200f      	movs	r0, #15
	TIM_OCInitStructure.TIM_Pulse=48*10000; //10ms
	TIM_OC1Init(TIM2,&TIM_OCInitStructure);
	TIM_OC1PreloadConfig(TIM2,TIM_OCPreload_Disable);
	TIM_ITConfig(TIM2,TIM_IT_CC1,ENABLE);

	NVIC_InitStructure.NVIC_IRQChannelPriority = 0; // well it doesn't have minus ones..!
 800021c:	4653      	mov	r3, sl
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800021e:	4641      	mov	r1, r8
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000220:	7038      	strb	r0, [r7, #0]
	NVIC_Init(&NVIC_InitStructure);
	TIM_Cmd(TIM2, ENABLE);
 8000222:	2680      	movs	r6, #128	; 0x80
	TIM_ITConfig(TIM2,TIM_IT_CC1,ENABLE);

	NVIC_InitStructure.NVIC_IRQChannelPriority = 0; // well it doesn't have minus ones..!
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_Init(&NVIC_InitStructure);
 8000224:	4668      	mov	r0, sp
	TIM_OCInitStructure.TIM_Pulse=48*10000; //10ms
	TIM_OC1Init(TIM2,&TIM_OCInitStructure);
	TIM_OC1PreloadConfig(TIM2,TIM_OCPreload_Disable);
	TIM_ITConfig(TIM2,TIM_IT_CC1,ENABLE);

	NVIC_InitStructure.NVIC_IRQChannelPriority = 0; // well it doesn't have minus ones..!
 8000226:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000228:	70b9      	strb	r1, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_Init(&NVIC_InitStructure);
 800022a:	f001 fa45 	bl	80016b8 <NVIC_Init>
	TIM_Cmd(TIM2, ENABLE);
 800022e:	05f0      	lsls	r0, r6, #23
 8000230:	2101      	movs	r1, #1
 8000232:	f001 feab 	bl	8001f8c <TIM_Cmd>
	//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9, GPIO_AF_4);
	//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10, GPIO_AF_4);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000236:	4647      	mov	r7, r8
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000238:	4653      	mov	r3, sl
	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,ENABLE);

	//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9, GPIO_AF_4);
	//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10, GPIO_AF_4);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;
 800023a:	22c0      	movs	r2, #192	; 0xc0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	//GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800023c:	1c29      	adds	r1, r5, #0
 800023e:	484c      	ldr	r0, [pc, #304]	; (8000370 <hw_init+0x2ac>)
	//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10, GPIO_AF_4);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000240:	716b      	strb	r3, [r5, #5]
	//GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000242:	71ab      	strb	r3, [r5, #6]
	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,ENABLE);

	//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9, GPIO_AF_4);
	//	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10, GPIO_AF_4);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;
 8000244:	9201      	str	r2, [sp, #4]
	//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000246:	712f      	strb	r7, [r5, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	//GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8000248:	71ef      	strb	r7, [r5, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800024a:	f000 ff21 	bl	8001090 <GPIO_Init>

	// Analog Init
	ADC_InitTypeDef     ADC_InitStructure;
	DMA_InitTypeDef   DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800024e:	2580      	movs	r5, #128	; 0x80


	// Analog Init
	ADC_InitTypeDef     ADC_InitStructure;
	DMA_InitTypeDef   DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE);
 8000250:	2001      	movs	r0, #1
 8000252:	2101      	movs	r1, #1
 8000254:	f001 fcf2 	bl	8001c3c <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000258:	00a8      	lsls	r0, r5, #2
 800025a:	2101      	movs	r1, #1
 800025c:	f001 fcfa 	bl	8001c54 <RCC_APB2PeriphClockCmd>

	/* DMA1 Channel1 Config */
	DMA_DeInit(DMA1_Channel1);
 8000260:	4847      	ldr	r0, [pc, #284]	; (8000380 <hw_init+0x2bc>)
 8000262:	f000 fded 	bl	8000e40 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADbuff;
 8000266:	4847      	ldr	r0, [pc, #284]	; (8000384 <hw_init+0x2c0>)
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);

	/* DMA1 Channel1 Config */
	DMA_DeInit(DMA1_Channel1);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8000268:	4947      	ldr	r1, [pc, #284]	; (8000388 <hw_init+0x2c4>)
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADbuff;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = ADbufSize;
 800026a:	26fa      	movs	r6, #250	; 0xfa
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800026c:	2380      	movs	r3, #128	; 0x80
	/* DMA1 Channel1 Config */
	DMA_DeInit(DMA1_Channel1);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADbuff;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = ADbufSize;
 800026e:	00b2      	lsls	r2, r6, #2
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);

	/* DMA1 Channel1 Config */
	DMA_DeInit(DMA1_Channel1);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8000270:	9111      	str	r1, [sp, #68]	; 0x44
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADbuff;
 8000272:	9012      	str	r0, [sp, #72]	; 0x48
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = ADbufSize;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000274:	4659      	mov	r1, fp
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000276:	2020      	movs	r0, #32
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000278:	2680      	movs	r6, #128	; 0x80
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADbuff;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = ADbufSize;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800027a:	005d      	lsls	r5, r3, #1
	/* DMA1 Channel1 Config */
	DMA_DeInit(DMA1_Channel1);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADbuff;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = ADbufSize;
 800027c:	9214      	str	r2, [sp, #80]	; 0x50
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800027e:	2780      	movs	r7, #128	; 0x80
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000280:	01b2      	lsls	r2, r6, #6
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = ADbufSize;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000282:	9118      	str	r1, [sp, #96]	; 0x60
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000284:	9019      	str	r0, [sp, #100]	; 0x64
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8000286:	a911      	add	r1, sp, #68	; 0x44
 8000288:	483d      	ldr	r0, [pc, #244]	; (8000380 <hw_init+0x2bc>)
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800028a:	921a      	str	r2, [sp, #104]	; 0x68

	/* DMA1 Channel1 Config */
	DMA_DeInit(DMA1_Channel1);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADbuff;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800028c:	9413      	str	r4, [sp, #76]	; 0x4c
	DMA_InitStructure.DMA_BufferSize = ADbufSize;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800028e:	9415      	str	r4, [sp, #84]	; 0x54
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000290:	9716      	str	r7, [sp, #88]	; 0x58
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000292:	9517      	str	r5, [sp, #92]	; 0x5c
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000294:	941b      	str	r4, [sp, #108]	; 0x6c
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8000296:	f000 fe33 	bl	8000f00 <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 800029a:	2101      	movs	r1, #1
 800029c:	4838      	ldr	r0, [pc, #224]	; (8000380 <hw_init+0x2bc>)
 800029e:	f000 fe5b 	bl	8000f58 <DMA_Cmd>


	ADC_DeInit(ADC1);
	ADC_StructInit(&ADC_InitStructure);
 80002a2:	af0b      	add	r7, sp, #44	; 0x2c
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
	DMA_Cmd(DMA1_Channel1, ENABLE);


	ADC_DeInit(ADC1);
 80002a4:	4839      	ldr	r0, [pc, #228]	; (800038c <hw_init+0x2c8>)
 80002a6:	f000 fbe1 	bl	8000a6c <ADC_DeInit>
	ADC_StructInit(&ADC_InitStructure);
 80002aa:	1c38      	adds	r0, r7, #0
 80002ac:	f000 fc06 	bl	8000abc <ADC_StructInit>
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80002b0:	4643      	mov	r3, r8
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
	ADC_Init(ADC1, &ADC_InitStructure);
 80002b2:	1c39      	adds	r1, r7, #0
 80002b4:	4835      	ldr	r0, [pc, #212]	; (800038c <hw_init+0x2c8>)


	ADC_DeInit(ADC1);
	ADC_StructInit(&ADC_InitStructure);
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80002b6:	713b      	strb	r3, [r7, #4]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80002b8:	60bc      	str	r4, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80002ba:	613c      	str	r4, [r7, #16]
	ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
 80002bc:	617c      	str	r4, [r7, #20]
	DMA_Cmd(DMA1_Channel1, ENABLE);


	ADC_DeInit(ADC1);
	ADC_StructInit(&ADC_InitStructure);
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80002be:	940b      	str	r4, [sp, #44]	; 0x2c
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
	ADC_Init(ADC1, &ADC_InitStructure);
 80002c0:	f000 fbe6 	bl	8000a90 <ADC_Init>
	ADC_ClockModeConfig(ADC1,ADC_ClockMode_AsynClk);
 80002c4:	4831      	ldr	r0, [pc, #196]	; (800038c <hw_init+0x2c8>)
 80002c6:	2100      	movs	r1, #0
 80002c8:	f000 fc0c 	bl	8000ae4 <ADC_ClockModeConfig>
	ADC_ChannelConfig(ADC1, ADC_Channel_2 , ADC_SampleTime_71_5Cycles);
 80002cc:	2104      	movs	r1, #4
 80002ce:	2206      	movs	r2, #6
 80002d0:	482e      	ldr	r0, [pc, #184]	; (800038c <hw_init+0x2c8>)
 80002d2:	f000 fc8d 	bl	8000bf0 <ADC_ChannelConfig>
	ADC_GetCalibrationFactor(ADC1);
 80002d6:	482d      	ldr	r0, [pc, #180]	; (800038c <hw_init+0x2c8>)
 80002d8:	f000 fcba 	bl	8000c50 <ADC_GetCalibrationFactor>

	/*Configure Half anf Full  transmision irq to keep ADC scanning*/
	DMA_ITConfig(DMA1_Channel1,DMA_IT_HT|DMA_IT_TC,ENABLE);
 80002dc:	2201      	movs	r2, #1
 80002de:	4828      	ldr	r0, [pc, #160]	; (8000380 <hw_init+0x2bc>)
 80002e0:	2106      	movs	r1, #6
 80002e2:	f000 fe4d 	bl	8000f80 <DMA_ITConfig>
	ADC_DMARequestModeConfig(ADC1, ADC_DMAMode_Circular);
 80002e6:	2102      	movs	r1, #2
 80002e8:	4828      	ldr	r0, [pc, #160]	; (800038c <hw_init+0x2c8>)
 80002ea:	f000 fcef 	bl	8000ccc <ADC_DMARequestModeConfig>
	DMA_ClearITPendingBit(DMA1_IT_GL1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 fe66 	bl	8000fc0 <DMA_ClearITPendingBit>
	//ADC_DMACmd(ADC1, ENABLE);

	ADC_AnalogWatchdogThresholdsConfig(ADC1,ADC_WDG_H,0);//> should wait for real ADmean first
	ADC_AnalogWatchdogSingleChannelConfig(ADC1,ADC_AnalogWatchdog_Channel_2);
 80002f4:	2480      	movs	r4, #128	; 0x80
	DMA_ITConfig(DMA1_Channel1,DMA_IT_HT|DMA_IT_TC,ENABLE);
	ADC_DMARequestModeConfig(ADC1, ADC_DMAMode_Circular);
	DMA_ClearITPendingBit(DMA1_IT_GL1);
	//ADC_DMACmd(ADC1, ENABLE);

	ADC_AnalogWatchdogThresholdsConfig(ADC1,ADC_WDG_H,0);//> should wait for real ADmean first
 80002f6:	2200      	movs	r2, #0
 80002f8:	4824      	ldr	r0, [pc, #144]	; (800038c <hw_init+0x2c8>)
 80002fa:	4659      	mov	r1, fp
 80002fc:	f000 fc28 	bl	8000b50 <ADC_AnalogWatchdogThresholdsConfig>
	ADC_AnalogWatchdogSingleChannelConfig(ADC1,ADC_AnalogWatchdog_Channel_2);
 8000300:	4822      	ldr	r0, [pc, #136]	; (800038c <hw_init+0x2c8>)
 8000302:	0521      	lsls	r1, r4, #20
 8000304:	f000 fc28 	bl	8000b58 <ADC_AnalogWatchdogSingleChannelConfig>
	ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
 8000308:	4820      	ldr	r0, [pc, #128]	; (800038c <hw_init+0x2c8>)
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	f000 fd0a 	bl	8000d24 <ADC_ClearITPendingBit>
	ADC_ITConfig(ADC1,ADC_IT_AWD,ENABLE);
 8000310:	2201      	movs	r2, #1
 8000312:	481e      	ldr	r0, [pc, #120]	; (800038c <hw_init+0x2c8>)
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	f000 fce1 	bl	8000cdc <ADC_ITConfig>
	ADC_AnalogWatchdogCmd(ADC1,ENABLE);
 800031a:	481c      	ldr	r0, [pc, #112]	; (800038c <hw_init+0x2c8>)
 800031c:	2101      	movs	r1, #1
 800031e:	f000 fc09 	bl	8000b34 <ADC_AnalogWatchdogCmd>





	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8000322:	4669      	mov	r1, sp
	NVIC_InitStructure.NVIC_IRQChannelPriority=1;
 8000324:	4640      	mov	r0, r8
 8000326:	7048      	strb	r0, [r1, #1]





	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8000328:	2509      	movs	r5, #9
	NVIC_InitStructure.NVIC_IRQChannelPriority=1;
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
	NVIC_Init(&NVIC_InitStructure);
 800032a:	4668      	mov	r0, sp


	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPriority=1;
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 800032c:	4656      	mov	r6, sl





	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 800032e:	700d      	strb	r5, [r1, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority=1;
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 8000330:	708e      	strb	r6, [r1, #2]
	NVIC_Init(&NVIC_InitStructure);
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
 8000332:	270c      	movs	r7, #12

	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPriority=1;
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000334:	f001 f9c0 	bl	80016b8 <NVIC_Init>
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
 8000338:	466a      	mov	r2, sp
	NVIC_InitStructure.NVIC_IRQChannelPriority=1;
 800033a:	4643      	mov	r3, r8
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800033c:	4668      	mov	r0, sp
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPriority=1;
	//NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
	NVIC_Init(&NVIC_InitStructure);
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
 800033e:	7017      	strb	r7, [r2, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority=1;
 8000340:	7053      	strb	r3, [r2, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000342:	7093      	strb	r3, [r2, #2]
	NVIC_Init(&NVIC_InitStructure);
 8000344:	f001 f9b8 	bl	80016b8 <NVIC_Init>

	ADC_Cmd(ADC1, ENABLE);
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <hw_init+0x2c8>)
 800034a:	2101      	movs	r1, #1
 800034c:	f000 fbbe 	bl	8000acc <ADC_Cmd>
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_ADRDY));
 8000350:	480e      	ldr	r0, [pc, #56]	; (800038c <hw_init+0x2c8>)
 8000352:	2101      	movs	r1, #1
 8000354:	f000 fccc 	bl	8000cf0 <ADC_GetFlagStatus>
 8000358:	2800      	cmp	r0, #0
 800035a:	d0f9      	beq.n	8000350 <hw_init+0x28c>
	ADC_StartOfConversion(ADC1);
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <hw_init+0x2c8>)
 800035e:	f000 fc9f 	bl	8000ca0 <ADC_StartOfConversion>
	I2C_Cmd(I2C1, ENABLE);
	 */



}
 8000362:	b01d      	add	sp, #116	; 0x74
 8000364:	bc3c      	pop	{r2, r3, r4, r5}
 8000366:	4690      	mov	r8, r2
 8000368:	4699      	mov	r9, r3
 800036a:	46a2      	mov	sl, r4
 800036c:	46ab      	mov	fp, r5
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	48000400 	.word	0x48000400
 8000374:	000003e7 	.word	0x000003e7
 8000378:	40012c00 	.word	0x40012c00
 800037c:	00075300 	.word	0x00075300
 8000380:	40020008 	.word	0x40020008
 8000384:	20000088 	.word	0x20000088
 8000388:	40012440 	.word	0x40012440
 800038c:	40012400 	.word	0x40012400

08000390 <ADC1_COMP_IRQHandler>:

void ADC1_COMP_IRQHandler(void){
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile static uint16_t adc,adc_thd=ADC_WDG_H;
	volatile static uint32_t t=0,dt,t1,CCRtmp,locked=0;

	t1=toc;
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	05d8      	lsls	r0, r3, #23
 8000396:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000398:	4c46      	ldr	r4, [pc, #280]	; (80004b4 <ADC1_COMP_IRQHandler+0x124>)



}

void ADC1_COMP_IRQHandler(void){
 800039a:	464f      	mov	r7, r9
 800039c:	4646      	mov	r6, r8
 800039e:	b4c0      	push	{r6, r7}
	volatile static uint32_t t=0,dt,t1,CCRtmp,locked=0;

	t1=toc;
	int i=2;

	if(ADC_GetITStatus(ADC1, ADC_IT_AWD) != RESET){
 80003a0:	4845      	ldr	r0, [pc, #276]	; (80004b8 <ADC1_COMP_IRQHandler+0x128>)

void ADC1_COMP_IRQHandler(void){
	volatile static uint16_t adc,adc_thd=ADC_WDG_H;
	volatile static uint32_t t=0,dt,t1,CCRtmp,locked=0;

	t1=toc;
 80003a2:	6021      	str	r1, [r4, #0]
	int i=2;

	if(ADC_GetITStatus(ADC1, ADC_IT_AWD) != RESET){
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	f000 fcb3 	bl	8000d10 <ADC_GetITStatus>
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d103      	bne.n	80003b6 <ADC1_COMP_IRQHandler+0x26>
			//	TIM2->CCR1=toc+100;
			//	Pstate=4;
		}
		//Led2(0);
	}
}
 80003ae:	bc0c      	pop	{r2, r3}
 80003b0:	4690      	mov	r8, r2
 80003b2:	4699      	mov	r9, r3
 80003b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	t1=toc;
	int i=2;

	if(ADC_GetITStatus(ADC1, ADC_IT_AWD) != RESET){
		ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
 80003b6:	4840      	ldr	r0, [pc, #256]	; (80004b8 <ADC1_COMP_IRQHandler+0x128>)
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	f000 fcb3 	bl	8000d24 <ADC_ClearITPendingBit>


		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 80003be:	4d3e      	ldr	r5, [pc, #248]	; (80004b8 <ADC1_COMP_IRQHandler+0x128>)
 80003c0:	2104      	movs	r1, #4
 80003c2:	1c28      	adds	r0, r5, #0
 80003c4:	f000 fc94 	bl	8000cf0 <ADC_GetFlagStatus>
 80003c8:	2800      	cmp	r0, #0
 80003ca:	d0f8      	beq.n	80003be <ADC1_COMP_IRQHandler+0x2e>
		adc=ADC1->DR;
 80003cc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
		adc=0;
 80003ce:	2700      	movs	r7, #0
	if(ADC_GetITStatus(ADC1, ADC_IT_AWD) != RESET){
		ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);


		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
		adc=ADC1->DR;
 80003d0:	b296      	uxth	r6, r2
 80003d2:	80a6      	strh	r6, [r4, #4]
		adc=0;
 80003d4:	80a7      	strh	r7, [r4, #4]
 80003d6:	2602      	movs	r6, #2
		while(i--){
			while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 80003d8:	4837      	ldr	r0, [pc, #220]	; (80004b8 <ADC1_COMP_IRQHandler+0x128>)
 80003da:	2104      	movs	r1, #4
 80003dc:	f000 fc88 	bl	8000cf0 <ADC_GetFlagStatus>
 80003e0:	2800      	cmp	r0, #0
 80003e2:	d0f9      	beq.n	80003d8 <ADC1_COMP_IRQHandler+0x48>
			adc+=ADC1->DR;
 80003e4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80003e6:	88a0      	ldrh	r0, [r4, #4]
 80003e8:	3e01      	subs	r6, #1
 80003ea:	18c1      	adds	r1, r0, r3
 80003ec:	b28a      	uxth	r2, r1
 80003ee:	80a2      	strh	r2, [r4, #4]


		while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
		adc=ADC1->DR;
		adc=0;
		while(i--){
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d1f1      	bne.n	80003d8 <ADC1_COMP_IRQHandler+0x48>
			while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
			adc+=ADC1->DR;
		}
		adc=adc/2;
 80003f4:	88a5      	ldrh	r5, [r4, #4]

		if(adc>adc_thd){
 80003f6:	4b31      	ldr	r3, [pc, #196]	; (80004bc <ADC1_COMP_IRQHandler+0x12c>)
		adc=0;
		while(i--){
			while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
			adc+=ADC1->DR;
		}
		adc=adc/2;
 80003f8:	086f      	lsrs	r7, r5, #1
 80003fa:	80a7      	strh	r7, [r4, #4]

		if(adc>adc_thd){
 80003fc:	88a0      	ldrh	r0, [r4, #4]
 80003fe:	8819      	ldrh	r1, [r3, #0]
 8000400:	4288      	cmp	r0, r1
 8000402:	d84a      	bhi.n	800049a <ADC1_COMP_IRQHandler+0x10a>
			adc_thd=ADC_WDG_L;
			ADC_AnalogWatchdogThresholdsConfig(ADC1,4095,ADC_WDG_H+50);
			ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
		}
		else{
			dt=t1-t;
 8000404:	6822      	ldr	r2, [r4, #0]
 8000406:	68a5      	ldr	r5, [r4, #8]
 8000408:	1b57      	subs	r7, r2, r5
 800040a:	60e7      	str	r7, [r4, #12]
			t=t1;
 800040c:	6820      	ldr	r0, [r4, #0]
			CCRtmp=(250*CCRtmp+6*(dt)/6)/256; //6 steps per Electrical cycle,
 800040e:	27fa      	movs	r7, #250	; 0xfa
			ADC_AnalogWatchdogThresholdsConfig(ADC1,4095,ADC_WDG_H+50);
			ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
		}
		else{
			dt=t1-t;
			t=t1;
 8000410:	60a0      	str	r0, [r4, #8]
			CCRtmp=(250*CCRtmp+6*(dt)/6)/256; //6 steps per Electrical cycle,
 8000412:	6925      	ldr	r5, [r4, #16]
 8000414:	68e3      	ldr	r3, [r4, #12]
 8000416:	437d      	muls	r5, r7
 8000418:	0059      	lsls	r1, r3, #1
 800041a:	18ca      	adds	r2, r1, r3
 800041c:	0050      	lsls	r0, r2, #1
 800041e:	2106      	movs	r1, #6
 8000420:	f002 fab2 	bl	8002988 <__aeabi_uidiv>
 8000424:	1940      	adds	r0, r0, r5
 8000426:	0a05      	lsrs	r5, r0, #8
 8000428:	6125      	str	r5, [r4, #16]
			//CCRtmp=(dt)/6; //6 steps per Electrical cycle,
			Led1(1);
 800042a:	4d25      	ldr	r5, [pc, #148]	; (80004c0 <ADC1_COMP_IRQHandler+0x130>)
 800042c:	2740      	movs	r7, #64	; 0x40
 800042e:	61af      	str	r7, [r5, #24]
			Led1(0);
 8000430:	852f      	strh	r7, [r5, #40]	; 0x28

			if(6*CCRtmp>(RPM2CNT(RPMr-5))){
 8000432:	6923      	ldr	r3, [r4, #16]
 8000434:	4923      	ldr	r1, [pc, #140]	; (80004c4 <ADC1_COMP_IRQHandler+0x134>)
 8000436:	005a      	lsls	r2, r3, #1
 8000438:	4688      	mov	r8, r1
 800043a:	6809      	ldr	r1, [r1, #0]
 800043c:	18d0      	adds	r0, r2, r3
 800043e:	0043      	lsls	r3, r0, #1
 8000440:	3905      	subs	r1, #5
 8000442:	4821      	ldr	r0, [pc, #132]	; (80004c8 <ADC1_COMP_IRQHandler+0x138>)
 8000444:	4699      	mov	r9, r3
 8000446:	f002 fa9f 	bl	8002988 <__aeabi_uidiv>
 800044a:	4581      	cmp	r9, r0
 800044c:	d814      	bhi.n	8000478 <ADC1_COMP_IRQHandler+0xe8>
			 	TIM2->CCR1=toc+10; //1080Hz@3V , more stable
				Pstate=6;TIM2->CCR1=toc+20; //1220Hz@3V, 1700Hz@4.2
				Led1(0);
			}
			else{
				locked=1;
 800044e:	2601      	movs	r6, #1
 8000450:	6166      	str	r6, [r4, #20]
				Led1(1);
 8000452:	61af      	str	r7, [r5, #24]
				//Pstate=6;
				//TIM2->CCR1=toc+20;
				CCR1r=RPM2CNT(RPMr)/6;
 8000454:	4644      	mov	r4, r8
 8000456:	6821      	ldr	r1, [r4, #0]
 8000458:	481c      	ldr	r0, [pc, #112]	; (80004cc <ADC1_COMP_IRQHandler+0x13c>)
 800045a:	f002 fa95 	bl	8002988 <__aeabi_uidiv>
 800045e:	4d1c      	ldr	r5, [pc, #112]	; (80004d0 <ADC1_COMP_IRQHandler+0x140>)
 8000460:	6028      	str	r0, [r5, #0]
				//CCR1r+=200;
			}
			//	ADC_AnalogWatchdogCmd(ADC1,DISABLE);
			ADC_AnalogWatchdogThresholdsConfig(ADC1,ADC_WDG_H,0);
 8000462:	2780      	movs	r7, #128	; 0x80
 8000464:	00f9      	lsls	r1, r7, #3
 8000466:	4814      	ldr	r0, [pc, #80]	; (80004b8 <ADC1_COMP_IRQHandler+0x128>)
 8000468:	2200      	movs	r2, #0
 800046a:	f000 fb71 	bl	8000b50 <ADC_AnalogWatchdogThresholdsConfig>
			ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
 800046e:	4812      	ldr	r0, [pc, #72]	; (80004b8 <ADC1_COMP_IRQHandler+0x128>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	f000 fc57 	bl	8000d24 <ADC_ClearITPendingBit>
 8000476:	e79a      	b.n	80003ae <ADC1_COMP_IRQHandler+0x1e>
			//CCRtmp=(dt)/6; //6 steps per Electrical cycle,
			Led1(1);
			Led1(0);

			if(6*CCRtmp>(RPM2CNT(RPMr-5))){
				locked=0;
 8000478:	6166      	str	r6, [r4, #20]
				CCR1r=CCRtmp;//-100;
 800047a:	6921      	ldr	r1, [r4, #16]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <ADC1_COMP_IRQHandler+0x140>)
				//Pstate=1;//1180Hz@3V
			 	TIM2->CCR1=toc+10; //1080Hz@3V , more stable
 800047e:	2080      	movs	r0, #128	; 0x80
			Led1(1);
			Led1(0);

			if(6*CCRtmp>(RPM2CNT(RPMr-5))){
				locked=0;
				CCR1r=CCRtmp;//-100;
 8000480:	6011      	str	r1, [r2, #0]
				//Pstate=1;//1180Hz@3V
			 	TIM2->CCR1=toc+10; //1080Hz@3V , more stable
 8000482:	05c3      	lsls	r3, r0, #23
 8000484:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				Pstate=6;TIM2->CCR1=toc+20; //1220Hz@3V, 1700Hz@4.2
 8000486:	4913      	ldr	r1, [pc, #76]	; (80004d4 <ADC1_COMP_IRQHandler+0x144>)

			if(6*CCRtmp>(RPM2CNT(RPMr-5))){
				locked=0;
				CCR1r=CCRtmp;//-100;
				//Pstate=1;//1180Hz@3V
			 	TIM2->CCR1=toc+10; //1080Hz@3V , more stable
 8000488:	360a      	adds	r6, #10
				Pstate=6;TIM2->CCR1=toc+20; //1220Hz@3V, 1700Hz@4.2
 800048a:	2406      	movs	r4, #6

			if(6*CCRtmp>(RPM2CNT(RPMr-5))){
				locked=0;
				CCR1r=CCRtmp;//-100;
				//Pstate=1;//1180Hz@3V
			 	TIM2->CCR1=toc+10; //1080Hz@3V , more stable
 800048c:	635e      	str	r6, [r3, #52]	; 0x34
				Pstate=6;TIM2->CCR1=toc+20; //1220Hz@3V, 1700Hz@4.2
 800048e:	600c      	str	r4, [r1, #0]
 8000490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000492:	3214      	adds	r2, #20
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
				Led1(0);
 8000496:	852f      	strh	r7, [r5, #40]	; 0x28
 8000498:	e7e3      	b.n	8000462 <ADC1_COMP_IRQHandler+0xd2>
			adc+=ADC1->DR;
		}
		adc=adc/2;

		if(adc>adc_thd){
			adc_thd=ADC_WDG_L;
 800049a:	25e1      	movs	r5, #225	; 0xe1
 800049c:	00a8      	lsls	r0, r5, #2
 800049e:	8018      	strh	r0, [r3, #0]
			ADC_AnalogWatchdogThresholdsConfig(ADC1,4095,ADC_WDG_H+50);
 80004a0:	490d      	ldr	r1, [pc, #52]	; (80004d8 <ADC1_COMP_IRQHandler+0x148>)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <ADC1_COMP_IRQHandler+0x128>)
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <ADC1_COMP_IRQHandler+0x14c>)
 80004a6:	f000 fb53 	bl	8000b50 <ADC_AnalogWatchdogThresholdsConfig>
			ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
 80004aa:	4803      	ldr	r0, [pc, #12]	; (80004b8 <ADC1_COMP_IRQHandler+0x128>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	f000 fc39 	bl	8000d24 <ADC_ClearITPendingBit>
 80004b2:	e77c      	b.n	80003ae <ADC1_COMP_IRQHandler+0x1e>
 80004b4:	20000028 	.word	0x20000028
 80004b8:	40012400 	.word	0x40012400
 80004bc:	20000000 	.word	0x20000000
 80004c0:	48000400 	.word	0x48000400
 80004c4:	20000050 	.word	0x20000050
 80004c8:	2aea5400 	.word	0x2aea5400
 80004cc:	07270e00 	.word	0x07270e00
 80004d0:	20000058 	.word	0x20000058
 80004d4:	20000054 	.word	0x20000054
 80004d8:	00000fff 	.word	0x00000fff
 80004dc:	00000432 	.word	0x00000432

080004e0 <DMA1_Channel1_IRQHandler>:
		}
		//Led2(0);
	}
}

void DMA1_Channel1_IRQHandler(void){
 80004e0:	b508      	push	{r3, lr}
	uint32_t ADsum=0;
	uint32_t i;
	if(DMA_GetITStatus(DMA1_IT_HT1)){
 80004e2:	2004      	movs	r0, #4
 80004e4:	f000 fd64 	bl	8000fb0 <DMA_GetITStatus>
 80004e8:	2800      	cmp	r0, #0
 80004ea:	d116      	bne.n	800051a <DMA1_Channel1_IRQHandler+0x3a>
		ADsum=0;
		while(i--) //takes ~82us for 500smp
			ADsum+=ADbuff[i];
		//ADmean=(1000*ADmean+24*ADsum/(ADbufSize/2))/1024;
	}
	if(DMA_GetITStatus(DMA1_IT_TC1)){
 80004ec:	2002      	movs	r0, #2
 80004ee:	f000 fd5f 	bl	8000fb0 <DMA_GetITStatus>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d100      	bne.n	80004f8 <DMA1_Channel1_IRQHandler+0x18>
		ADsum=0;
		while(i<ADbufSize)
			ADsum+=ADbuff[i++];
		//ADmean=(1000*ADmean+24*ADsum/(ADbufSize/2))/1024;
	}
}
 80004f6:	bd08      	pop	{r3, pc}
		while(i--) //takes ~82us for 500smp
			ADsum+=ADbuff[i];
		//ADmean=(1000*ADmean+24*ADsum/(ADbufSize/2))/1024;
	}
	if(DMA_GetITStatus(DMA1_IT_TC1)){
		DMA_ClearITPendingBit(DMA1_IT_TC1);
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fd61 	bl	8000fc0 <DMA_ClearITPendingBit>
		i=ADbufSize/2;
 80004fe:	22fa      	movs	r2, #250	; 0xfa
 8000500:	0053      	lsls	r3, r2, #1
		ADsum=0;
		while(i<ADbufSize)
 8000502:	20fa      	movs	r0, #250	; 0xfa
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <DMA1_Channel1_IRQHandler+0x5c>)
 8000506:	0080      	lsls	r0, r0, #2
			ADsum+=ADbuff[i++];
 8000508:	0059      	lsls	r1, r3, #1
 800050a:	3301      	adds	r3, #1
 800050c:	5a51      	ldrh	r1, [r2, r1]
 800050e:	0059      	lsls	r1, r3, #1
 8000510:	3301      	adds	r3, #1
 8000512:	5a51      	ldrh	r1, [r2, r1]
	}
	if(DMA_GetITStatus(DMA1_IT_TC1)){
		DMA_ClearITPendingBit(DMA1_IT_TC1);
		i=ADbufSize/2;
		ADsum=0;
		while(i<ADbufSize)
 8000514:	4283      	cmp	r3, r0
 8000516:	d1f7      	bne.n	8000508 <DMA1_Channel1_IRQHandler+0x28>
 8000518:	e7ed      	b.n	80004f6 <DMA1_Channel1_IRQHandler+0x16>

void DMA1_Channel1_IRQHandler(void){
	uint32_t ADsum=0;
	uint32_t i;
	if(DMA_GetITStatus(DMA1_IT_HT1)){
		DMA_ClearITPendingBit(DMA1_IT_HT1);
 800051a:	2004      	movs	r0, #4
 800051c:	f000 fd50 	bl	8000fc0 <DMA_ClearITPendingBit>
		i=ADbufSize/2-1;
		ADsum=0;
		while(i--) //takes ~82us for 500smp
			ADsum+=ADbuff[i];
 8000520:	23f9      	movs	r3, #249	; 0xf9
 8000522:	4a06      	ldr	r2, [pc, #24]	; (800053c <DMA1_Channel1_IRQHandler+0x5c>)
 8000524:	0098      	lsls	r0, r3, #2
 8000526:	5a13      	ldrh	r3, [r2, r0]
	uint32_t i;
	if(DMA_GetITStatus(DMA1_IT_HT1)){
		DMA_ClearITPendingBit(DMA1_IT_HT1);
		i=ADbufSize/2-1;
		ADsum=0;
		while(i--) //takes ~82us for 500smp
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <DMA1_Channel1_IRQHandler+0x60>)
			ADsum+=ADbuff[i];
 800052a:	0059      	lsls	r1, r3, #1
	uint32_t i;
	if(DMA_GetITStatus(DMA1_IT_HT1)){
		DMA_ClearITPendingBit(DMA1_IT_HT1);
		i=ADbufSize/2-1;
		ADsum=0;
		while(i--) //takes ~82us for 500smp
 800052c:	1e58      	subs	r0, r3, #1
			ADsum+=ADbuff[i];
 800052e:	5a51      	ldrh	r1, [r2, r1]
	uint32_t i;
	if(DMA_GetITStatus(DMA1_IT_HT1)){
		DMA_ClearITPendingBit(DMA1_IT_HT1);
		i=ADbufSize/2-1;
		ADsum=0;
		while(i--) //takes ~82us for 500smp
 8000530:	3b02      	subs	r3, #2
			ADsum+=ADbuff[i];
 8000532:	0041      	lsls	r1, r0, #1
 8000534:	5a51      	ldrh	r1, [r2, r1]
	uint32_t i;
	if(DMA_GetITStatus(DMA1_IT_HT1)){
		DMA_ClearITPendingBit(DMA1_IT_HT1);
		i=ADbufSize/2-1;
		ADsum=0;
		while(i--) //takes ~82us for 500smp
 8000536:	1c59      	adds	r1, r3, #1
 8000538:	d1f7      	bne.n	800052a <DMA1_Channel1_IRQHandler+0x4a>
 800053a:	e7d7      	b.n	80004ec <DMA1_Channel1_IRQHandler+0xc>
 800053c:	20000088 	.word	0x20000088
 8000540:	000001f1 	.word	0x000001f1

08000544 <TIM2_IRQHandler>:
			ADsum+=ADbuff[i++];
		//ADmean=(1000*ADmean+24*ADsum/(ADbufSize/2))/1024;
	}
}

void TIM2_IRQHandler(void){
 8000544:	b510      	push	{r4, lr}

	if(TIM_GetITStatus(TIM2,TIM_IT_CC1)!=RESET){
 8000546:	2480      	movs	r4, #128	; 0x80
 8000548:	05e4      	lsls	r4, r4, #23
			ADsum+=ADbuff[i++];
		//ADmean=(1000*ADmean+24*ADsum/(ADbufSize/2))/1024;
	}
}

void TIM2_IRQHandler(void){
 800054a:	b086      	sub	sp, #24

	if(TIM_GetITStatus(TIM2,TIM_IT_CC1)!=RESET){
 800054c:	1c20      	adds	r0, r4, #0
 800054e:	2102      	movs	r1, #2
 8000550:	f002 f92e 	bl	80027b0 <TIM_GetITStatus>
 8000554:	2800      	cmp	r0, #0
 8000556:	d00b      	beq.n	8000570 <TIM2_IRQHandler+0x2c>
		TIM2->SR = (uint16_t)~TIM_IT_CC1; //CLEAR FLAG
 8000558:	2303      	movs	r3, #3
 800055a:	4258      	negs	r0, r3
		TIM2->CCR1+=CCR1r;
 800055c:	4a6e      	ldr	r2, [pc, #440]	; (8000718 <TIM2_IRQHandler+0x1d4>)
}

void TIM2_IRQHandler(void){

	if(TIM_GetITStatus(TIM2,TIM_IT_CC1)!=RESET){
		TIM2->SR = (uint16_t)~TIM_IT_CC1; //CLEAR FLAG
 800055e:	8220      	strh	r0, [r4, #16]
		TIM2->CCR1+=CCR1r;
 8000560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000562:	6813      	ldr	r3, [r2, #0]
 8000564:	1858      	adds	r0, r3, r1
 8000566:	6360      	str	r0, [r4, #52]	; 0x34
		//TIM2->CCR1=toc+CCR1r;
		switch (Pstate){
 8000568:	4c6c      	ldr	r4, [pc, #432]	; (800071c <TIM2_IRQHandler+0x1d8>)
 800056a:	6821      	ldr	r1, [r4, #0]
 800056c:	2906      	cmp	r1, #6
 800056e:	d901      	bls.n	8000574 <TIM2_IRQHandler+0x30>
		}
		//DCnt=CCR1_INC-RPM2CNT(CNT2RPM((float)CCR1_INC)*1.001)+1;
		//DCnt=(float)(CCR1_INC/1.0e5)*(float)(CCR1_INC/1.0e5);

	}
}
 8000570:	b006      	add	sp, #24
 8000572:	bd10      	pop	{r4, pc}

	if(TIM_GetITStatus(TIM2,TIM_IT_CC1)!=RESET){
		TIM2->SR = (uint16_t)~TIM_IT_CC1; //CLEAR FLAG
		TIM2->CCR1+=CCR1r;
		//TIM2->CCR1=toc+CCR1r;
		switch (Pstate){
 8000574:	4b6a      	ldr	r3, [pc, #424]	; (8000720 <TIM2_IRQHandler+0x1dc>)
 8000576:	008a      	lsls	r2, r1, #2
 8000578:	5898      	ldr	r0, [r3, r2]
 800057a:	4687      	mov	pc, r0
			delay_us(1);
			Led2(0);
			break;
		case 6:
			Led2(1);
			AD(0);
 800057c:	4b69      	ldr	r3, [pc, #420]	; (8000724 <TIM2_IRQHandler+0x1e0>)
			Pstate++;
			delay_us(1);
			Led2(0);
			break;
		case 6:
			Led2(1);
 800057e:	4a6a      	ldr	r2, [pc, #424]	; (8000728 <TIM2_IRQHandler+0x1e4>)
			AD(0);
 8000580:	2000      	movs	r0, #0
			Pstate++;
			delay_us(1);
			Led2(0);
			break;
		case 6:
			Led2(1);
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	6191      	str	r1, [r2, #24]
			AD(0);
 8000586:	63d8      	str	r0, [r3, #60]	; 0x3c
			CD(0);
			AU(1);
 8000588:	2190      	movs	r1, #144	; 0x90
			Led2(0);
			break;
		case 6:
			Led2(1);
			AD(0);
			CD(0);
 800058a:	6358      	str	r0, [r3, #52]	; 0x34
			AU(1);
 800058c:	2080      	movs	r0, #128	; 0x80
 800058e:	05ca      	lsls	r2, r1, #23
 8000590:	00c1      	lsls	r1, r0, #3
			BU(1);
 8000592:	2080      	movs	r0, #128	; 0x80
			break;
		case 6:
			Led2(1);
			AD(0);
			CD(0);
			AU(1);
 8000594:	6191      	str	r1, [r2, #24]
			BU(1);
 8000596:	0081      	lsls	r1, r0, #2

			CU(0);
 8000598:	2080      	movs	r0, #128	; 0x80
		case 6:
			Led2(1);
			AD(0);
			CD(0);
			AU(1);
			BU(1);
 800059a:	6191      	str	r1, [r2, #24]

			CU(0);
 800059c:	0041      	lsls	r1, r0, #1
 800059e:	8511      	strh	r1, [r2, #40]	; 0x28
			BD(PWMval);
 80005a0:	4a62      	ldr	r2, [pc, #392]	; (800072c <TIM2_IRQHandler+0x1e8>)
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	6398      	str	r0, [r3, #56]	; 0x38
			Pstate=1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	6023      	str	r3, [r4, #0]
	}
}


void delay_us(uint32_t delay){
	volatile uint32_t start=toc;
 80005aa:	2480      	movs	r4, #128	; 0x80
 80005ac:	05e1      	lsls	r1, r4, #23
 80005ae:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80005b0:	9205      	str	r2, [sp, #20]
	delay=48*delay;
	while((toc-start)<delay);
 80005b2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80005b4:	9b05      	ldr	r3, [sp, #20]
 80005b6:	1ac4      	subs	r4, r0, r3
 80005b8:	2c2f      	cmp	r4, #47	; 0x2f
 80005ba:	d9fa      	bls.n	80005b2 <TIM2_IRQHandler+0x6e>

			CU(0);
			BD(PWMval);
			Pstate=1;
			delay_us(1);
			Led2(0);
 80005bc:	4b5a      	ldr	r3, [pc, #360]	; (8000728 <TIM2_IRQHandler+0x1e4>)
 80005be:	2080      	movs	r0, #128	; 0x80
 80005c0:	8518      	strh	r0, [r3, #40]	; 0x28
			//	delay_us(20); //stay away from noise...
			//	ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
			//	ADC_AnalogWatchdogCmd(ADC1,ENABLE);
			break;
 80005c2:	e7d5      	b.n	8000570 <TIM2_IRQHandler+0x2c>
			delay_us(1);
			Led2(0);
			break;
		case 5:
			Led2(1);
			BD(0);
 80005c4:	4b57      	ldr	r3, [pc, #348]	; (8000724 <TIM2_IRQHandler+0x1e0>)
			Pstate++;
			delay_us(1);
			Led2(0);
			break;
		case 5:
			Led2(1);
 80005c6:	4a58      	ldr	r2, [pc, #352]	; (8000728 <TIM2_IRQHandler+0x1e4>)
			BD(0);
 80005c8:	2000      	movs	r0, #0
			Pstate++;
			delay_us(1);
			Led2(0);
			break;
		case 5:
			Led2(1);
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	6191      	str	r1, [r2, #24]
			BD(0);
 80005ce:	6398      	str	r0, [r3, #56]	; 0x38
			CD(0);
			AU(1);
 80005d0:	2190      	movs	r1, #144	; 0x90
			Led2(0);
			break;
		case 5:
			Led2(1);
			BD(0);
			CD(0);
 80005d2:	6358      	str	r0, [r3, #52]	; 0x34
			AU(1);
 80005d4:	2080      	movs	r0, #128	; 0x80
 80005d6:	05ca      	lsls	r2, r1, #23
 80005d8:	00c1      	lsls	r1, r0, #3
			BU(1);
 80005da:	2080      	movs	r0, #128	; 0x80
			break;
		case 5:
			Led2(1);
			BD(0);
			CD(0);
			AU(1);
 80005dc:	6191      	str	r1, [r2, #24]
			BU(1);
 80005de:	0081      	lsls	r1, r0, #2

			CU(0);
 80005e0:	2080      	movs	r0, #128	; 0x80
		case 5:
			Led2(1);
			BD(0);
			CD(0);
			AU(1);
			BU(1);
 80005e2:	6191      	str	r1, [r2, #24]

			CU(0);
 80005e4:	0041      	lsls	r1, r0, #1
 80005e6:	8511      	strh	r1, [r2, #40]	; 0x28
			AD(PWMval);
 80005e8:	4a50      	ldr	r2, [pc, #320]	; (800072c <TIM2_IRQHandler+0x1e8>)
 80005ea:	6810      	ldr	r0, [r2, #0]
 80005ec:	63d8      	str	r0, [r3, #60]	; 0x3c
			Pstate++;
 80005ee:	6823      	ldr	r3, [r4, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	6023      	str	r3, [r4, #0]
	}
}


void delay_us(uint32_t delay){
	volatile uint32_t start=toc;
 80005f4:	2480      	movs	r4, #128	; 0x80
 80005f6:	05e1      	lsls	r1, r4, #23
 80005f8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80005fa:	9204      	str	r2, [sp, #16]
	delay=48*delay;
	while((toc-start)<delay);
 80005fc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80005fe:	9b04      	ldr	r3, [sp, #16]
 8000600:	1ac4      	subs	r4, r0, r3
 8000602:	2c2f      	cmp	r4, #47	; 0x2f
 8000604:	d9fa      	bls.n	80005fc <TIM2_IRQHandler+0xb8>
 8000606:	e7d9      	b.n	80005bc <TIM2_IRQHandler+0x78>
			//ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
			//ADC_ITConfig(ADC1,ADC_IT_AWD,ENABLE);
			break;
		case 4:
			Led2(1);
			BD(0);
 8000608:	4b46      	ldr	r3, [pc, #280]	; (8000724 <TIM2_IRQHandler+0x1e0>)
			//delay_us(2); //stay away from noise...
			//ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
			//ADC_ITConfig(ADC1,ADC_IT_AWD,ENABLE);
			break;
		case 4:
			Led2(1);
 800060a:	4a47      	ldr	r2, [pc, #284]	; (8000728 <TIM2_IRQHandler+0x1e4>)
			BD(0);
 800060c:	2000      	movs	r0, #0
			//delay_us(2); //stay away from noise...
			//ADC_ClearITPendingBit(ADC1,ADC_IT_AWD);
			//ADC_ITConfig(ADC1,ADC_IT_AWD,ENABLE);
			break;
		case 4:
			Led2(1);
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	6191      	str	r1, [r2, #24]
			BD(0);
 8000612:	6398      	str	r0, [r3, #56]	; 0x38
			CD(0);
			AU(1);
 8000614:	2190      	movs	r1, #144	; 0x90
			//ADC_ITConfig(ADC1,ADC_IT_AWD,ENABLE);
			break;
		case 4:
			Led2(1);
			BD(0);
			CD(0);
 8000616:	6358      	str	r0, [r3, #52]	; 0x34
			AU(1);
 8000618:	2080      	movs	r0, #128	; 0x80
 800061a:	05ca      	lsls	r2, r1, #23
 800061c:	00c1      	lsls	r1, r0, #3
			CU(1);
 800061e:	2080      	movs	r0, #128	; 0x80
			break;
		case 4:
			Led2(1);
			BD(0);
			CD(0);
			AU(1);
 8000620:	6191      	str	r1, [r2, #24]
			CU(1);
 8000622:	0041      	lsls	r1, r0, #1

			BU(0);
 8000624:	2080      	movs	r0, #128	; 0x80
		case 4:
			Led2(1);
			BD(0);
			CD(0);
			AU(1);
			CU(1);
 8000626:	6191      	str	r1, [r2, #24]

			BU(0);
 8000628:	0081      	lsls	r1, r0, #2
 800062a:	8511      	strh	r1, [r2, #40]	; 0x28
			AD(PWMval);
 800062c:	4a3f      	ldr	r2, [pc, #252]	; (800072c <TIM2_IRQHandler+0x1e8>)
 800062e:	6810      	ldr	r0, [r2, #0]
 8000630:	63d8      	str	r0, [r3, #60]	; 0x3c
			Pstate++;
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	6023      	str	r3, [r4, #0]
	}
}


void delay_us(uint32_t delay){
	volatile uint32_t start=toc;
 8000638:	2480      	movs	r4, #128	; 0x80
 800063a:	05e1      	lsls	r1, r4, #23
 800063c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800063e:	9203      	str	r2, [sp, #12]
	delay=48*delay;
	while((toc-start)<delay);
 8000640:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000642:	9b03      	ldr	r3, [sp, #12]
 8000644:	1ac4      	subs	r4, r0, r3
 8000646:	2c2f      	cmp	r4, #47	; 0x2f
 8000648:	d9fa      	bls.n	8000640 <TIM2_IRQHandler+0xfc>
 800064a:	e7b7      	b.n	80005bc <TIM2_IRQHandler+0x78>
			Led2(0);

			break;
		case 3:
			Led2(1);
			AD(0);
 800064c:	4b35      	ldr	r3, [pc, #212]	; (8000724 <TIM2_IRQHandler+0x1e0>)
			delay_us(1);
			Led2(0);

			break;
		case 3:
			Led2(1);
 800064e:	4a36      	ldr	r2, [pc, #216]	; (8000728 <TIM2_IRQHandler+0x1e4>)
			AD(0);
 8000650:	2000      	movs	r0, #0
			delay_us(1);
			Led2(0);

			break;
		case 3:
			Led2(1);
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	6191      	str	r1, [r2, #24]
			AD(0);
 8000656:	63d8      	str	r0, [r3, #60]	; 0x3c
			BD(0);
			AU(1);
 8000658:	2190      	movs	r1, #144	; 0x90

			break;
		case 3:
			Led2(1);
			AD(0);
			BD(0);
 800065a:	6398      	str	r0, [r3, #56]	; 0x38
			AU(1);
 800065c:	2080      	movs	r0, #128	; 0x80
 800065e:	05ca      	lsls	r2, r1, #23
 8000660:	00c1      	lsls	r1, r0, #3
			CU(1);
 8000662:	2080      	movs	r0, #128	; 0x80
			break;
		case 3:
			Led2(1);
			AD(0);
			BD(0);
			AU(1);
 8000664:	6191      	str	r1, [r2, #24]
			CU(1);
 8000666:	0041      	lsls	r1, r0, #1

			BU(0);
 8000668:	2080      	movs	r0, #128	; 0x80
		case 3:
			Led2(1);
			AD(0);
			BD(0);
			AU(1);
			CU(1);
 800066a:	6191      	str	r1, [r2, #24]

			BU(0);
 800066c:	0081      	lsls	r1, r0, #2
 800066e:	8511      	strh	r1, [r2, #40]	; 0x28
			CD(PWMval);
 8000670:	4a2e      	ldr	r2, [pc, #184]	; (800072c <TIM2_IRQHandler+0x1e8>)
 8000672:	6810      	ldr	r0, [r2, #0]
 8000674:	6358      	str	r0, [r3, #52]	; 0x34
			Pstate++;
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	6023      	str	r3, [r4, #0]
	}
}


void delay_us(uint32_t delay){
	volatile uint32_t start=toc;
 800067c:	2480      	movs	r4, #128	; 0x80
 800067e:	05e1      	lsls	r1, r4, #23
 8000680:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000682:	9202      	str	r2, [sp, #8]
	delay=48*delay;
	while((toc-start)<delay);
 8000684:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000686:	9b02      	ldr	r3, [sp, #8]
 8000688:	1ac4      	subs	r4, r0, r3
 800068a:	2c2f      	cmp	r4, #47	; 0x2f
 800068c:	d9fa      	bls.n	8000684 <TIM2_IRQHandler+0x140>
 800068e:	e795      	b.n	80005bc <TIM2_IRQHandler+0x78>
			Led2(0);

			break;
		case 2:
			Led2(1);
			AD(0);
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <TIM2_IRQHandler+0x1e0>)
			delay_us(1);
			Led2(0);

			break;
		case 2:
			Led2(1);
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <TIM2_IRQHandler+0x1e4>)
			AD(0);
 8000694:	2000      	movs	r0, #0
			delay_us(1);
			Led2(0);

			break;
		case 2:
			Led2(1);
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	6191      	str	r1, [r2, #24]
			AD(0);
 800069a:	63d8      	str	r0, [r3, #60]	; 0x3c
			BD(0);
			BU(1);
 800069c:	2190      	movs	r1, #144	; 0x90

			break;
		case 2:
			Led2(1);
			AD(0);
			BD(0);
 800069e:	6398      	str	r0, [r3, #56]	; 0x38
			BU(1);
 80006a0:	2080      	movs	r0, #128	; 0x80
 80006a2:	05ca      	lsls	r2, r1, #23
 80006a4:	0081      	lsls	r1, r0, #2
			CU(1);
 80006a6:	2080      	movs	r0, #128	; 0x80
			break;
		case 2:
			Led2(1);
			AD(0);
			BD(0);
			BU(1);
 80006a8:	6191      	str	r1, [r2, #24]
			CU(1);
 80006aa:	0041      	lsls	r1, r0, #1

			AU(0);
 80006ac:	2080      	movs	r0, #128	; 0x80
		case 2:
			Led2(1);
			AD(0);
			BD(0);
			BU(1);
			CU(1);
 80006ae:	6191      	str	r1, [r2, #24]

			AU(0);
 80006b0:	00c1      	lsls	r1, r0, #3
 80006b2:	8511      	strh	r1, [r2, #40]	; 0x28
			CD(PWMval);
 80006b4:	4a1d      	ldr	r2, [pc, #116]	; (800072c <TIM2_IRQHandler+0x1e8>)
 80006b6:	6810      	ldr	r0, [r2, #0]
 80006b8:	6358      	str	r0, [r3, #52]	; 0x34
			Pstate++;
 80006ba:	6823      	ldr	r3, [r4, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	6023      	str	r3, [r4, #0]
	}
}


void delay_us(uint32_t delay){
	volatile uint32_t start=toc;
 80006c0:	2480      	movs	r4, #128	; 0x80
 80006c2:	05e1      	lsls	r1, r4, #23
 80006c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80006c6:	9201      	str	r2, [sp, #4]
	delay=48*delay;
	while((toc-start)<delay);
 80006c8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80006ca:	9b01      	ldr	r3, [sp, #4]
 80006cc:	1ac4      	subs	r4, r0, r3
 80006ce:	2c2f      	cmp	r4, #47	; 0x2f
 80006d0:	d9fa      	bls.n	80006c8 <TIM2_IRQHandler+0x184>
 80006d2:	e773      	b.n	80005bc <TIM2_IRQHandler+0x78>

		// -----------------PMOS LOGIC-------------------
		//!!!  AU(0) will turn the UP PMOS ON.. obviously
		// -----------------------------------------------
		case 1:
			Led2(1);
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <TIM2_IRQHandler+0x1e4>)
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	6191      	str	r1, [r2, #24]
			CU(1);
 80006da:	2090      	movs	r0, #144	; 0x90
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	05c3      	lsls	r3, r0, #23
 80006e0:	004a      	lsls	r2, r1, #1
			BU(1);
 80006e2:	2080      	movs	r0, #128	; 0x80
		// -----------------PMOS LOGIC-------------------
		//!!!  AU(0) will turn the UP PMOS ON.. obviously
		// -----------------------------------------------
		case 1:
			Led2(1);
			CU(1);
 80006e4:	619a      	str	r2, [r3, #24]
			BU(1);
 80006e6:	0081      	lsls	r1, r0, #2
			AD(0);
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <TIM2_IRQHandler+0x1e0>)
		//!!!  AU(0) will turn the UP PMOS ON.. obviously
		// -----------------------------------------------
		case 1:
			Led2(1);
			CU(1);
			BU(1);
 80006ea:	6199      	str	r1, [r3, #24]
			AD(0);
 80006ec:	2000      	movs	r0, #0
			CD(0);

			AU(0);
 80006ee:	2180      	movs	r1, #128	; 0x80
		// -----------------------------------------------
		case 1:
			Led2(1);
			CU(1);
			BU(1);
			AD(0);
 80006f0:	63d0      	str	r0, [r2, #60]	; 0x3c
			CD(0);
 80006f2:	6350      	str	r0, [r2, #52]	; 0x34

			AU(0);
 80006f4:	00c8      	lsls	r0, r1, #3
 80006f6:	8518      	strh	r0, [r3, #40]	; 0x28
			BD(PWMval);
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <TIM2_IRQHandler+0x1e8>)
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	6391      	str	r1, [r2, #56]	; 0x38
			Pstate++;
 80006fe:	6822      	ldr	r2, [r4, #0]
 8000700:	3201      	adds	r2, #1
 8000702:	6022      	str	r2, [r4, #0]
	}
}


void delay_us(uint32_t delay){
	volatile uint32_t start=toc;
 8000704:	2480      	movs	r4, #128	; 0x80
 8000706:	05e0      	lsls	r0, r4, #23
 8000708:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800070a:	9300      	str	r3, [sp, #0]
	delay=48*delay;
	while((toc-start)<delay);
 800070c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800070e:	9a00      	ldr	r2, [sp, #0]
 8000710:	1a8c      	subs	r4, r1, r2
 8000712:	2c2f      	cmp	r4, #47	; 0x2f
 8000714:	d9fa      	bls.n	800070c <TIM2_IRQHandler+0x1c8>
 8000716:	e751      	b.n	80005bc <TIM2_IRQHandler+0x78>
 8000718:	20000058 	.word	0x20000058
 800071c:	20000054 	.word	0x20000054
 8000720:	08002ac8 	.word	0x08002ac8
 8000724:	40012c00 	.word	0x40012c00
 8000728:	48000400 	.word	0x48000400
 800072c:	20000084 	.word	0x20000084

08000730 <delay_us>:
	}
}


void delay_us(uint32_t delay){
	volatile uint32_t start=toc;
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	05c9      	lsls	r1, r1, #23
 8000734:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	delay=48*delay;
 8000736:	0042      	lsls	r2, r0, #1

	}
}


void delay_us(uint32_t delay){
 8000738:	b082      	sub	sp, #8
	volatile uint32_t start=toc;
	delay=48*delay;
 800073a:	1810      	adds	r0, r2, r0
	}
}


void delay_us(uint32_t delay){
	volatile uint32_t start=toc;
 800073c:	9301      	str	r3, [sp, #4]
	delay=48*delay;
 800073e:	0100      	lsls	r0, r0, #4
	while((toc-start)<delay);
 8000740:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000742:	9b01      	ldr	r3, [sp, #4]
 8000744:	1ad2      	subs	r2, r2, r3
 8000746:	4290      	cmp	r0, r2
 8000748:	d8fa      	bhi.n	8000740 <delay_us+0x10>
}
 800074a:	b002      	add	sp, #8
 800074c:	4770      	bx	lr
 800074e:	46c0      	nop			; (mov r8, r8)

08000750 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void){// move the main loop to main to avoid preemption..
}
 8000750:	4770      	bx	lr
 8000752:	46c0      	nop			; (mov r8, r8)

08000754 <I2C1_IRQHandler>:


void I2C1_IRQHandler(void){
 8000754:	b570      	push	{r4, r5, r6, lr}
	static uint8_t pck_len;
	static uint8_t CRCdat[4],CRCind;
	uint32_t a;


	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_ADDR)){
 8000756:	485a      	ldr	r0, [pc, #360]	; (80008c0 <I2C1_IRQHandler+0x16c>)
 */
void SysTick_Handler(void){// move the main loop to main to avoid preemption..
}


void I2C1_IRQHandler(void){
 8000758:	b082      	sub	sp, #8
	static uint8_t pck_len;
	static uint8_t CRCdat[4],CRCind;
	uint32_t a;


	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_ADDR)){
 800075a:	2108      	movs	r1, #8
 800075c:	f000 ff88 	bl	8001670 <I2C_GetFlagStatus>
 8000760:	2800      	cmp	r0, #0
 8000762:	d11a      	bne.n	800079a <I2C1_IRQHandler+0x46>

			}
		}
		I2C_ClearITPendingBit(I2C1,I2C_IT_ADDR);
	}
	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_RXNE)){
 8000764:	4856      	ldr	r0, [pc, #344]	; (80008c0 <I2C1_IRQHandler+0x16c>)
 8000766:	2104      	movs	r1, #4
 8000768:	f000 ff82 	bl	8001670 <I2C_GetFlagStatus>
 800076c:	2800      	cmp	r0, #0
 800076e:	d101      	bne.n	8000774 <I2C1_IRQHandler+0x20>
		cnt++;
	}



}
 8000770:	b002      	add	sp, #8
 8000772:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		I2C_ClearITPendingBit(I2C1,I2C_IT_ADDR);
	}
	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_RXNE)){
		data=I2C_ReceiveData(I2C1); //must read always to reset RX flag
 8000774:	4852      	ldr	r0, [pc, #328]	; (80008c0 <I2C1_IRQHandler+0x16c>)
 8000776:	f000 ff6d 	bl	8001654 <I2C_ReceiveData>
		if (cnt<pck_len-1){
 800077a:	4c52      	ldr	r4, [pc, #328]	; (80008c4 <I2C1_IRQHandler+0x170>)
			}
		}
		I2C_ClearITPendingBit(I2C1,I2C_IT_ADDR);
	}
	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_RXNE)){
		data=I2C_ReceiveData(I2C1); //must read always to reset RX flag
 800077c:	466a      	mov	r2, sp
		if (cnt<pck_len-1){
 800077e:	8823      	ldrh	r3, [r4, #0]
 8000780:	78a6      	ldrb	r6, [r4, #2]
 8000782:	b21d      	sxth	r5, r3
 8000784:	3e01      	subs	r6, #1
			}
		}
		I2C_ClearITPendingBit(I2C1,I2C_IT_ADDR);
	}
	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_RXNE)){
		data=I2C_ReceiveData(I2C1); //must read always to reset RX flag
 8000786:	71d0      	strb	r0, [r2, #7]
		if (cnt<pck_len-1){
 8000788:	42b5      	cmp	r5, r6
 800078a:	db10      	blt.n	80007ae <I2C1_IRQHandler+0x5a>
				CRCind=0;
				CRC_CalcCRC(*((uint32_t *)CRCdat));
			}
		}

		if(I2C_state==I2C_GC_Mode && !(global_pck.flag & Pck_Flag_NewAndReady)){ //Pck_Flag_NewAndReady must be zerod by mainloop/init
 800078c:	2004      	movs	r0, #4
 800078e:	5e22      	ldrsh	r2, [r4, r0]
 8000790:	2a01      	cmp	r2, #1
 8000792:	d01d      	beq.n	80007d0 <I2C1_IRQHandler+0x7c>
						}
					}
				}
			}
		}
		cnt++;
 8000794:	3301      	adds	r3, #1
 8000796:	8023      	strh	r3, [r4, #0]
 8000798:	e7ea      	b.n	8000770 <I2C1_IRQHandler+0x1c>
	uint32_t a;


	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_ADDR)){

		if(I2C_GetAddressMatched(I2C1)==0x00){ //General Call
 800079a:	4849      	ldr	r0, [pc, #292]	; (80008c0 <I2C1_IRQHandler+0x16c>)
 800079c:	f000 fec0 	bl	8001520 <I2C_GetAddressMatched>
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d027      	beq.n	80007f4 <I2C1_IRQHandler+0xa0>
				CRC_ResetDR();
				CRCind=0;

			}
		}
		I2C_ClearITPendingBit(I2C1,I2C_IT_ADDR);
 80007a4:	4846      	ldr	r0, [pc, #280]	; (80008c0 <I2C1_IRQHandler+0x16c>)
 80007a6:	2108      	movs	r1, #8
 80007a8:	f000 ff84 	bl	80016b4 <I2C_ClearITPendingBit>
 80007ac:	e7da      	b.n	8000764 <I2C1_IRQHandler+0x10>
	}
	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_RXNE)){
		data=I2C_ReceiveData(I2C1); //must read always to reset RX flag
		if (cnt<pck_len-1){
			CRCdat[CRCind++]=data;
 80007ae:	79a2      	ldrb	r2, [r4, #6]
 80007b0:	4668      	mov	r0, sp
 80007b2:	18a1      	adds	r1, r4, r2
 80007b4:	79c5      	ldrb	r5, [r0, #7]
 80007b6:	3201      	adds	r2, #1
 80007b8:	b2d6      	uxtb	r6, r2
 80007ba:	720d      	strb	r5, [r1, #8]
 80007bc:	71a6      	strb	r6, [r4, #6]
			if(CRCind==4){
 80007be:	2e04      	cmp	r6, #4
 80007c0:	d1e4      	bne.n	800078c <I2C1_IRQHandler+0x38>
				CRCind=0;
 80007c2:	2300      	movs	r3, #0
				CRC_CalcCRC(*((uint32_t *)CRCdat));
 80007c4:	68a0      	ldr	r0, [r4, #8]
	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_RXNE)){
		data=I2C_ReceiveData(I2C1); //must read always to reset RX flag
		if (cnt<pck_len-1){
			CRCdat[CRCind++]=data;
			if(CRCind==4){
				CRCind=0;
 80007c6:	71a3      	strb	r3, [r4, #6]
				CRC_CalcCRC(*((uint32_t *)CRCdat));
 80007c8:	f000 faf6 	bl	8000db8 <CRC_CalcCRC>
 80007cc:	8823      	ldrh	r3, [r4, #0]
 80007ce:	e7dd      	b.n	800078c <I2C1_IRQHandler+0x38>
			}
		}

		if(I2C_state==I2C_GC_Mode && !(global_pck.flag & Pck_Flag_NewAndReady)){ //Pck_Flag_NewAndReady must be zerod by mainloop/init
 80007d0:	4d3d      	ldr	r5, [pc, #244]	; (80008c8 <I2C1_IRQHandler+0x174>)
 80007d2:	8c28      	ldrh	r0, [r5, #32]
 80007d4:	4202      	tst	r2, r0
 80007d6:	d1dd      	bne.n	8000794 <I2C1_IRQHandler+0x40>
			if(cnt==0){
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d11b      	bne.n	8000814 <I2C1_IRQHandler+0xc0>
				global_pck.flag=data&(~Pck_Flag_NewAndReady);//Pck_Flag_NewAndReady force RESERVED..
 80007dc:	466e      	mov	r6, sp
 80007de:	79f1      	ldrb	r1, [r6, #7]
 80007e0:	4391      	bics	r1, r2
 80007e2:	8429      	strh	r1, [r5, #32]
				switch (global_pck.flag){
 80007e4:	2904      	cmp	r1, #4
 80007e6:	d062      	beq.n	80008ae <I2C1_IRQHandler+0x15a>
 80007e8:	d856      	bhi.n	8000898 <I2C1_IRQHandler+0x144>
 80007ea:	2902      	cmp	r1, #2
 80007ec:	d023      	beq.n	8000836 <I2C1_IRQHandler+0xe2>
					break;
				case Pck_Flag_Speed:
					ptr=(uint8_t *)&global_pck.speed;
					break;
				default:
					ptr=NULL;
 80007ee:	2500      	movs	r5, #0
 80007f0:	60e5      	str	r5, [r4, #12]
					break;
 80007f2:	e7cf      	b.n	8000794 <I2C1_IRQHandler+0x40>


	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_ADDR)){

		if(I2C_GetAddressMatched(I2C1)==0x00){ //General Call
			if(I2C_GetTransferDirection(I2C1)==I2C_Direction_Transmitter){// means Master transmits..
 80007f4:	4832      	ldr	r0, [pc, #200]	; (80008c0 <I2C1_IRQHandler+0x16c>)
 80007f6:	f000 fe99 	bl	800152c <I2C_GetTransferDirection>
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d1d2      	bne.n	80007a4 <I2C1_IRQHandler+0x50>
				cnt=0;
 80007fe:	4c31      	ldr	r4, [pc, #196]	; (80008c4 <I2C1_IRQHandler+0x170>)
				pck_len=0xFF;
 8000800:	23ff      	movs	r3, #255	; 0xff

	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_ADDR)){

		if(I2C_GetAddressMatched(I2C1)==0x00){ //General Call
			if(I2C_GetTransferDirection(I2C1)==I2C_Direction_Transmitter){// means Master transmits..
				cnt=0;
 8000802:	8020      	strh	r0, [r4, #0]
				pck_len=0xFF;
				I2C_state=I2C_GC_Mode;
 8000804:	2001      	movs	r0, #1
	if(I2C_GetFlagStatus(I2C1,I2C_FLAG_ADDR)){

		if(I2C_GetAddressMatched(I2C1)==0x00){ //General Call
			if(I2C_GetTransferDirection(I2C1)==I2C_Direction_Transmitter){// means Master transmits..
				cnt=0;
				pck_len=0xFF;
 8000806:	70a3      	strb	r3, [r4, #2]
				I2C_state=I2C_GC_Mode;
 8000808:	80a0      	strh	r0, [r4, #4]
				CRC_ResetDR();
 800080a:	f000 fa9d 	bl	8000d48 <CRC_ResetDR>
				CRCind=0;
 800080e:	2100      	movs	r1, #0
 8000810:	71a1      	strb	r1, [r4, #6]
 8000812:	e7c7      	b.n	80007a4 <I2C1_IRQHandler+0x50>
				default:
					ptr=NULL;
					break;
				}
			}else{
				if(cnt==1){
 8000814:	b219      	sxth	r1, r3
 8000816:	2901      	cmp	r1, #1
 8000818:	d045      	beq.n	80008a6 <I2C1_IRQHandler+0x152>
					pck_len=data;
				}
				else{
					if(cnt>=I2C_Own_Pck && cnt<(I2C_Own_Pck+Pck_Payload)){
 800081a:	1c1e      	adds	r6, r3, #0
 800081c:	3e0a      	subs	r6, #10
 800081e:	2e07      	cmp	r6, #7
 8000820:	d80b      	bhi.n	800083a <I2C1_IRQHandler+0xe6>
						if(ptr!=NULL)
 8000822:	68e5      	ldr	r5, [r4, #12]
 8000824:	2d00      	cmp	r5, #0
 8000826:	d0b5      	beq.n	8000794 <I2C1_IRQHandler+0x40>
							*ptr++=data;
 8000828:	466e      	mov	r6, sp
 800082a:	79f1      	ldrb	r1, [r6, #7]
 800082c:	7029      	strb	r1, [r5, #0]
 800082e:	3501      	adds	r5, #1
 8000830:	60e5      	str	r5, [r4, #12]
 8000832:	e7af      	b.n	8000794 <I2C1_IRQHandler+0x40>
					break;
				case Pck_Flag_Cnt:
					ptr=(uint8_t *)&global_pck.cnt;
					break;
				case Pck_Flag_Speed:
					ptr=(uint8_t *)&global_pck.speed;
 8000834:	3510      	adds	r5, #16
 8000836:	60e5      	str	r5, [r4, #12]
					break;
 8000838:	e7ac      	b.n	8000794 <I2C1_IRQHandler+0x40>
					if(cnt>=I2C_Own_Pck && cnt<(I2C_Own_Pck+Pck_Payload)){
						if(ptr!=NULL)
							*ptr++=data;
					}
					else{
						if(cnt==pck_len-1){
 800083a:	78a0      	ldrb	r0, [r4, #2]
 800083c:	3801      	subs	r0, #1
 800083e:	4281      	cmp	r1, r0
 8000840:	d1a8      	bne.n	8000794 <I2C1_IRQHandler+0x40>
							if(CRCind>0){//zero padding if any left
 8000842:	79a3      	ldrb	r3, [r4, #6]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d01e      	beq.n	8000886 <I2C1_IRQHandler+0x132>
								while(CRCind<4)
 8000848:	2b03      	cmp	r3, #3
 800084a:	d819      	bhi.n	8000880 <I2C1_IRQHandler+0x12c>
 800084c:	2603      	movs	r6, #3
 800084e:	1af0      	subs	r0, r6, r3
									CRCdat[CRCind++]=0;
 8000850:	18e6      	adds	r6, r4, r3
 8000852:	3301      	adds	r3, #1
 8000854:	2100      	movs	r1, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4002      	ands	r2, r0
 800085a:	7231      	strb	r1, [r6, #8]
 800085c:	1c20      	adds	r0, r4, #0
							*ptr++=data;
					}
					else{
						if(cnt==pck_len-1){
							if(CRCind>0){//zero padding if any left
								while(CRCind<4)
 800085e:	2b04      	cmp	r3, #4
 8000860:	d00d      	beq.n	800087e <I2C1_IRQHandler+0x12a>
 8000862:	b252      	sxtb	r2, r2
 8000864:	2a00      	cmp	r2, #0
 8000866:	d103      	bne.n	8000870 <I2C1_IRQHandler+0x11c>
									CRCdat[CRCind++]=0;
 8000868:	18e0      	adds	r0, r4, r3
 800086a:	3301      	adds	r3, #1
 800086c:	7201      	strb	r1, [r0, #8]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	18e6      	adds	r6, r4, r3
 8000872:	3301      	adds	r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	1c20      	adds	r0, r4, #0
 8000878:	7231      	strb	r1, [r6, #8]
							*ptr++=data;
					}
					else{
						if(cnt==pck_len-1){
							if(CRCind>0){//zero padding if any left
								while(CRCind<4)
 800087a:	2b04      	cmp	r3, #4
 800087c:	d1f4      	bne.n	8000868 <I2C1_IRQHandler+0x114>
 800087e:	7183      	strb	r3, [r0, #6]
									CRCdat[CRCind++]=0;
								CRC_CalcCRC(*((uint32_t *)CRCdat));
 8000880:	68a0      	ldr	r0, [r4, #8]
 8000882:	f000 fa99 	bl	8000db8 <CRC_CalcCRC>
							}
							if((uint8_t)CRC->DR==data){
 8000886:	4911      	ldr	r1, [pc, #68]	; (80008cc <I2C1_IRQHandler+0x178>)
 8000888:	4668      	mov	r0, sp
 800088a:	680a      	ldr	r2, [r1, #0]
 800088c:	79c6      	ldrb	r6, [r0, #7]
 800088e:	b2d3      	uxtb	r3, r2
 8000890:	42b3      	cmp	r3, r6
 8000892:	d00f      	beq.n	80008b4 <I2C1_IRQHandler+0x160>
 8000894:	8823      	ldrh	r3, [r4, #0]
 8000896:	e77d      	b.n	8000794 <I2C1_IRQHandler+0x40>
		}

		if(I2C_state==I2C_GC_Mode && !(global_pck.flag & Pck_Flag_NewAndReady)){ //Pck_Flag_NewAndReady must be zerod by mainloop/init
			if(cnt==0){
				global_pck.flag=data&(~Pck_Flag_NewAndReady);//Pck_Flag_NewAndReady force RESERVED..
				switch (global_pck.flag){
 8000898:	2908      	cmp	r1, #8
 800089a:	d0cb      	beq.n	8000834 <I2C1_IRQHandler+0xe0>
 800089c:	2910      	cmp	r1, #16
 800089e:	d1a6      	bne.n	80007ee <I2C1_IRQHandler+0x9a>
					break;
				case Pck_Flag_PWM:
					ptr=(uint8_t *)&global_pck.pwm;
					break;
				case Pck_Flag_Cnt:
					ptr=(uint8_t *)&global_pck.cnt;
 80008a0:	3518      	adds	r5, #24
 80008a2:	60e5      	str	r5, [r4, #12]
					break;
 80008a4:	e776      	b.n	8000794 <I2C1_IRQHandler+0x40>
					ptr=NULL;
					break;
				}
			}else{
				if(cnt==1){
					pck_len=data;
 80008a6:	466a      	mov	r2, sp
 80008a8:	79d0      	ldrb	r0, [r2, #7]
 80008aa:	70a0      	strb	r0, [r4, #2]
 80008ac:	e772      	b.n	8000794 <I2C1_IRQHandler+0x40>
				switch (global_pck.flag){
				case Pck_Flag_Time:
					ptr=(uint8_t *)&global_pck.time;
					break;
				case Pck_Flag_PWM:
					ptr=(uint8_t *)&global_pck.pwm;
 80008ae:	3508      	adds	r5, #8
 80008b0:	60e5      	str	r5, [r4, #12]
					break;
 80008b2:	e76f      	b.n	8000794 <I2C1_IRQHandler+0x40>
								while(CRCind<4)
									CRCdat[CRCind++]=0;
								CRC_CalcCRC(*((uint32_t *)CRCdat));
							}
							if((uint8_t)CRC->DR==data){
								global_pck.flag|=Pck_Flag_NewAndReady;
 80008b4:	8c29      	ldrh	r1, [r5, #32]
 80008b6:	2201      	movs	r2, #1
 80008b8:	4311      	orrs	r1, r2
 80008ba:	8429      	strh	r1, [r5, #32]
 80008bc:	e7ea      	b.n	8000894 <I2C1_IRQHandler+0x140>
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40005400 	.word	0x40005400
 80008c4:	20000040 	.word	0x20000040
 80008c8:	2000005c 	.word	0x2000005c
 80008cc:	40023000 	.word	0x40023000

080008d0 <NMI_Handler>:
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
}
 80008d0:	4770      	bx	lr
 80008d2:	46c0      	nop			; (mov r8, r8)

080008d4 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 80008d4:	e7fe      	b.n	80008d4 <HardFault_Handler>
 80008d6:	46c0      	nop			; (mov r8, r8)

080008d8 <SVC_Handler>:
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
}
 80008d8:	4770      	bx	lr
 80008da:	46c0      	nop			; (mov r8, r8)

080008dc <PendSV_Handler>:
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
}
 80008dc:	4770      	bx	lr
 80008de:	46c0      	nop			; (mov r8, r8)

080008e0 <EXTI0_1_IRQHandler>:
 * @retval None
 */
void EXTI0_1_IRQHandler(void)
{

}
 80008e0:	4770      	bx	lr
 80008e2:	46c0      	nop			; (mov r8, r8)

080008e4 <EXTI2_3_IRQHandler>:
void EXTI2_3_IRQHandler(void){

}
 80008e4:	4770      	bx	lr
 80008e6:	46c0      	nop			; (mov r8, r8)

080008e8 <EXTI4_15_IRQHandler>:
 * @retval None
 */
void EXTI4_15_IRQHandler(void)
{

}
 80008e8:	4770      	bx	lr
 80008ea:	46c0      	nop			; (mov r8, r8)

080008ec <TIM6_DAC_IRQHandler>:
 * @param  None
 * @retval None
 */
void TIM6_DAC_IRQHandler(void)  
{
}  
 80008ec:	4770      	bx	lr
 80008ee:	46c0      	nop			; (mov r8, r8)

080008f0 <TIM17_IRQHandler>:
 * @param  None
 * @retval None
 */
void TIM17_IRQHandler(void)
{
}
 80008f0:	4770      	bx	lr
 80008f2:	46c0      	nop			; (mov r8, r8)

080008f4 <SystemInit>:
 * @retval None
 */
void SystemInit (void)
{    
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 80008f4:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <SystemInit+0xf0>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	6819      	ldr	r1, [r3, #0]
 *         SystemCoreClock variable.
 * @param  None
 * @retval None
 */
void SystemInit (void)
{    
 80008fa:	b082      	sub	sp, #8
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 80008fc:	4311      	orrs	r1, r2
 80008fe:	6019      	str	r1, [r3, #0]
#ifdef STM32F0XX_MD
	/* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
	RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
	/* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
	RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000900:	6858      	ldr	r0, [r3, #4]
 8000902:	4939      	ldr	r1, [pc, #228]	; (80009e8 <SystemInit+0xf4>)
 8000904:	4001      	ands	r1, r0
 8000906:	6059      	str	r1, [r3, #4]
#endif /* STM32F0XX_MD */

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	4938      	ldr	r1, [pc, #224]	; (80009ec <SystemInit+0xf8>)
 800090c:	4001      	ands	r1, r0
 800090e:	6019      	str	r1, [r3, #0]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	4937      	ldr	r1, [pc, #220]	; (80009f0 <SystemInit+0xfc>)
 8000914:	4001      	ands	r1, r0
 8000916:	6019      	str	r1, [r3, #0]

	/* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
	RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000918:	6858      	ldr	r0, [r3, #4]
 800091a:	4936      	ldr	r1, [pc, #216]	; (80009f4 <SystemInit+0x100>)
 800091c:	4001      	ands	r1, r0
 800091e:	6059      	str	r1, [r3, #4]

	/* Reset PREDIV1[3:0] bits */
	RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000922:	200f      	movs	r0, #15
 8000924:	4381      	bics	r1, r0
 8000926:	62d9      	str	r1, [r3, #44]	; 0x2c

	/* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
	RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000928:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800092a:	4933      	ldr	r1, [pc, #204]	; (80009f8 <SystemInit+0x104>)
 800092c:	4001      	ands	r1, r0
 800092e:	6319      	str	r1, [r3, #48]	; 0x30

	/* Reset HSI14 bit */
	RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000930:	6b58      	ldr	r0, [r3, #52]	; 0x34

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8000932:	2100      	movs	r1, #0

	/* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
	RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

	/* Reset HSI14 bit */
	RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000934:	4390      	bics	r0, r2
 8000936:	6358      	str	r0, [r3, #52]	; 0x34

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8000938:	6099      	str	r1, [r3, #8]
 * @param  None
 * @retval None
 */
static void SetSysClock(void)
{
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800093a:	9100      	str	r1, [sp, #0]
 800093c:	9101      	str	r1, [sp, #4]
	{
	}
#else
#if defined (PLL_SOURCE_HSE)
	/* Enable HSE */
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	0251      	lsls	r1, r2, #9
 8000944:	4301      	orrs	r1, r0
 8000946:	6019      	str	r1, [r3, #0]
	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
		StartUpCounter++;
	} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));// Takes ~160 cycles
 8000948:	20a0      	movs	r0, #160	; 0xa0
#endif /* PLL_SOURCE_HSE */

	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800094a:	1c19      	adds	r1, r3, #0
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	029a      	lsls	r2, r3, #10
		StartUpCounter++;
	} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));// Takes ~160 cycles
 8000950:	01c0      	lsls	r0, r0, #7
 8000952:	e002      	b.n	800095a <SystemInit+0x66>
 8000954:	9b00      	ldr	r3, [sp, #0]
 8000956:	4283      	cmp	r3, r0
 8000958:	d008      	beq.n	800096c <SystemInit+0x78>
#endif /* PLL_SOURCE_HSE */

	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800095a:	680b      	ldr	r3, [r1, #0]
 800095c:	4013      	ands	r3, r2
 800095e:	9301      	str	r3, [sp, #4]
		StartUpCounter++;
 8000960:	9b00      	ldr	r3, [sp, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	9300      	str	r3, [sp, #0]
	} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));// Takes ~160 cycles
 8000966:	9b01      	ldr	r3, [sp, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0f3      	beq.n	8000954 <SystemInit+0x60>

	if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800096c:	491d      	ldr	r1, [pc, #116]	; (80009e4 <SystemInit+0xf0>)
 800096e:	2080      	movs	r0, #128	; 0x80
 8000970:	680a      	ldr	r2, [r1, #0]
 8000972:	0283      	lsls	r3, r0, #10
 8000974:	4013      	ands	r3, r2
 8000976:	d006      	beq.n	8000986 <SystemInit+0x92>
	{
		HSEStatus = (uint32_t)0x01;
 8000978:	2101      	movs	r1, #1
 800097a:	9101      	str	r1, [sp, #4]
	else
	{
		HSEStatus = (uint32_t)0x00;
	}

	if (HSEStatus == (uint32_t)0x01)
 800097c:	9a01      	ldr	r2, [sp, #4]
 800097e:	2a01      	cmp	r2, #1
 8000980:	d005      	beq.n	800098e <SystemInit+0x9a>
	/* Disable all interrupts */
	RCC->CIR = 0x00000000;

	/* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
	SetSysClock();
}
 8000982:	b002      	add	sp, #8
 8000984:	4770      	bx	lr
	{
		HSEStatus = (uint32_t)0x01;
	}
	else
	{
		HSEStatus = (uint32_t)0x00;
 8000986:	9301      	str	r3, [sp, #4]
	}

	if (HSEStatus == (uint32_t)0x01)
 8000988:	9a01      	ldr	r2, [sp, #4]
 800098a:	2a01      	cmp	r2, #1
 800098c:	d1f9      	bne.n	8000982 <SystemInit+0x8e>
	{
		/* Enable Prefetch Buffer and set Flash Latency */
		FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <SystemInit+0x108>)
 8000990:	2011      	movs	r0, #17
 8000992:	6018      	str	r0, [r3, #0]

		/* HCLK = SYSCLK */
		RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <SystemInit+0xf0>)
		/* PCLK = HCLK */
		RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

		/* PLL configuration = HSE * 6 = 48 MHz */
		// We use 12MHz so RCC_CFGR_PLLMULL4 instead of RCC_CFGR_PLLMULL6 (4*12)
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <SystemInit+0x10c>)
	{
		/* Enable Prefetch Buffer and set Flash Latency */
		FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;

		/* HCLK = SYSCLK */
		RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000998:	6841      	ldr	r1, [r0, #4]
 800099a:	6041      	str	r1, [r0, #4]

		/* PCLK = HCLK */
		RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 800099c:	6842      	ldr	r2, [r0, #4]
 800099e:	6042      	str	r2, [r0, #4]

		/* PLL configuration = HSE * 6 = 48 MHz */
		// We use 12MHz so RCC_CFGR_PLLMULL4 instead of RCC_CFGR_PLLMULL6 (4*12)
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80009a0:	6841      	ldr	r1, [r0, #4]
 80009a2:	400b      	ands	r3, r1
 80009a4:	6043      	str	r3, [r0, #4]
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL4);
 80009a6:	6842      	ldr	r2, [r0, #4]
 80009a8:	2190      	movs	r1, #144	; 0x90
 80009aa:	030b      	lsls	r3, r1, #12
 80009ac:	4313      	orrs	r3, r2
 80009ae:	6043      	str	r3, [r0, #4]

		/* Enable PLL */
		RCC->CR |= RCC_CR_PLLON;
 80009b0:	6802      	ldr	r2, [r0, #0]
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	044b      	lsls	r3, r1, #17
 80009b6:	4313      	orrs	r3, r2

		/* Wait till PLL is ready */
		while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009b8:	2280      	movs	r2, #128	; 0x80
		// We use 12MHz so RCC_CFGR_PLLMULL4 instead of RCC_CFGR_PLLMULL6 (4*12)
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
		RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL4);

		/* Enable PLL */
		RCC->CR |= RCC_CR_PLLON;
 80009ba:	6003      	str	r3, [r0, #0]

		/* Wait till PLL is ready */
		while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009bc:	0491      	lsls	r1, r2, #18
 80009be:	6803      	ldr	r3, [r0, #0]
 80009c0:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <SystemInit+0xf0>)
 80009c2:	420b      	tst	r3, r1
 80009c4:	d0fb      	beq.n	80009be <SystemInit+0xca>
		{
		}

		/* Select PLL as system clock source */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80009c6:	6850      	ldr	r0, [r2, #4]
 80009c8:	2103      	movs	r1, #3
 80009ca:	4388      	bics	r0, r1
 80009cc:	6050      	str	r0, [r2, #4]
		RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80009ce:	6850      	ldr	r0, [r2, #4]
 80009d0:	2302      	movs	r3, #2
 80009d2:	4303      	orrs	r3, r0
 80009d4:	6053      	str	r3, [r2, #4]

		/* Wait till PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80009d6:	210c      	movs	r1, #12
 80009d8:	6850      	ldr	r0, [r2, #4]
 80009da:	4008      	ands	r0, r1
 80009dc:	2808      	cmp	r0, #8
 80009de:	d1fb      	bne.n	80009d8 <SystemInit+0xe4>
 80009e0:	e7cf      	b.n	8000982 <SystemInit+0x8e>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40021000 	.word	0x40021000
 80009e8:	08ffb80c 	.word	0x08ffb80c
 80009ec:	fef6ffff 	.word	0xfef6ffff
 80009f0:	fffbffff 	.word	0xfffbffff
 80009f4:	ffc0ffff 	.word	0xffc0ffff
 80009f8:	fffffeac 	.word	0xfffffeac
 80009fc:	40022000 	.word	0x40022000
 8000a00:	ffc07fff 	.word	0xffc07fff

08000a04 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
	uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <SystemCoreClockUpdate+0x54>)
 8000a06:	210c      	movs	r1, #12
 8000a08:	6853      	ldr	r3, [r2, #4]
 *           value for HSE crystal.
 * @param  None
 * @retval None
 */
void SystemCoreClockUpdate (void)
{
 8000a0a:	b510      	push	{r4, lr}
	uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a0c:	400b      	ands	r3, r1

	switch (tmp)
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d00b      	beq.n	8000a2a <SystemCoreClockUpdate+0x26>
 8000a12:	2b08      	cmp	r3, #8
 8000a14:	d00b      	beq.n	8000a2e <SystemCoreClockUpdate+0x2a>
 8000a16:	4811      	ldr	r0, [pc, #68]	; (8000a5c <SystemCoreClockUpdate+0x58>)
		SystemCoreClock = HSI_VALUE;
		break;
	}
	/* Compute HCLK clock frequency ----------------*/
	/* Get HCLK prescaler */
	tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000a18:	4c0f      	ldr	r4, [pc, #60]	; (8000a58 <SystemCoreClockUpdate+0x54>)
 8000a1a:	6861      	ldr	r1, [r4, #4]
 8000a1c:	4c10      	ldr	r4, [pc, #64]	; (8000a60 <SystemCoreClockUpdate+0x5c>)
 8000a1e:	060b      	lsls	r3, r1, #24
 8000a20:	0f1a      	lsrs	r2, r3, #28
 8000a22:	5ca1      	ldrb	r1, [r4, r2]
	/* HCLK clock frequency */
	SystemCoreClock >>= tmp;
 8000a24:	40c8      	lsrs	r0, r1
 8000a26:	6120      	str	r0, [r4, #16]
}
 8000a28:	bd10      	pop	{r4, pc}
	case 0x00:  /* HSI used as system clock */
		SystemCoreClock = HSI_VALUE;
		break;
	case 0x04:  /* HSE used as system clock */
		SystemCoreClock = HSE_VALUE;
		break;
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <SystemCoreClockUpdate+0x60>)
 8000a2c:	e7f4      	b.n	8000a18 <SystemCoreClockUpdate+0x14>
	case 0x08:  /* PLL used as system clock */
		/* Get PLL clock source and multiplication factor ----------------------*/
		pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000a2e:	6854      	ldr	r4, [r2, #4]
		pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
		pllmull = ( pllmull >> 18) + 2;

		if (pllsource == 0x00)
 8000a30:	21c0      	movs	r1, #192	; 0xc0
	case 0x04:  /* HSE used as system clock */
		SystemCoreClock = HSE_VALUE;
		break;
	case 0x08:  /* PLL used as system clock */
		/* Get PLL clock source and multiplication factor ----------------------*/
		pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000a32:	02a3      	lsls	r3, r4, #10
		pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000a34:	6850      	ldr	r0, [r2, #4]
		pllmull = ( pllmull >> 18) + 2;
 8000a36:	0f1c      	lsrs	r4, r3, #28

		if (pllsource == 0x00)
 8000a38:	024b      	lsls	r3, r1, #9
		break;
	case 0x08:  /* PLL used as system clock */
		/* Get PLL clock source and multiplication factor ----------------------*/
		pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
		pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
		pllmull = ( pllmull >> 18) + 2;
 8000a3a:	3402      	adds	r4, #2

		if (pllsource == 0x00)
 8000a3c:	4218      	tst	r0, r3
 8000a3e:	d102      	bne.n	8000a46 <SystemCoreClockUpdate+0x42>
		{
			/* HSI oscillator clock divided by 2 selected as PLL clock entry */
			SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <SystemCoreClockUpdate+0x64>)
 8000a42:	4360      	muls	r0, r4
 8000a44:	e7e8      	b.n	8000a18 <SystemCoreClockUpdate+0x14>
		}
		else
		{
			prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000a46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a48:	210f      	movs	r1, #15
 8000a4a:	4011      	ands	r1, r2
 8000a4c:	3101      	adds	r1, #1
			/* HSE oscillator clock selected as PREDIV1 clock entry */
			SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <SystemCoreClockUpdate+0x60>)
 8000a50:	f001 ff9a 	bl	8002988 <__aeabi_uidiv>
 8000a54:	4360      	muls	r0, r4
 8000a56:	e7df      	b.n	8000a18 <SystemCoreClockUpdate+0x14>
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	007a1200 	.word	0x007a1200
 8000a60:	20000004 	.word	0x20000004
 8000a64:	00b71b00 	.word	0x00b71b00
 8000a68:	003d0900 	.word	0x003d0900

08000a6c <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8000a6c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <ADC_DeInit+0x20>)
 8000a70:	4298      	cmp	r0, r3
 8000a72:	d000      	beq.n	8000a76 <ADC_DeInit+0xa>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
  }
}
 8000a74:	bd08      	pop	{r3, pc}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000a76:	2080      	movs	r0, #128	; 0x80
 8000a78:	0080      	lsls	r0, r0, #2
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	f001 f90e 	bl	8001c9c <RCC_APB2PeriphResetCmd>

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0088      	lsls	r0, r1, #2
 8000a84:	2100      	movs	r1, #0
 8000a86:	f001 f909 	bl	8001c9c <RCC_APB2PeriphResetCmd>
 8000a8a:	e7f3      	b.n	8000a74 <ADC_DeInit+0x8>
 8000a8c:	40012400 	.word	0x40012400

08000a90 <ADC_Init>:
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000a90:	680b      	ldr	r3, [r1, #0]
 8000a92:	688a      	ldr	r2, [r1, #8]
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000a94:	b510      	push	{r4, lr}
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000a96:	431a      	orrs	r2, r3
 8000a98:	68cb      	ldr	r3, [r1, #12]
  assert_param(IS_ADC_EXTERNAL_TRIG_CONV(ADC_InitStruct->ADC_ExternalTrigConv));
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_SCAN_DIRECTION(ADC_InitStruct->ADC_ScanDirection)); 

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;
 8000a9a:	68c4      	ldr	r4, [r0, #12]
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000a9c:	431a      	orrs	r2, r3
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8000a9e:	690b      	ldr	r3, [r1, #16]
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	694b      	ldr	r3, [r1, #20]
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000aa4:	7909      	ldrb	r1, [r1, #4]
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 8000aa6:	431a      	orrs	r2, r3

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;

  /* Clear SCANDIR, RES[1:0], ALIGN, EXTSEL[2:0], EXTEN[1:0] and CONT bits */
  tmpreg &= CFGR1_CLEAR_MASK;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <ADC_Init+0x28>)
 8000aaa:	4023      	ands	r3, r4
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 8000aac:	4313      	orrs	r3, r2
 8000aae:	034c      	lsls	r4, r1, #13
 8000ab0:	4323      	orrs	r3, r4
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);

  /* Write to ADCx CFGR */
  ADCx->CFGR1 = tmpreg;
 8000ab2:	60c3      	str	r3, [r0, #12]
}
 8000ab4:	bd10      	pop	{r4, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	ffffd203 	.word	0xffffd203

08000abc <ADC_StructInit>:
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000abc:	2300      	movs	r3, #0
 8000abe:	6003      	str	r3, [r0, #0]

   /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000ac0:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000ac2:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_TRGO;
 8000ac4:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000ac6:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_ScanDirection member */
  ADC_InitStruct->ADC_ScanDirection = ADC_ScanDirection_Upward;
 8000ac8:	6143      	str	r3, [r0, #20]
}
 8000aca:	4770      	bx	lr

08000acc <ADC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADEN bit to Enable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
 8000acc:	6882      	ldr	r2, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d103      	bne.n	8000ada <ADC_Cmd+0xe>
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
  }
  else
  {
    /* Set the ADDIS to Disable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	6083      	str	r3, [r0, #8]
  }
}
 8000ad8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADEN bit to Enable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
 8000ada:	2101      	movs	r1, #1
 8000adc:	4311      	orrs	r1, r2
 8000ade:	6081      	str	r1, [r0, #8]
 8000ae0:	e7fa      	b.n	8000ad8 <ADC_Cmd+0xc>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <ADC_ClockModeConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLOCKMODE(ADC_ClockMode));

    /* Configure the ADC Clock mode according to ADC_ClockMode */
    ADCx->CFGR2 = (uint32_t)ADC_ClockMode;
 8000ae4:	6101      	str	r1, [r0, #16]

}
 8000ae6:	4770      	bx	lr

08000ae8 <ADC_JitterCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Disable Jitter */
    ADCx->CFGR2 |= (uint32_t)ADC_JitterOff;
 8000ae8:	6903      	ldr	r3, [r0, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_JITTEROFF(ADC_JitterOff));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d102      	bne.n	8000af4 <ADC_JitterCmd+0xc>
    ADCx->CFGR2 |= (uint32_t)ADC_JitterOff;
  }
  else
  {
    /* Enable Jitter */
    ADCx->CFGR2 &= (uint32_t)(~ADC_JitterOff);
 8000aee:	438b      	bics	r3, r1
 8000af0:	6103      	str	r3, [r0, #16]
  }
}
 8000af2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Disable Jitter */
    ADCx->CFGR2 |= (uint32_t)ADC_JitterOff;
 8000af4:	4319      	orrs	r1, r3
 8000af6:	6101      	str	r1, [r0, #16]
 8000af8:	e7fb      	b.n	8000af2 <ADC_JitterCmd+0xa>
 8000afa:	46c0      	nop			; (mov r8, r8)

08000afc <ADC_AutoPowerOffCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the ADC Automatic Power-Off */
    ADCx->CFGR1 |= ADC_CFGR1_AUTOFF;
 8000afc:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000afe:	2900      	cmp	r1, #0
 8000b00:	d103      	bne.n	8000b0a <ADC_AutoPowerOffCmd+0xe>
    ADCx->CFGR1 |= ADC_CFGR1_AUTOFF;
  }
  else
  {
    /* Disable the ADC Automatic Power-Off */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AUTOFF;
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <ADC_AutoPowerOffCmd+0x18>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	60c3      	str	r3, [r0, #12]
  }
}
 8000b08:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the ADC Automatic Power-Off */
    ADCx->CFGR1 |= ADC_CFGR1_AUTOFF;
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	020b      	lsls	r3, r1, #8
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60c3      	str	r3, [r0, #12]
 8000b12:	e7f9      	b.n	8000b08 <ADC_AutoPowerOffCmd+0xc>
 8000b14:	ffff7fff 	.word	0xffff7fff

08000b18 <ADC_WaitModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the ADC Automatic Delayed conversion */
    ADCx->CFGR1 |= ADC_CFGR1_WAIT;
 8000b18:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b1a:	2900      	cmp	r1, #0
 8000b1c:	d103      	bne.n	8000b26 <ADC_WaitModeCmd+0xe>
    ADCx->CFGR1 |= ADC_CFGR1_WAIT;
  }
  else
  {
    /* Disable the ADC Automatic Delayed conversion */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_WAIT;
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <ADC_WaitModeCmd+0x18>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	60c3      	str	r3, [r0, #12]
  }
}
 8000b24:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the ADC Automatic Delayed conversion */
    ADCx->CFGR1 |= ADC_CFGR1_WAIT;
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	01cb      	lsls	r3, r1, #7
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	60c3      	str	r3, [r0, #12]
 8000b2e:	e7f9      	b.n	8000b24 <ADC_WaitModeCmd+0xc>
 8000b30:	ffffbfff 	.word	0xffffbfff

08000b34 <ADC_AnalogWatchdogCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the ADC Analog Watchdog */
    ADCx->CFGR1 |= ADC_CFGR1_AWDEN;
 8000b34:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d103      	bne.n	8000b42 <ADC_AnalogWatchdogCmd+0xe>
    ADCx->CFGR1 |= ADC_CFGR1_AWDEN;
  }
  else
  {
    /* Disable the ADC Analog Watchdog */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AWDEN;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <ADC_AnalogWatchdogCmd+0x18>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60c3      	str	r3, [r0, #12]
  }
}
 8000b40:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the ADC Analog Watchdog */
    ADCx->CFGR1 |= ADC_CFGR1_AWDEN;
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	040b      	lsls	r3, r1, #16
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60c3      	str	r3, [r0, #12]
 8000b4a:	e7f9      	b.n	8000b40 <ADC_AnalogWatchdogCmd+0xc>
 8000b4c:	ff7fffff 	.word	0xff7fffff

08000b50 <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));

  /* Set the ADCx high and low threshold */
  ADCx->TR = LowThreshold | ((uint32_t)HighThreshold << 16);
 8000b50:	0409      	lsls	r1, r1, #16
 8000b52:	4311      	orrs	r1, r2
 8000b54:	6201      	str	r1, [r0, #32]

}
 8000b56:	4770      	bx	lr

08000b58 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG_CHANNEL(ADC_AnalogWatchdog_Channel));

  /* Get the old register value */
  tmpreg = ADCx->CFGR1;
 8000b58:	68c2      	ldr	r2, [r0, #12]

  /* Clear the Analog watchdog channel select bits */
  tmpreg &= ~ADC_CFGR1_AWDCH;
 8000b5a:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <ADC_AnalogWatchdogSingleChannelConfig+0xc>)
 8000b5c:	4013      	ands	r3, r2

  /* Set the Analog watchdog channel */
  tmpreg |= ADC_AnalogWatchdog_Channel;
 8000b5e:	4319      	orrs	r1, r3

  /* Store the new register value */
  ADCx->CFGR1 = tmpreg;
 8000b60:	60c1      	str	r1, [r0, #12]
}
 8000b62:	4770      	bx	lr
 8000b64:	83ffffff 	.word	0x83ffffff

08000b68 <ADC_AnalogWatchdogSingleChannelCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the ADC Analog Watchdog Single Channel */
    ADCx->CFGR1 |= ADC_CFGR1_AWDSGL;
 8000b68:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d103      	bne.n	8000b76 <ADC_AnalogWatchdogSingleChannelCmd+0xe>
    ADCx->CFGR1 |= ADC_CFGR1_AWDSGL;
  }
  else
  {
    /* Disable the ADC Analog Watchdog Single Channel */
    ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_AWDSGL;
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <ADC_AnalogWatchdogSingleChannelCmd+0x18>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	60c3      	str	r3, [r0, #12]
  }
}
 8000b74:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the ADC Analog Watchdog Single Channel */
    ADCx->CFGR1 |= ADC_CFGR1_AWDSGL;
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	03cb      	lsls	r3, r1, #15
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60c3      	str	r3, [r0, #12]
 8000b7e:	e7f9      	b.n	8000b74 <ADC_AnalogWatchdogSingleChannelCmd+0xc>
 8000b80:	ffbfffff 	.word	0xffbfffff

08000b84 <ADC_TempSensorCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSEN;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <ADC_TempSensorCmd+0x1c>)
 8000b86:	6819      	ldr	r1, [r3, #0]
void ADC_TempSensorCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d103      	bne.n	8000b94 <ADC_TempSensorCmd+0x10>
    ADC->CCR |= (uint32_t)ADC_CCR_TSEN;
  }
  else
  {
    /* Disable the temperature sensor channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSEN);
 8000b8c:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <ADC_TempSensorCmd+0x20>)
 8000b8e:	400a      	ands	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
  }
}
 8000b92:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSEN;
 8000b94:	2080      	movs	r0, #128	; 0x80
 8000b96:	0402      	lsls	r2, r0, #16
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e7f9      	b.n	8000b92 <ADC_TempSensorCmd+0xe>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40012708 	.word	0x40012708
 8000ba4:	ff7fffff 	.word	0xff7fffff

08000ba8 <ADC_VrefintCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VREFEN;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <ADC_VrefintCmd+0x1c>)
 8000baa:	6819      	ldr	r1, [r3, #0]
void ADC_VrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d103      	bne.n	8000bb8 <ADC_VrefintCmd+0x10>
    ADC->CCR |= (uint32_t)ADC_CCR_VREFEN;
  }
  else
  {
    /* Disable the Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VREFEN);
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <ADC_VrefintCmd+0x20>)
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
  }
}
 8000bb6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VREFEN;
 8000bb8:	2080      	movs	r0, #128	; 0x80
 8000bba:	03c2      	lsls	r2, r0, #15
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e7f9      	b.n	8000bb6 <ADC_VrefintCmd+0xe>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40012708 	.word	0x40012708
 8000bc8:	ffbfffff 	.word	0xffbfffff

08000bcc <ADC_VbatCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Vbat channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATEN;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <ADC_VbatCmd+0x1c>)
 8000bce:	6819      	ldr	r1, [r3, #0]
void ADC_VbatCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d103      	bne.n	8000bdc <ADC_VbatCmd+0x10>
    ADC->CCR |= (uint32_t)ADC_CCR_VBATEN;
  }
  else
  {
    /* Disable the Vbat channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATEN);
 8000bd4:	4a05      	ldr	r2, [pc, #20]	; (8000bec <ADC_VbatCmd+0x20>)
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]
  }
}
 8000bda:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Vbat channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATEN;
 8000bdc:	2080      	movs	r0, #128	; 0x80
 8000bde:	0442      	lsls	r2, r0, #17
 8000be0:	430a      	orrs	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	e7f9      	b.n	8000bda <ADC_VbatCmd+0xe>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40012708 	.word	0x40012708
 8000bec:	feffffff 	.word	0xfeffffff

08000bf0 <ADC_ChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Configure the ADC Channel */
  ADCx->CHSELR |= (uint32_t)ADC_Channel;
 8000bf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000bf2:	4319      	orrs	r1, r3
 8000bf4:	6281      	str	r1, [r0, #40]	; 0x28

  /* Set the ADC Sampling Time register */
  tmpreg |= (uint32_t)ADC_SampleTime;

  /* Configure the ADC Sample time register */
  ADCx->SMPR = tmpreg ;
 8000bf6:	6142      	str	r2, [r0, #20]
}
 8000bf8:	4770      	bx	lr
 8000bfa:	46c0      	nop			; (mov r8, r8)

08000bfc <ADC_ContinuousModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
  {
    /* Enable the Continuous mode*/
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_CONT;
 8000bfc:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d103      	bne.n	8000c0a <ADC_ContinuousModeCmd+0xe>
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_CONT;
  }
  else
  {
    /* Disable the Continuous mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_CONT);
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <ADC_ContinuousModeCmd+0x18>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	60c3      	str	r3, [r0, #12]
  }
}
 8000c08:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
  {
    /* Enable the Continuous mode*/
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_CONT;
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	018b      	lsls	r3, r1, #6
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	60c3      	str	r3, [r0, #12]
 8000c12:	e7f9      	b.n	8000c08 <ADC_ContinuousModeCmd+0xc>
 8000c14:	ffffdfff 	.word	0xffffdfff

08000c18 <ADC_DiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
  {
    /* Enable the Discontinuous mode */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DISCEN;
 8000c18:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d103      	bne.n	8000c26 <ADC_DiscModeCmd+0xe>
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DISCEN;
  }
  else
  {
    /* Disable the Discontinuous mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DISCEN);
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <ADC_DiscModeCmd+0x18>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	60c3      	str	r3, [r0, #12]
  }
}
 8000c24:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
  {
    /* Enable the Discontinuous mode */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DISCEN;
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	024b      	lsls	r3, r1, #9
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	60c3      	str	r3, [r0, #12]
 8000c2e:	e7f9      	b.n	8000c24 <ADC_DiscModeCmd+0xc>
 8000c30:	fffeffff 	.word	0xfffeffff

08000c34 <ADC_OverrunModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
  {
    /* Enable the Overrun mode */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_OVRMOD;
 8000c34:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d103      	bne.n	8000c42 <ADC_OverrunModeCmd+0xe>
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_OVRMOD;
  }
  else
  {
    /* Disable the Overrun mode */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_OVRMOD);
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <ADC_OverrunModeCmd+0x18>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60c3      	str	r3, [r0, #12]
  }
}
 8000c40:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

    if (NewState != DISABLE)
  {
    /* Enable the Overrun mode */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_OVRMOD;
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	014b      	lsls	r3, r1, #5
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60c3      	str	r3, [r0, #12]
 8000c4a:	e7f9      	b.n	8000c40 <ADC_OverrunModeCmd+0xc>
 8000c4c:	ffffefff 	.word	0xffffefff

08000c50 <ADC_GetCalibrationFactor>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADC calibartion */
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 8000c50:	6882      	ldr	r2, [r0, #8]
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	0619      	lsls	r1, r3, #24
 8000c56:	4311      	orrs	r1, r2
 8000c58:	6081      	str	r1, [r0, #8]
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 8000c5a:	6882      	ldr	r2, [r0, #8]
    calibrationcounter++;  
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	da0f      	bge.n	8000c80 <ADC_GetCalibrationFactor+0x30>
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 8000c60:	6883      	ldr	r3, [r0, #8]
 8000c62:	0fd9      	lsrs	r1, r3, #31
 8000c64:	07c9      	lsls	r1, r1, #31
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <ADC_GetCalibrationFactor+0x40>)
 8000c68:	e008      	b.n	8000c7c <ADC_GetCalibrationFactor+0x2c>
 8000c6a:	6882      	ldr	r2, [r0, #8]
    calibrationcounter++;  
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	da07      	bge.n	8000c80 <ADC_GetCalibrationFactor+0x30>
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 8000c70:	6881      	ldr	r1, [r0, #8]
 8000c72:	3b02      	subs	r3, #2
 8000c74:	0fca      	lsrs	r2, r1, #31
 8000c76:	07d1      	lsls	r1, r2, #31
    calibrationcounter++;  
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <ADC_GetCalibrationFactor+0x30>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d1f4      	bne.n	8000c6a <ADC_GetCalibrationFactor+0x1a>
    
  if((uint32_t)(ADCx->CR & ADC_CR_ADCAL) == RESET)
 8000c80:	6883      	ldr	r3, [r0, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db01      	blt.n	8000c8a <ADC_GetCalibrationFactor+0x3a>
  {
    /*Get the calibration factor from the ADC data register */
    tmpreg = ADCx->DR;
 8000c86:	6c00      	ldr	r0, [r0, #64]	; 0x40
  {
    /* Error factor */
    tmpreg = 0x00000000;
  }
  return tmpreg;
}
 8000c88:	4770      	bx	lr
    tmpreg = ADCx->DR;
  }
  else
  {
    /* Error factor */
    tmpreg = 0x00000000;
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	e7fc      	b.n	8000c88 <ADC_GetCalibrationFactor+0x38>
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	0000effe 	.word	0x0000effe

08000c94 <ADC_StopOfConversion>:
void ADC_StopOfConversion(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTP;
 8000c94:	6882      	ldr	r2, [r0, #8]
 8000c96:	2310      	movs	r3, #16
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	6083      	str	r3, [r0, #8]
}
 8000c9c:	4770      	bx	lr
 8000c9e:	46c0      	nop			; (mov r8, r8)

08000ca0 <ADC_StartOfConversion>:
void ADC_StartOfConversion(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTART;
 8000ca0:	6882      	ldr	r2, [r0, #8]
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	6083      	str	r3, [r0, #8]
}
 8000ca8:	4770      	bx	lr
 8000caa:	46c0      	nop			; (mov r8, r8)

08000cac <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000cac:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8000cae:	b280      	uxth	r0, r0
}
 8000cb0:	4770      	bx	lr
 8000cb2:	46c0      	nop			; (mov r8, r8)

08000cb4 <ADC_DMACmd>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	d104      	bne.n	8000cc2 <ADC_DMACmd+0xe>
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
 8000cb8:	68c3      	ldr	r3, [r0, #12]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4393      	bics	r3, r2
 8000cbe:	60c3      	str	r3, [r0, #12]
  }
}
 8000cc0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
 8000cc2:	68c1      	ldr	r1, [r0, #12]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	60c3      	str	r3, [r0, #12]
 8000cca:	e7f9      	b.n	8000cc0 <ADC_DMACmd+0xc>

08000ccc <ADC_DMARequestModeConfig>:
void ADC_DMARequestModeConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMARequestMode)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_DMACFG;
 8000ccc:	68c3      	ldr	r3, [r0, #12]
 8000cce:	2202      	movs	r2, #2
 8000cd0:	4393      	bics	r3, r2
 8000cd2:	60c3      	str	r3, [r0, #12]
  ADCx->CFGR1 |= (uint32_t)ADC_DMARequestMode;
 8000cd4:	68c3      	ldr	r3, [r0, #12]
 8000cd6:	4319      	orrs	r1, r3
 8000cd8:	60c1      	str	r1, [r0, #12]
}
 8000cda:	4770      	bx	lr

08000cdc <ADC_ITConfig>:
  assert_param(IS_ADC_CONFIG_IT(ADC_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 8000cdc:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_CONFIG_IT(ADC_IT)); 

  if (NewState != DISABLE)
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d102      	bne.n	8000ce8 <ADC_ITConfig+0xc>
    ADCx->IER |= ADC_IT;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->IER &= (~(uint32_t)ADC_IT);
 8000ce2:	438b      	bics	r3, r1
 8000ce4:	6043      	str	r3, [r0, #4]
  }
}
 8000ce6:	4770      	bx	lr
  assert_param(IS_ADC_CONFIG_IT(ADC_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->IER |= ADC_IT;
 8000ce8:	4319      	orrs	r1, r3
 8000cea:	6041      	str	r1, [r0, #4]
 8000cec:	e7fb      	b.n	8000ce6 <ADC_ITConfig+0xa>
 8000cee:	46c0      	nop			; (mov r8, r8)

08000cf0 <ADC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  if((uint32_t)(ADC_FLAG & 0x01000000))
 8000cf0:	01cb      	lsls	r3, r1, #7
 8000cf2:	d507      	bpl.n	8000d04 <ADC_GetFlagStatus+0x14>
  {
    tmpreg = ADCx->CR & 0xFEFFFFFF;
 8000cf4:	6880      	ldr	r0, [r0, #8]
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <ADC_GetFlagStatus+0x18>)
 8000cf8:	4018      	ands	r0, r3
  {
    tmpreg = ADCx->ISR;
  }
  
  /* Check the status of the specified ADC flag */
  if ((tmpreg & ADC_FLAG) != (uint32_t)RESET)
 8000cfa:	4001      	ands	r1, r0
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000cfc:	1c08      	adds	r0, r1, #0
 8000cfe:	1e41      	subs	r1, r0, #1
 8000d00:	4188      	sbcs	r0, r1
}
 8000d02:	4770      	bx	lr
  {
    tmpreg = ADCx->CR & 0xFEFFFFFF;
  }
  else
  {
    tmpreg = ADCx->ISR;
 8000d04:	6800      	ldr	r0, [r0, #0]
 8000d06:	e7f8      	b.n	8000cfa <ADC_GetFlagStatus+0xa>
 8000d08:	feffffff 	.word	0xfeffffff

08000d0c <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->ISR = (uint32_t)ADC_FLAG;
 8000d0c:	6001      	str	r1, [r0, #0]
}
 8000d0e:	4770      	bx	lr

08000d10 <ADC_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));

  /* Get the ADC_IT enable bit status */
  enablestatus = (uint32_t)(ADCx->IER & ADC_IT); 
 8000d10:	6842      	ldr	r2, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((uint32_t)(ADCx->ISR & ADC_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000d12:	6803      	ldr	r3, [r0, #0]
    bitstatus = SET;
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8000d14:	2000      	movs	r0, #0

  /* Get the ADC_IT enable bit status */
  enablestatus = (uint32_t)(ADCx->IER & ADC_IT); 

  /* Check the status of the specified ADC interrupt */
  if (((uint32_t)(ADCx->ISR & ADC_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000d16:	420b      	tst	r3, r1
 8000d18:	d003      	beq.n	8000d22 <ADC_GetITStatus+0x12>
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));

  /* Get the ADC_IT enable bit status */
  enablestatus = (uint32_t)(ADCx->IER & ADC_IT); 
 8000d1a:	1c10      	adds	r0, r2, #0
 8000d1c:	4008      	ands	r0, r1

  /* Check the status of the specified ADC interrupt */
  if (((uint32_t)(ADCx->ISR & ADC_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000d1e:	1e42      	subs	r2, r0, #1
 8000d20:	4190      	sbcs	r0, r2
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 8000d22:	4770      	bx	lr

08000d24 <ADC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_IT(ADC_IT));

  /* Clear the selected ADC interrupt pending bits */
  ADCx->ISR = (uint32_t)ADC_IT; 
 8000d24:	6001      	str	r1, [r0, #0]
}
 8000d26:	4770      	bx	lr

08000d28 <CRC_DeInit>:
  * @retval None
  */
void CRC_DeInit(void)
{
  /* Set DR register to reset value */
  CRC->DR = 0xFFFFFFFF;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <CRC_DeInit+0x18>)
 8000d2a:	2201      	movs	r2, #1
  
  /* Set the POL register to the reset value: 0x04C11DB7 */
  CRC->POL = 0x04C11DB7;
 8000d2c:	4905      	ldr	r1, [pc, #20]	; (8000d44 <CRC_DeInit+0x1c>)
  * @retval None
  */
void CRC_DeInit(void)
{
  /* Set DR register to reset value */
  CRC->DR = 0xFFFFFFFF;
 8000d2e:	4250      	negs	r0, r2
  
  /* Set the POL register to the reset value: 0x04C11DB7 */
  CRC->POL = 0x04C11DB7;
  
  /* Reset IDR register */
  CRC->IDR = 0x00;
 8000d30:	2200      	movs	r2, #0
  * @retval None
  */
void CRC_DeInit(void)
{
  /* Set DR register to reset value */
  CRC->DR = 0xFFFFFFFF;
 8000d32:	6018      	str	r0, [r3, #0]
  
  /* Set the POL register to the reset value: 0x04C11DB7 */
  CRC->POL = 0x04C11DB7;
 8000d34:	6159      	str	r1, [r3, #20]
  
  /* Reset IDR register */
  CRC->IDR = 0x00;
 8000d36:	711a      	strb	r2, [r3, #4]
  
  /* Set INIT register to reset value */
  CRC->INIT = 0xFFFFFFFF;
 8000d38:	6118      	str	r0, [r3, #16]
  
  /* Reset the CRC calculation unit */
  CRC->CR = CRC_CR_RESET;
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	6098      	str	r0, [r3, #8]
}
 8000d3e:	4770      	bx	lr
 8000d40:	40023000 	.word	0x40023000
 8000d44:	04c11db7 	.word	0x04c11db7

08000d48 <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR |= CRC_CR_RESET;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <CRC_ResetDR+0xc>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	6899      	ldr	r1, [r3, #8]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	609a      	str	r2, [r3, #8]
}
 8000d52:	4770      	bx	lr
 8000d54:	40023000 	.word	0x40023000

08000d58 <CRC_PolynomialSizeSelect>:

  /* Check the parameter */
  assert_param(IS_CRC_POL_SIZE(CRC_PolSize));

  /* Get CR register value */
  tmpcr = CRC->CR;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <CRC_PolynomialSizeSelect+0x10>)

  /* Reset POL_SIZE bits */
  tmpcr &= (uint32_t)~((uint32_t)CRC_CR_POLSIZE);
 8000d5a:	2118      	movs	r1, #24

  /* Check the parameter */
  assert_param(IS_CRC_POL_SIZE(CRC_PolSize));

  /* Get CR register value */
  tmpcr = CRC->CR;
 8000d5c:	689a      	ldr	r2, [r3, #8]

  /* Reset POL_SIZE bits */
  tmpcr &= (uint32_t)~((uint32_t)CRC_CR_POLSIZE);
 8000d5e:	438a      	bics	r2, r1
  /* Set the polynomial size */
  tmpcr |= (uint32_t)CRC_PolSize;
 8000d60:	4310      	orrs	r0, r2

  /* Write to CR register */
  CRC->CR = (uint32_t)tmpcr;
 8000d62:	6098      	str	r0, [r3, #8]
}
 8000d64:	4770      	bx	lr
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40023000 	.word	0x40023000

08000d6c <CRC_ReverseInputDataSelect>:

  /* Check the parameter */
  assert_param(IS_CRC_REVERSE_INPUT_DATA(CRC_ReverseInputData));

  /* Get CR register value */
  tmpcr = CRC->CR;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <CRC_ReverseInputDataSelect+0x10>)

  /* Reset REV_IN bits */
  tmpcr &= (uint32_t)~((uint32_t)CRC_CR_REV_IN);
 8000d6e:	2160      	movs	r1, #96	; 0x60

  /* Check the parameter */
  assert_param(IS_CRC_REVERSE_INPUT_DATA(CRC_ReverseInputData));

  /* Get CR register value */
  tmpcr = CRC->CR;
 8000d70:	689a      	ldr	r2, [r3, #8]

  /* Reset REV_IN bits */
  tmpcr &= (uint32_t)~((uint32_t)CRC_CR_REV_IN);
 8000d72:	438a      	bics	r2, r1
  /* Set the reverse operation */
  tmpcr |= (uint32_t)CRC_ReverseInputData;
 8000d74:	4310      	orrs	r0, r2

  /* Write to CR register */
  CRC->CR = (uint32_t)tmpcr;
 8000d76:	6098      	str	r0, [r3, #8]
}
 8000d78:	4770      	bx	lr
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40023000 	.word	0x40023000

08000d80 <CRC_ReverseOutputDataCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable reverse operation on output data */
    CRC->CR |= CRC_CR_REV_OUT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <CRC_ReverseOutputDataCmd+0x1c>)
void CRC_ReverseOutputDataCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d104      	bne.n	8000d90 <CRC_ReverseOutputDataCmd+0x10>
    CRC->CR |= CRC_CR_REV_OUT;
  }
  else
  {
    /* Disable reverse operation on output data */
    CRC->CR &= (uint32_t)~((uint32_t)CRC_CR_REV_OUT);
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	438a      	bics	r2, r1
 8000d8c:	609a      	str	r2, [r3, #8]
  }
}
 8000d8e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable reverse operation on output data */
    CRC->CR |= CRC_CR_REV_OUT;
 8000d90:	6898      	ldr	r0, [r3, #8]
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	4302      	orrs	r2, r0
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	e7f9      	b.n	8000d8e <CRC_ReverseOutputDataCmd+0xe>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40023000 	.word	0x40023000

08000da0 <CRC_SetInitRegister>:
  * @param  CRC_InitValue: Programmable initial CRC value
  * @retval None
  */
void CRC_SetInitRegister(uint32_t CRC_InitValue)
{
  CRC->INIT = CRC_InitValue;
 8000da0:	4b01      	ldr	r3, [pc, #4]	; (8000da8 <CRC_SetInitRegister+0x8>)
 8000da2:	6118      	str	r0, [r3, #16]
}
 8000da4:	4770      	bx	lr
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40023000 	.word	0x40023000

08000dac <CRC_SetPolynomial>:
  * @param  CRC_Pol: Polynomial to be used for CRC calculation.
  * @retval None
  */
void CRC_SetPolynomial(uint32_t CRC_Pol)
{
  CRC->POL = CRC_Pol;
 8000dac:	4b01      	ldr	r3, [pc, #4]	; (8000db4 <CRC_SetPolynomial+0x8>)
 8000dae:	6158      	str	r0, [r3, #20]
}
 8000db0:	4770      	bx	lr
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40023000 	.word	0x40023000

08000db8 <CRC_CalcCRC>:
  * @param  CRC_Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t CRC_Data)
{
  CRC->DR = CRC_Data;
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <CRC_CalcCRC+0x8>)
 8000dba:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 8000dbc:	6818      	ldr	r0, [r3, #0]
}
 8000dbe:	4770      	bx	lr
 8000dc0:	40023000 	.word	0x40023000

08000dc4 <CRC_CalcCRC16bits>:
  * @param  CRC_Data: data half-word(16-bit) to compute its CRC
  * @retval 16-bit CRC
  */
uint32_t CRC_CalcCRC16bits(uint16_t CRC_Data)
{
  *(uint16_t*)(CRC_BASE) = (uint16_t) CRC_Data;
 8000dc4:	4b01      	ldr	r3, [pc, #4]	; (8000dcc <CRC_CalcCRC16bits+0x8>)
 8000dc6:	8018      	strh	r0, [r3, #0]
  
  return (CRC->DR);
 8000dc8:	6818      	ldr	r0, [r3, #0]
}
 8000dca:	4770      	bx	lr
 8000dcc:	40023000 	.word	0x40023000

08000dd0 <CRC_CalcCRC8bits>:
  * @param  CRC_Data: 8-bit data to compute its CRC
  * @retval 8-bit CRC
  */
uint32_t CRC_CalcCRC8bits(uint8_t CRC_Data)
{
  *(uint8_t*)(CRC_BASE) = (uint8_t) CRC_Data;
 8000dd0:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <CRC_CalcCRC8bits+0x8>)
 8000dd2:	7018      	strb	r0, [r3, #0]

  return (CRC->DR);
 8000dd4:	6818      	ldr	r0, [r3, #0]
}
 8000dd6:	4770      	bx	lr
 8000dd8:	40023000 	.word	0x40023000

08000ddc <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8000ddc:	b510      	push	{r4, lr}
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d017      	beq.n	8000e12 <CRC_CalcBlockCRC+0x36>
  * @brief  Computes the 32-bit CRC of a given buffer of data word(32-bit).
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
 8000de2:	0089      	lsls	r1, r1, #2
 8000de4:	1844      	adds	r4, r0, r1
 8000de6:	3904      	subs	r1, #4
 8000de8:	074b      	lsls	r3, r1, #29
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
  {
    CRC->DR = pBuffer[index];
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <CRC_CalcBlockCRC+0x3c>)
 8000dec:	0fd9      	lsrs	r1, r3, #31
 8000dee:	c808      	ldmia	r0!, {r3}
 8000df0:	6013      	str	r3, [r2, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000df2:	42a0      	cmp	r0, r4
 8000df4:	d00d      	beq.n	8000e12 <CRC_CalcBlockCRC+0x36>
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d003      	beq.n	8000e02 <CRC_CalcBlockCRC+0x26>
  {
    CRC->DR = pBuffer[index];
 8000dfa:	c802      	ldmia	r0!, {r1}
 8000dfc:	6011      	str	r1, [r2, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000dfe:	42a0      	cmp	r0, r4
 8000e00:	d007      	beq.n	8000e12 <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 8000e02:	1c03      	adds	r3, r0, #0
 8000e04:	cb02      	ldmia	r3!, {r1}
 8000e06:	6011      	str	r1, [r2, #0]
 8000e08:	6841      	ldr	r1, [r0, #4]
 8000e0a:	1d18      	adds	r0, r3, #4
 8000e0c:	6011      	str	r1, [r2, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000e0e:	42a0      	cmp	r0, r4
 8000e10:	d1f7      	bne.n	8000e02 <CRC_CalcBlockCRC+0x26>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8000e12:	4801      	ldr	r0, [pc, #4]	; (8000e18 <CRC_CalcBlockCRC+0x3c>)
 8000e14:	6800      	ldr	r0, [r0, #0]
}
 8000e16:	bd10      	pop	{r4, pc}
 8000e18:	40023000 	.word	0x40023000

08000e1c <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 8000e1c:	4b01      	ldr	r3, [pc, #4]	; (8000e24 <CRC_GetCRC+0x8>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
}
 8000e20:	4770      	bx	lr
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40023000 	.word	0x40023000

08000e28 <CRC_SetIDRegister>:
  * @param  CRC_IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t CRC_IDValue)
{
  CRC->IDR = CRC_IDValue;
 8000e28:	4b01      	ldr	r3, [pc, #4]	; (8000e30 <CRC_SetIDRegister+0x8>)
 8000e2a:	7118      	strb	r0, [r3, #4]
}
 8000e2c:	4770      	bx	lr
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40023000 	.word	0x40023000

08000e34 <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 8000e34:	4b01      	ldr	r3, [pc, #4]	; (8000e3c <CRC_GetIDRegister+0x8>)
 8000e36:	7918      	ldrb	r0, [r3, #4]
}
 8000e38:	4770      	bx	lr
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40023000 	.word	0x40023000

08000e40 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000e40:	6802      	ldr	r2, [r0, #0]
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <DMA_DeInit+0x9c>)

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000e44:	2100      	movs	r1, #0
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000e46:	4013      	ands	r3, r2
  DMAy_Channelx->CPAR  = 0;

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;

  if (DMAy_Channelx == DMA1_Channel1)
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <DMA_DeInit+0xa0>)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000e4a:	6003      	str	r3, [r0, #0]

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000e4c:	6001      	str	r1, [r0, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000e4e:	6041      	str	r1, [r0, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000e50:	6081      	str	r1, [r0, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000e52:	60c1      	str	r1, [r0, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8000e54:	4290      	cmp	r0, r2
 8000e56:	d019      	beq.n	8000e8c <DMA_DeInit+0x4c>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <DMA_DeInit+0xa4>)
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d01c      	beq.n	8000e98 <DMA_DeInit+0x58>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000e5e:	4922      	ldr	r1, [pc, #136]	; (8000ee8 <DMA_DeInit+0xa8>)
 8000e60:	4288      	cmp	r0, r1
 8000e62:	d01f      	beq.n	8000ea4 <DMA_DeInit+0x64>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000e64:	4a21      	ldr	r2, [pc, #132]	; (8000eec <DMA_DeInit+0xac>)
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d023      	beq.n	8000eb2 <DMA_DeInit+0x72>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <DMA_DeInit+0xb0>)
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	d027      	beq.n	8000ec0 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000e70:	4920      	ldr	r1, [pc, #128]	; (8000ef4 <DMA_DeInit+0xb4>)
 8000e72:	4288      	cmp	r0, r1
 8000e74:	d02b      	beq.n	8000ece <DMA_DeInit+0x8e>
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  }
  else
  {
    if (DMAy_Channelx == DMA1_Channel7) 
 8000e76:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <DMA_DeInit+0xb8>)
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d000      	beq.n	8000e7e <DMA_DeInit+0x3e>
    {
      /* Reset interrupt pending bits for DMA1 Channel7 */
      DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
    }
  }
}
 8000e7c:	4770      	bx	lr
  else
  {
    if (DMAy_Channelx == DMA1_Channel7) 
    {
      /* Reset interrupt pending bits for DMA1 Channel7 */
      DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 8000e7e:	481f      	ldr	r0, [pc, #124]	; (8000efc <DMA_DeInit+0xbc>)
 8000e80:	21f0      	movs	r1, #240	; 0xf0
 8000e82:	6843      	ldr	r3, [r0, #4]
 8000e84:	050a      	lsls	r2, r1, #20
 8000e86:	431a      	orrs	r2, r3
 8000e88:	6042      	str	r2, [r0, #4]
 8000e8a:	e7f7      	b.n	8000e7c <DMA_DeInit+0x3c>
  DMAy_Channelx->CMAR = 0;

  if (DMAy_Channelx == DMA1_Channel1)
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <DMA_DeInit+0xbc>)
 8000e8e:	220f      	movs	r2, #15
 8000e90:	6843      	ldr	r3, [r0, #4]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	6042      	str	r2, [r0, #4]
 8000e96:	e7f1      	b.n	8000e7c <DMA_DeInit+0x3c>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8000e98:	4818      	ldr	r0, [pc, #96]	; (8000efc <DMA_DeInit+0xbc>)
 8000e9a:	21f0      	movs	r1, #240	; 0xf0
 8000e9c:	6843      	ldr	r3, [r0, #4]
 8000e9e:	4319      	orrs	r1, r3
 8000ea0:	6041      	str	r1, [r0, #4]
 8000ea2:	e7eb      	b.n	8000e7c <DMA_DeInit+0x3c>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 8000ea4:	4815      	ldr	r0, [pc, #84]	; (8000efc <DMA_DeInit+0xbc>)
 8000ea6:	21f0      	movs	r1, #240	; 0xf0
 8000ea8:	6843      	ldr	r3, [r0, #4]
 8000eaa:	010a      	lsls	r2, r1, #4
 8000eac:	431a      	orrs	r2, r3
 8000eae:	6042      	str	r2, [r0, #4]
 8000eb0:	e7e4      	b.n	8000e7c <DMA_DeInit+0x3c>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <DMA_DeInit+0xbc>)
 8000eb4:	21f0      	movs	r1, #240	; 0xf0
 8000eb6:	6843      	ldr	r3, [r0, #4]
 8000eb8:	020a      	lsls	r2, r1, #8
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	6042      	str	r2, [r0, #4]
 8000ebe:	e7dd      	b.n	8000e7c <DMA_DeInit+0x3c>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8000ec0:	480e      	ldr	r0, [pc, #56]	; (8000efc <DMA_DeInit+0xbc>)
 8000ec2:	21f0      	movs	r1, #240	; 0xf0
 8000ec4:	6843      	ldr	r3, [r0, #4]
 8000ec6:	030a      	lsls	r2, r1, #12
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	6042      	str	r2, [r0, #4]
 8000ecc:	e7d6      	b.n	8000e7c <DMA_DeInit+0x3c>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 8000ece:	480b      	ldr	r0, [pc, #44]	; (8000efc <DMA_DeInit+0xbc>)
 8000ed0:	21f0      	movs	r1, #240	; 0xf0
 8000ed2:	6843      	ldr	r3, [r0, #4]
 8000ed4:	040a      	lsls	r2, r1, #16
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	6042      	str	r2, [r0, #4]
 8000eda:	e7cf      	b.n	8000e7c <DMA_DeInit+0x3c>
 8000edc:	0000fffe 	.word	0x0000fffe
 8000ee0:	40020008 	.word	0x40020008
 8000ee4:	4002001c 	.word	0x4002001c
 8000ee8:	40020030 	.word	0x40020030
 8000eec:	40020044 	.word	0x40020044
 8000ef0:	40020058 	.word	0x40020058
 8000ef4:	4002006c 	.word	0x4002006c
 8000ef8:	40020080 	.word	0x40020080
 8000efc:	40020000 	.word	0x40020000

08000f00 <DMA_Init>:
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000f00:	6802      	ldr	r2, [r0, #0]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <DMA_Init+0x38>)
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000f04:	b510      	push	{r4, lr}
/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000f06:	401a      	ands	r2, r3
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000f08:	688c      	ldr	r4, [r1, #8]
 8000f0a:	6a0b      	ldr	r3, [r1, #32]
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	690c      	ldr	r4, [r1, #16]
 8000f10:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000f12:	694c      	ldr	r4, [r1, #20]
 8000f14:	4323      	orrs	r3, r4
 8000f16:	698c      	ldr	r4, [r1, #24]
 8000f18:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000f1a:	69cc      	ldr	r4, [r1, #28]
 8000f1c:	4323      	orrs	r3, r4
 8000f1e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000f20:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000f22:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8000f24:	4323      	orrs	r3, r4
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000f26:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000f28:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000f2a:	68ca      	ldr	r2, [r1, #12]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000f2c:	680b      	ldr	r3, [r1, #0]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000f2e:	6849      	ldr	r1, [r1, #4]
  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000f30:	6042      	str	r2, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000f32:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000f34:	60c1      	str	r1, [r0, #12]
}
 8000f36:	bd10      	pop	{r4, pc}
 8000f38:	ffff800f 	.word	0xffff800f

08000f3c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	6003      	str	r3, [r0, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8000f40:	6043      	str	r3, [r0, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8000f42:	6083      	str	r3, [r0, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000f44:	60c3      	str	r3, [r0, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000f46:	6103      	str	r3, [r0, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000f48:	6143      	str	r3, [r0, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000f4a:	6183      	str	r3, [r0, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000f4c:	61c3      	str	r3, [r0, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8000f4e:	6203      	str	r3, [r0, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8000f50:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8000f52:	6283      	str	r3, [r0, #40]	; 0x28
}
 8000f54:	4770      	bx	lr
 8000f56:	46c0      	nop			; (mov r8, r8)

08000f58 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8000f58:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f5a:	2900      	cmp	r1, #0
 8000f5c:	d103      	bne.n	8000f66 <DMA_Cmd+0xe>
    DMAy_Channelx->CCR |= DMA_CCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <DMA_Cmd+0x18>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	6003      	str	r3, [r0, #0]
  }
}
 8000f64:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8000f66:	2101      	movs	r1, #1
 8000f68:	4311      	orrs	r1, r2
 8000f6a:	6001      	str	r1, [r0, #0]
 8000f6c:	e7fa      	b.n	8000f64 <DMA_Cmd+0xc>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	0000fffe 	.word	0x0000fffe

08000f74 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;
 8000f74:	6041      	str	r1, [r0, #4]
}
 8000f76:	4770      	bx	lr

08000f78 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8000f78:	6840      	ldr	r0, [r0, #4]
 8000f7a:	b280      	uxth	r0, r0
}
 8000f7c:	4770      	bx	lr
 8000f7e:	46c0      	nop			; (mov r8, r8)

08000f80 <DMA_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000f80:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d102      	bne.n	8000f8c <DMA_ITConfig+0xc>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000f86:	438b      	bics	r3, r1
 8000f88:	6003      	str	r3, [r0, #0]
  }
}
 8000f8a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000f8c:	4319      	orrs	r1, r3
 8000f8e:	6001      	str	r1, [r0, #0]
 8000f90:	e7fb      	b.n	8000f8a <DMA_ITConfig+0xa>
 8000f92:	46c0      	nop			; (mov r8, r8)

08000f94 <DMA_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Check the status of the specified DMA flag */
  if ((DMA1->ISR & DMA_FLAG) != (uint32_t)RESET)
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <DMA_GetFlagStatus+0xc>)
 8000f96:	6819      	ldr	r1, [r3, #0]
 8000f98:	4008      	ands	r0, r1
    /* DMA_FLAG is reset */
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000f9a:	1e43      	subs	r3, r0, #1
 8000f9c:	4198      	sbcs	r0, r3
}
 8000f9e:	4770      	bx	lr
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <DMA_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Clear the selected DMA flags */
  DMA1->IFCR = DMA_FLAG;
 8000fa4:	4b01      	ldr	r3, [pc, #4]	; (8000fac <DMA_ClearFlag+0x8>)
 8000fa6:	6058      	str	r0, [r3, #4]
}
 8000fa8:	4770      	bx	lr
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	40020000 	.word	0x40020000

08000fb0 <DMA_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Check the status of the specified DMA interrupt */
  if ((DMA1->ISR & DMA_IT) != (uint32_t)RESET)
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <DMA_GetITStatus+0xc>)
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	4008      	ands	r0, r1
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8000fb6:	1e43      	subs	r3, r0, #1
 8000fb8:	4198      	sbcs	r0, r3
}
 8000fba:	4770      	bx	lr
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <DMA_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Clear the selected DMA interrupt pending bits */
  DMA1->IFCR = DMA_IT;
 8000fc0:	4b01      	ldr	r3, [pc, #4]	; (8000fc8 <DMA_ClearITPendingBit+0x8>)
 8000fc2:	6058      	str	r0, [r3, #4]
}
 8000fc4:	4770      	bx	lr
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40020000 	.word	0x40020000

08000fcc <GPIO_DeInit>:
  * @note   GPIOE is available only for STM32F072.
  * @note   GPIOD is not available for STM32F031.    
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000fcc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 8000fce:	2390      	movs	r3, #144	; 0x90
 8000fd0:	05d9      	lsls	r1, r3, #23
 8000fd2:	4288      	cmp	r0, r1
 8000fd4:	d01a      	beq.n	800100c <GPIO_DeInit+0x40>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 8000fd6:	4a29      	ldr	r2, [pc, #164]	; (800107c <GPIO_DeInit+0xb0>)
 8000fd8:	4290      	cmp	r0, r2
 8000fda:	d022      	beq.n	8001022 <GPIO_DeInit+0x56>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <GPIO_DeInit+0xb4>)
 8000fde:	4298      	cmp	r0, r3
 8000fe0:	d02a      	beq.n	8001038 <GPIO_DeInit+0x6c>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 8000fe2:	4928      	ldr	r1, [pc, #160]	; (8001084 <GPIO_DeInit+0xb8>)
 8000fe4:	4288      	cmp	r0, r1
 8000fe6:	d032      	beq.n	800104e <GPIO_DeInit+0x82>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <GPIO_DeInit+0xbc>)
 8000fea:	4290      	cmp	r0, r2
 8000fec:	d03a      	beq.n	8001064 <GPIO_DeInit+0x98>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 8000fee:	4b27      	ldr	r3, [pc, #156]	; (800108c <GPIO_DeInit+0xc0>)
 8000ff0:	4298      	cmp	r0, r3
 8000ff2:	d000      	beq.n	8000ff6 <GPIO_DeInit+0x2a>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8000ff4:	bd08      	pop	{r3, pc}
  }
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8000ff6:	2080      	movs	r0, #128	; 0x80
 8000ff8:	03c0      	lsls	r0, r0, #15
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	f000 fe42 	bl	8001c84 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	03c8      	lsls	r0, r1, #15
 8001004:	2100      	movs	r1, #0
 8001006:	f000 fe3d 	bl	8001c84 <RCC_AHBPeriphResetCmd>
 800100a:	e7f3      	b.n	8000ff4 <GPIO_DeInit+0x28>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0290      	lsls	r0, r2, #10
 8001010:	2101      	movs	r1, #1
 8001012:	f000 fe37 	bl	8001c84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	0298      	lsls	r0, r3, #10
 800101a:	2100      	movs	r1, #0
 800101c:	f000 fe32 	bl	8001c84 <RCC_AHBPeriphResetCmd>
 8001020:	e7e8      	b.n	8000ff4 <GPIO_DeInit+0x28>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001022:	2080      	movs	r0, #128	; 0x80
 8001024:	02c0      	lsls	r0, r0, #11
 8001026:	2101      	movs	r1, #1
 8001028:	f000 fe2c 	bl	8001c84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	02c8      	lsls	r0, r1, #11
 8001030:	2100      	movs	r1, #0
 8001032:	f000 fe27 	bl	8001c84 <RCC_AHBPeriphResetCmd>
 8001036:	e7dd      	b.n	8000ff4 <GPIO_DeInit+0x28>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	0310      	lsls	r0, r2, #12
 800103c:	2101      	movs	r1, #1
 800103e:	f000 fe21 	bl	8001c84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	0318      	lsls	r0, r3, #12
 8001046:	2100      	movs	r1, #0
 8001048:	f000 fe1c 	bl	8001c84 <RCC_AHBPeriphResetCmd>
 800104c:	e7d2      	b.n	8000ff4 <GPIO_DeInit+0x28>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	0340      	lsls	r0, r0, #13
 8001052:	2101      	movs	r1, #1
 8001054:	f000 fe16 	bl	8001c84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	0348      	lsls	r0, r1, #13
 800105c:	2100      	movs	r1, #0
 800105e:	f000 fe11 	bl	8001c84 <RCC_AHBPeriphResetCmd>
 8001062:	e7c7      	b.n	8000ff4 <GPIO_DeInit+0x28>
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	0390      	lsls	r0, r2, #14
 8001068:	2101      	movs	r1, #1
 800106a:	f000 fe0b 	bl	8001c84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	0398      	lsls	r0, r3, #14
 8001072:	2100      	movs	r1, #0
 8001074:	f000 fe06 	bl	8001c84 <RCC_AHBPeriphResetCmd>
 8001078:	e7bc      	b.n	8000ff4 <GPIO_DeInit+0x28>
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	48000c00 	.word	0x48000c00
 8001088:	48001000 	.word	0x48001000
 800108c:	48001400 	.word	0x48001400

08001090 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	465f      	mov	r7, fp
 8001094:	4656      	mov	r6, sl
 8001096:	464d      	mov	r5, r9
 8001098:	4644      	mov	r4, r8
 800109a:	b4f0      	push	{r4, r5, r6, r7}
 800109c:	468b      	mov	fp, r1
 800109e:	680e      	ldr	r6, [r1, #0]
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80010a0:	2103      	movs	r1, #3
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80010a2:	b083      	sub	sp, #12
 80010a4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010a6:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 80010a8:	2501      	movs	r5, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80010aa:	468c      	mov	ip, r1
 80010ac:	e00b      	b.n	80010c6 <GPIO_Init+0x36>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010ae:	3301      	adds	r3, #1
  {
    pos = ((uint32_t)0x01) << pinpos;
 80010b0:	1c2c      	adds	r4, r5, #0
 80010b2:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010b4:	1c37      	adds	r7, r6, #0
 80010b6:	3202      	adds	r2, #2
 80010b8:	4027      	ands	r7, r4

    if (currentpin == pos)
 80010ba:	42a7      	cmp	r7, r4
 80010bc:	d033      	beq.n	8001126 <GPIO_Init+0x96>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80010be:	3301      	adds	r3, #1
 80010c0:	3202      	adds	r2, #2
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d055      	beq.n	8001172 <GPIO_Init+0xe2>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80010c6:	1c2c      	adds	r4, r5, #0
 80010c8:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010ca:	1c37      	adds	r7, r6, #0
 80010cc:	4027      	ands	r7, r4

    if (currentpin == pos)
 80010ce:	42a7      	cmp	r7, r4
 80010d0:	d1ed      	bne.n	80010ae <GPIO_Init+0x1e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010d2:	4659      	mov	r1, fp
 80010d4:	790c      	ldrb	r4, [r1, #4]
 80010d6:	2101      	movs	r1, #1
 80010d8:	46a0      	mov	r8, r4
 80010da:	9401      	str	r4, [sp, #4]
 80010dc:	424c      	negs	r4, r1
 80010de:	44a0      	add	r8, r4
 80010e0:	4641      	mov	r1, r8
 80010e2:	2901      	cmp	r1, #1
 80010e4:	d94c      	bls.n	8001180 <GPIO_Init+0xf0>
 80010e6:	4667      	mov	r7, ip
 80010e8:	4097      	lsls	r7, r2
 80010ea:	43fc      	mvns	r4, r7
 80010ec:	46a0      	mov	r8, r4
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80010ee:	6801      	ldr	r1, [r0, #0]
 80010f0:	4647      	mov	r7, r8
 80010f2:	4039      	ands	r1, r7
 80010f4:	6001      	str	r1, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010f6:	9c01      	ldr	r4, [sp, #4]
 80010f8:	6801      	ldr	r1, [r0, #0]
 80010fa:	4094      	lsls	r4, r2
 80010fc:	430c      	orrs	r4, r1
 80010fe:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001100:	68c1      	ldr	r1, [r0, #12]
 8001102:	4667      	mov	r7, ip
 8001104:	4097      	lsls	r7, r2
 8001106:	43b9      	bics	r1, r7
 8001108:	60c1      	str	r1, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800110a:	465c      	mov	r4, fp
 800110c:	79e1      	ldrb	r1, [r4, #7]
 800110e:	68c7      	ldr	r7, [r0, #12]
 8001110:	4091      	lsls	r1, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001112:	3301      	adds	r3, #1
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001114:	1c2c      	adds	r4, r5, #0

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001116:	4339      	orrs	r1, r7

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001118:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800111a:	1c37      	adds	r7, r6, #0

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800111c:	60c1      	str	r1, [r0, #12]
 800111e:	3202      	adds	r2, #2
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001120:	4027      	ands	r7, r4

    if (currentpin == pos)
 8001122:	42a7      	cmp	r7, r4
 8001124:	d1cb      	bne.n	80010be <GPIO_Init+0x2e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001126:	4659      	mov	r1, fp
 8001128:	790c      	ldrb	r4, [r1, #4]
 800112a:	2101      	movs	r1, #1
 800112c:	46a1      	mov	r9, r4
 800112e:	9401      	str	r4, [sp, #4]
 8001130:	424c      	negs	r4, r1
 8001132:	44a1      	add	r9, r4
 8001134:	4649      	mov	r1, r9
 8001136:	2901      	cmp	r1, #1
 8001138:	d93a      	bls.n	80011b0 <GPIO_Init+0x120>
 800113a:	4667      	mov	r7, ip
 800113c:	4097      	lsls	r7, r2
 800113e:	43fc      	mvns	r4, r7
 8001140:	46a0      	mov	r8, r4
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001142:	6804      	ldr	r4, [r0, #0]
 8001144:	4647      	mov	r7, r8
 8001146:	403c      	ands	r4, r7
 8001148:	6004      	str	r4, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800114a:	9c01      	ldr	r4, [sp, #4]
 800114c:	6801      	ldr	r1, [r0, #0]
 800114e:	4094      	lsls	r4, r2
 8001150:	430c      	orrs	r4, r1
 8001152:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001154:	68c1      	ldr	r1, [r0, #12]
 8001156:	4667      	mov	r7, ip
 8001158:	4097      	lsls	r7, r2
 800115a:	43b9      	bics	r1, r7
 800115c:	60c1      	str	r1, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800115e:	465c      	mov	r4, fp
 8001160:	79e1      	ldrb	r1, [r4, #7]
 8001162:	68c7      	ldr	r7, [r0, #12]
 8001164:	4091      	lsls	r1, r2
 8001166:	4339      	orrs	r1, r7
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001168:	3301      	adds	r3, #1

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800116a:	60c1      	str	r1, [r0, #12]
 800116c:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800116e:	2b10      	cmp	r3, #16
 8001170:	d1a9      	bne.n	80010c6 <GPIO_Init+0x36>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001172:	b003      	add	sp, #12
 8001174:	bc3c      	pop	{r2, r3, r4, r5}
 8001176:	4690      	mov	r8, r2
 8001178:	4699      	mov	r9, r3
 800117a:	46a2      	mov	sl, r4
 800117c:	46ab      	mov	fp, r5
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001180:	4664      	mov	r4, ip
 8001182:	6881      	ldr	r1, [r0, #8]
 8001184:	4094      	lsls	r4, r2
 8001186:	43e4      	mvns	r4, r4
 8001188:	4021      	ands	r1, r4
 800118a:	6081      	str	r1, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800118c:	4659      	mov	r1, fp
 800118e:	7949      	ldrb	r1, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001190:	46a0      	mov	r8, r4
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001192:	6884      	ldr	r4, [r0, #8]
 8001194:	4091      	lsls	r1, r2
 8001196:	4321      	orrs	r1, r4
 8001198:	6081      	str	r1, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800119a:	8881      	ldrh	r1, [r0, #4]
 800119c:	43b9      	bics	r1, r7
 800119e:	8081      	strh	r1, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80011a0:	4659      	mov	r1, fp
 80011a2:	798f      	ldrb	r7, [r1, #6]
 80011a4:	8884      	ldrh	r4, [r0, #4]
 80011a6:	409f      	lsls	r7, r3
 80011a8:	4327      	orrs	r7, r4
 80011aa:	b2bc      	uxth	r4, r7
 80011ac:	8084      	strh	r4, [r0, #4]
 80011ae:	e79e      	b.n	80010ee <GPIO_Init+0x5e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80011b0:	6881      	ldr	r1, [r0, #8]
 80011b2:	4664      	mov	r4, ip
 80011b4:	468a      	mov	sl, r1
 80011b6:	4094      	lsls	r4, r2
 80011b8:	43e1      	mvns	r1, r4
 80011ba:	4654      	mov	r4, sl
 80011bc:	400c      	ands	r4, r1
 80011be:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80011c0:	465c      	mov	r4, fp
 80011c2:	7964      	ldrb	r4, [r4, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80011c4:	4688      	mov	r8, r1
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80011c6:	6881      	ldr	r1, [r0, #8]
 80011c8:	4094      	lsls	r4, r2
 80011ca:	430c      	orrs	r4, r1
 80011cc:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80011ce:	8884      	ldrh	r4, [r0, #4]
 80011d0:	43bc      	bics	r4, r7
 80011d2:	8084      	strh	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80011d4:	465c      	mov	r4, fp
 80011d6:	79a7      	ldrb	r7, [r4, #6]
 80011d8:	8881      	ldrh	r1, [r0, #4]
 80011da:	409f      	lsls	r7, r3
 80011dc:	430f      	orrs	r7, r1
 80011de:	b2b9      	uxth	r1, r7
 80011e0:	8081      	strh	r1, [r0, #4]
 80011e2:	e7ae      	b.n	8001142 <GPIO_Init+0xb2>

080011e4 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80011e6:	2100      	movs	r1, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 80011e8:	2201      	movs	r2, #1
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80011ea:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80011ec:	7101      	strb	r1, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 80011ee:	7142      	strb	r2, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80011f0:	7181      	strb	r1, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80011f2:	71c1      	strb	r1, [r0, #7]
}
 80011f4:	4770      	bx	lr
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	0000ffff 	.word	0x0000ffff

080011fc <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 80011fc:	2380      	movs	r3, #128	; 0x80
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fe:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001200:	025a      	lsls	r2, r3, #9
 8001202:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001204:	9b01      	ldr	r3, [sp, #4]
 8001206:	430b      	orrs	r3, r1
 8001208:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800120a:	9a01      	ldr	r2, [sp, #4]
 800120c:	61c2      	str	r2, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800120e:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001210:	9901      	ldr	r1, [sp, #4]
 8001212:	61c1      	str	r1, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8001214:	69c3      	ldr	r3, [r0, #28]
 8001216:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8001218:	69c0      	ldr	r0, [r0, #28]
 800121a:	9001      	str	r0, [sp, #4]
}
 800121c:	b002      	add	sp, #8
 800121e:	4770      	bx	lr

08001220 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001220:	8a00      	ldrh	r0, [r0, #16]
 8001222:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8001224:	1e43      	subs	r3, r0, #1
 8001226:	4198      	sbcs	r0, r3
}
 8001228:	4770      	bx	lr
 800122a:	46c0      	nop			; (mov r8, r8)

0800122c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800122c:	8a00      	ldrh	r0, [r0, #16]
}
 800122e:	4770      	bx	lr

08001230 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001230:	8a80      	ldrh	r0, [r0, #20]
 8001232:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8001234:	1e43      	subs	r3, r0, #1
 8001236:	4198      	sbcs	r0, r3
}
 8001238:	4770      	bx	lr
 800123a:	46c0      	nop			; (mov r8, r8)

0800123c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800123c:	8a80      	ldrh	r0, [r0, #20]
}
 800123e:	4770      	bx	lr

08001240 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8001240:	6181      	str	r1, [r0, #24]
}
 8001242:	4770      	bx	lr

08001244 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8001244:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8001246:	4770      	bx	lr

08001248 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001248:	2a00      	cmp	r2, #0
 800124a:	d101      	bne.n	8001250 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 800124c:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 800124e:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8001250:	6181      	str	r1, [r0, #24]
 8001252:	e7fc      	b.n	800124e <GPIO_WriteBit+0x6>

08001254 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001254:	8281      	strh	r1, [r0, #20]
}
 8001256:	4770      	bx	lr

08001258 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001258:	2307      	movs	r3, #7
 800125a:	400b      	ands	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800125c:	08c9      	lsrs	r1, r1, #3
 800125e:	3108      	adds	r1, #8
 8001260:	0089      	lsls	r1, r1, #2
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001262:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001264:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001266:	580c      	ldr	r4, [r1, r0]
 8001268:	250f      	movs	r5, #15
 800126a:	409d      	lsls	r5, r3
 800126c:	43ac      	bics	r4, r5
 800126e:	500c      	str	r4, [r1, r0]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001270:	580c      	ldr	r4, [r1, r0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001272:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001274:	4322      	orrs	r2, r4
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001276:	500a      	str	r2, [r1, r0]
}
 8001278:	bd30      	pop	{r4, r5, pc}
 800127a:	46c0      	nop			; (mov r8, r8)

0800127c <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800127c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <I2C_DeInit+0x34>)
 8001280:	4298      	cmp	r0, r3
 8001282:	d00a      	beq.n	800129a <I2C_DeInit+0x1e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001284:	2080      	movs	r0, #128	; 0x80
 8001286:	03c0      	lsls	r0, r0, #15
 8001288:	2101      	movs	r1, #1
 800128a:	f000 fd13 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	03c8      	lsls	r0, r1, #15
 8001292:	2100      	movs	r1, #0
 8001294:	f000 fd0e 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
  }
}
 8001298:	bd08      	pop	{r3, pc}
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	0390      	lsls	r0, r2, #14
 800129e:	2101      	movs	r1, #1
 80012a0:	f000 fd08 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	0398      	lsls	r0, r3, #14
 80012a8:	2100      	movs	r1, #0
 80012aa:	f000 fd03 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
 80012ae:	e7f3      	b.n	8001298 <I2C_DeInit+0x1c>
 80012b0:	40005400 	.word	0x40005400

080012b4 <I2C_Init>:
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 80012b4:	6802      	ldr	r2, [r0, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	439a      	bics	r2, r3
 80012ba:	6002      	str	r2, [r0, #0]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80012bc:	b530      	push	{r4, r5, lr}

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 80012be:	4a13      	ldr	r2, [pc, #76]	; (800130c <I2C_Init+0x58>)
  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80012c0:	6804      	ldr	r4, [r0, #0]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 80012c2:	688d      	ldr	r5, [r1, #8]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 80012c4:	4022      	ands	r2, r4
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 80012c6:	022c      	lsls	r4, r5, #8
 80012c8:	684d      	ldr	r5, [r1, #4]
 80012ca:	4322      	orrs	r2, r4
 80012cc:	432a      	orrs	r2, r5

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80012ce:	6002      	str	r2, [r0, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 80012d0:	680c      	ldr	r4, [r1, #0]
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <I2C_Init+0x5c>)
 80012d4:	4022      	ands	r2, r4
 80012d6:	6102      	str	r2, [r0, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012d8:	6805      	ldr	r5, [r0, #0]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80012da:	698a      	ldr	r2, [r1, #24]
 80012dc:	690c      	ldr	r4, [r1, #16]
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80012de:	432b      	orrs	r3, r5
 80012e0:	6003      	str	r3, [r0, #0]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80012e2:	4314      	orrs	r4, r2

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80012e4:	2300      	movs	r3, #0
 80012e6:	6083      	str	r3, [r0, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 80012e8:	60c3      	str	r3, [r0, #12]
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 80012ea:	6084      	str	r4, [r0, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 80012ec:	6885      	ldr	r5, [r0, #8]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	021c      	lsls	r4, r3, #8
 80012f2:	432c      	orrs	r4, r5
 80012f4:	6084      	str	r4, [r0, #8]
  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 80012f6:	68cd      	ldr	r5, [r1, #12]
 80012f8:	6802      	ldr	r2, [r0, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <I2C_Init+0x60>)
  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 80012fc:	432a      	orrs	r2, r5
 80012fe:	6002      	str	r2, [r0, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001300:	6844      	ldr	r4, [r0, #4]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8001302:	6949      	ldr	r1, [r1, #20]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8001304:	4023      	ands	r3, r4
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8001306:	430b      	orrs	r3, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001308:	6043      	str	r3, [r0, #4]
}
 800130a:	bd30      	pop	{r4, r5, pc}
 800130c:	00cfe0ff 	.word	0x00cfe0ff
 8001310:	f0ffffff 	.word	0xf0ffffff
 8001314:	07ff7fff 	.word	0x07ff7fff

08001318 <I2C_StructInit>:
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8001318:	2280      	movs	r2, #128	; 0x80
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 800131a:	2300      	movs	r3, #0
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800131c:	0211      	lsls	r1, r2, #8
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 800131e:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_AnalogFilter member */
  I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8001320:	6043      	str	r3, [r0, #4]
  /* Initialize the I2C_DigitalFilter member */
  I2C_InitStruct->I2C_DigitalFilter = 0;
 8001322:	6083      	str	r3, [r0, #8]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001324:	60c3      	str	r3, [r0, #12]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8001326:	6103      	str	r3, [r0, #16]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8001328:	6141      	str	r1, [r0, #20]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800132a:	6183      	str	r3, [r0, #24]
}
 800132c:	4770      	bx	lr
 800132e:	46c0      	nop			; (mov r8, r8)

08001330 <I2C_Cmd>:
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001330:	2900      	cmp	r1, #0
 8001332:	d104      	bne.n	800133e <I2C_Cmd+0xe>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001334:	6803      	ldr	r3, [r0, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	4393      	bics	r3, r2
 800133a:	6003      	str	r3, [r0, #0]
  }
}
 800133c:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800133e:	6801      	ldr	r1, [r0, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	430b      	orrs	r3, r1
 8001344:	6003      	str	r3, [r0, #0]
 8001346:	e7f9      	b.n	800133c <I2C_Cmd+0xc>

08001348 <I2C_SoftwareResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Disable peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8001348:	6802      	ldr	r2, [r0, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	439a      	bics	r2, r3
 800134e:	6002      	str	r2, [r0, #0]

  /* Perform a dummy read to delay the disable of peripheral for minimum
     3 APB clock cycles to perform the software reset functionality */
  *(__IO uint32_t *)(uint32_t)I2Cx; 
 8001350:	6802      	ldr	r2, [r0, #0]

  /* Enable peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001352:	6801      	ldr	r1, [r0, #0]
 8001354:	430b      	orrs	r3, r1
 8001356:	6003      	str	r3, [r0, #0]
}
 8001358:	4770      	bx	lr
 800135a:	46c0      	nop			; (mov r8, r8)

0800135c <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 800135c:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800135e:	2a00      	cmp	r2, #0
 8001360:	d102      	bne.n	8001368 <I2C_ITConfig+0xc>
    I2Cx->CR1 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 8001362:	438b      	bics	r3, r1
 8001364:	6003      	str	r3, [r0, #0]
  }
}
 8001366:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 8001368:	4319      	orrs	r1, r3
 800136a:	6001      	str	r1, [r0, #0]
 800136c:	e7fb      	b.n	8001366 <I2C_ITConfig+0xa>
 800136e:	46c0      	nop			; (mov r8, r8)

08001370 <I2C_StretchClockCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 8001370:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001372:	2900      	cmp	r1, #0
 8001374:	d104      	bne.n	8001380 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
  }
  else
  {
    /* Disable clock stretching  */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	0299      	lsls	r1, r3, #10
 800137a:	4311      	orrs	r1, r2
 800137c:	6001      	str	r1, [r0, #0]
  }
}
 800137e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 8001380:	4b01      	ldr	r3, [pc, #4]	; (8001388 <I2C_StretchClockCmd+0x18>)
 8001382:	4013      	ands	r3, r2
 8001384:	6003      	str	r3, [r0, #0]
 8001386:	e7fa      	b.n	800137e <I2C_StretchClockCmd+0xe>
 8001388:	fffdffff 	.word	0xfffdffff

0800138c <I2C_StopModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 800138c:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800138e:	2900      	cmp	r1, #0
 8001390:	d103      	bne.n	800139a <I2C_StopModeCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
  }
  else
  {
    /* Disable wakeup from stop mode */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <I2C_StopModeCmd+0x18>)
 8001394:	4013      	ands	r3, r2
 8001396:	6003      	str	r3, [r0, #0]
  }
}
 8001398:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	02cb      	lsls	r3, r1, #11
 800139e:	4313      	orrs	r3, r2
 80013a0:	6003      	str	r3, [r0, #0]
 80013a2:	e7f9      	b.n	8001398 <I2C_StopModeCmd+0xc>
 80013a4:	fffbffff 	.word	0xfffbffff

080013a8 <I2C_DualAddressCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 80013a8:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013aa:	2900      	cmp	r1, #0
 80013ac:	d103      	bne.n	80013b6 <I2C_DualAddressCmd+0xe>
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
  }
  else
  {
    /* Disable own address 2 */
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <I2C_DualAddressCmd+0x18>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	60c3      	str	r3, [r0, #12]
  }
}    
 80013b4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	020b      	lsls	r3, r1, #8
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60c3      	str	r3, [r0, #12]
 80013be:	e7f9      	b.n	80013b4 <I2C_DualAddressCmd+0xc>
 80013c0:	ffff7fff 	.word	0xffff7fff

080013c4 <I2C_OwnAddress2Config>:

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80013c4:	23fe      	movs	r3, #254	; 0xfe
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 80013c6:	b510      	push	{r4, lr}

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80013c8:	4019      	ands	r1, r3
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_OWN_ADDRESS2(Address));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80013ca:	68c4      	ldr	r4, [r0, #12]

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <I2C_OwnAddress2Config+0x1c>)

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 80013ce:	0212      	lsls	r2, r2, #8
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 80013d0:	4023      	ands	r3, r4

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 80013d2:	24e0      	movs	r4, #224	; 0xe0

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80013d4:	4319      	orrs	r1, r3
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 80013d6:	00e3      	lsls	r3, r4, #3
 80013d8:	401a      	ands	r2, r3

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80013da:	4311      	orrs	r1, r2
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80013dc:	60c1      	str	r1, [r0, #12]
}
 80013de:	bd10      	pop	{r4, pc}
 80013e0:	fffff801 	.word	0xfffff801

080013e4 <I2C_GeneralCallCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 80013e4:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013e6:	2900      	cmp	r1, #0
 80013e8:	d103      	bne.n	80013f2 <I2C_GeneralCallCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_GCEN;
  }
  else
  {
    /* Disable general call mode */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <I2C_GeneralCallCmd+0x18>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	6003      	str	r3, [r0, #0]
  }
} 
 80013f0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	030b      	lsls	r3, r1, #12
 80013f6:	4313      	orrs	r3, r2
 80013f8:	6003      	str	r3, [r0, #0]
 80013fa:	e7f9      	b.n	80013f0 <I2C_GeneralCallCmd+0xc>
 80013fc:	fff7ffff 	.word	0xfff7ffff

08001400 <I2C_SlaveByteControlCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 8001400:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001402:	2900      	cmp	r1, #0
 8001404:	d103      	bne.n	800140e <I2C_SlaveByteControlCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SBC;
  }
  else
  {
    /* Disable slave byte control */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <I2C_SlaveByteControlCmd+0x18>)
 8001408:	4013      	ands	r3, r2
 800140a:	6003      	str	r3, [r0, #0]
  }
}
 800140c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	024b      	lsls	r3, r1, #9
 8001412:	4313      	orrs	r3, r2
 8001414:	6003      	str	r3, [r0, #0]
 8001416:	e7f9      	b.n	800140c <I2C_SlaveByteControlCmd+0xc>
 8001418:	fffeffff 	.word	0xfffeffff

0800141c <I2C_SlaveAddressConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 800141c:	6843      	ldr	r3, [r0, #4]

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 800141e:	0589      	lsls	r1, r1, #22
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 8001420:	0a9a      	lsrs	r2, r3, #10
 8001422:	0293      	lsls	r3, r2, #10

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 8001424:	0d8a      	lsrs	r2, r1, #22
 8001426:	431a      	orrs	r2, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 8001428:	6042      	str	r2, [r0, #4]
}
 800142a:	4770      	bx	lr

0800142c <I2C_10BitAddressingModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 800142c:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800142e:	2900      	cmp	r1, #0
 8001430:	d103      	bne.n	800143a <I2C_10BitAddressingModeCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_ADD10;
  }
  else
  {
    /* Disable 10-bit addressing mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <I2C_10BitAddressingModeCmd+0x18>)
 8001434:	4013      	ands	r3, r2
 8001436:	6043      	str	r3, [r0, #4]
  }
} 
 8001438:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	010b      	lsls	r3, r1, #4
 800143e:	4313      	orrs	r3, r2
 8001440:	6043      	str	r3, [r0, #4]
 8001442:	e7f9      	b.n	8001438 <I2C_10BitAddressingModeCmd+0xc>
 8001444:	fffff7ff 	.word	0xfffff7ff

08001448 <I2C_AutoEndCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 8001448:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800144a:	2900      	cmp	r1, #0
 800144c:	d103      	bne.n	8001456 <I2C_AutoEndCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
  }
  else
  {
    /* Disable Auto end mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <I2C_AutoEndCmd+0x18>)
 8001450:	4013      	ands	r3, r2
 8001452:	6043      	str	r3, [r0, #4]
  }
} 
 8001454:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	048b      	lsls	r3, r1, #18
 800145a:	4313      	orrs	r3, r2
 800145c:	6043      	str	r3, [r0, #4]
 800145e:	e7f9      	b.n	8001454 <I2C_AutoEndCmd+0xc>
 8001460:	fdffffff 	.word	0xfdffffff

08001464 <I2C_ReloadCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 8001464:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001466:	2900      	cmp	r1, #0
 8001468:	d103      	bne.n	8001472 <I2C_ReloadCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_RELOAD;
  }
  else
  {
    /* Disable Auto Reload mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <I2C_ReloadCmd+0x18>)
 800146c:	4013      	ands	r3, r2
 800146e:	6043      	str	r3, [r0, #4]
  }
}
 8001470:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	044b      	lsls	r3, r1, #17
 8001476:	4313      	orrs	r3, r2
 8001478:	6043      	str	r3, [r0, #4]
 800147a:	e7f9      	b.n	8001470 <I2C_ReloadCmd+0xc>
 800147c:	feffffff 	.word	0xfeffffff

08001480 <I2C_NumberOfBytesConfig>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8001480:	6842      	ldr	r2, [r0, #4]

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 8001482:	4b03      	ldr	r3, [pc, #12]	; (8001490 <I2C_NumberOfBytesConfig+0x10>)

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8001484:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 8001486:	4013      	ands	r3, r2

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 8001488:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 800148a:	6041      	str	r1, [r0, #4]
}  
 800148c:	4770      	bx	lr
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	ff00ffff 	.word	0xff00ffff

08001494 <I2C_MasterRequestConfig>:
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 8001494:	6842      	ldr	r2, [r0, #4]
/* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
 8001496:	2900      	cmp	r1, #0
 8001498:	d004      	beq.n	80014a4 <I2C_MasterRequestConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
  }
  else
  {
    /* Request a read Transfer */
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	00d9      	lsls	r1, r3, #3
 800149e:	4311      	orrs	r1, r2
 80014a0:	6041      	str	r1, [r0, #4]
  }
}  
 80014a2:	4770      	bx	lr
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 80014a4:	4b01      	ldr	r3, [pc, #4]	; (80014ac <I2C_MasterRequestConfig+0x18>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	6043      	str	r3, [r0, #4]
 80014aa:	e7fa      	b.n	80014a2 <I2C_MasterRequestConfig+0xe>
 80014ac:	fffffbff 	.word	0xfffffbff

080014b0 <I2C_GenerateSTART>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 80014b0:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014b2:	2900      	cmp	r1, #0
 80014b4:	d103      	bne.n	80014be <I2C_GenerateSTART+0xe>
    I2Cx->CR2 |= I2C_CR2_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <I2C_GenerateSTART+0x18>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	6043      	str	r3, [r0, #4]
  }
}  
 80014bc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	018b      	lsls	r3, r1, #6
 80014c2:	4313      	orrs	r3, r2
 80014c4:	6043      	str	r3, [r0, #4]
 80014c6:	e7f9      	b.n	80014bc <I2C_GenerateSTART+0xc>
 80014c8:	ffffdfff 	.word	0xffffdfff

080014cc <I2C_GenerateSTOP>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 80014cc:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014ce:	2900      	cmp	r1, #0
 80014d0:	d103      	bne.n	80014da <I2C_GenerateSTOP+0xe>
    I2Cx->CR2 |= I2C_CR2_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <I2C_GenerateSTOP+0x18>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	6043      	str	r3, [r0, #4]
  }
}  
 80014d8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	01cb      	lsls	r3, r1, #7
 80014de:	4313      	orrs	r3, r2
 80014e0:	6043      	str	r3, [r0, #4]
 80014e2:	e7f9      	b.n	80014d8 <I2C_GenerateSTOP+0xc>
 80014e4:	ffffbfff 	.word	0xffffbfff

080014e8 <I2C_10BitAddressHeaderCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 80014e8:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014ea:	2900      	cmp	r1, #0
 80014ec:	d103      	bne.n	80014f6 <I2C_10BitAddressHeaderCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
  }
  else
  {
    /* Disable 10-bit header only mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <I2C_10BitAddressHeaderCmd+0x18>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	6043      	str	r3, [r0, #4]
  }
}    
 80014f4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	014b      	lsls	r3, r1, #5
 80014fa:	4313      	orrs	r3, r2
 80014fc:	6043      	str	r3, [r0, #4]
 80014fe:	e7f9      	b.n	80014f4 <I2C_10BitAddressHeaderCmd+0xc>
 8001500:	ffffefff 	.word	0xffffefff

08001504 <I2C_AcknowledgeConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 8001504:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001506:	2900      	cmp	r1, #0
 8001508:	d104      	bne.n	8001514 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
  }
  else
  {
    /* Enable NACK generation */
    I2Cx->CR2 |= I2C_CR2_NACK;
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	0219      	lsls	r1, r3, #8
 800150e:	4311      	orrs	r1, r2
 8001510:	6041      	str	r1, [r0, #4]
  }
}
 8001512:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <I2C_AcknowledgeConfig+0x18>)
 8001516:	4013      	ands	r3, r2
 8001518:	6043      	str	r3, [r0, #4]
 800151a:	e7fa      	b.n	8001512 <I2C_AcknowledgeConfig+0xe>
 800151c:	ffff7fff 	.word	0xffff7fff

08001520 <I2C_GetAddressMatched>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 8001520:	6983      	ldr	r3, [r0, #24]
 8001522:	20fe      	movs	r0, #254	; 0xfe
 8001524:	0401      	lsls	r1, r0, #16
 8001526:	4019      	ands	r1, r3
 8001528:	0c08      	lsrs	r0, r1, #16
}
 800152a:	4770      	bx	lr

0800152c <I2C_GetTransferDirection>:
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 800152c:	6980      	ldr	r0, [r0, #24]
 800152e:	03c1      	lsls	r1, r0, #15
  
  /* If write transfer is requested */
  if (tmpreg == 0)
  {
    /* write transfer is requested */
    direction = I2C_Direction_Transmitter;
 8001530:	0fca      	lsrs	r2, r1, #31
 8001532:	0290      	lsls	r0, r2, #10
  {
    /* Read transfer is requested */
    direction = I2C_Direction_Receiver;
  }  
  return direction;
}
 8001534:	4770      	bx	lr
 8001536:	46c0      	nop			; (mov r8, r8)

08001538 <I2C_TransferHandling>:
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8001538:	0589      	lsls	r1, r1, #22
 800153a:	0d89      	lsrs	r1, r1, #22
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 800153c:	b510      	push	{r4, lr}
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 800153e:	430b      	orrs	r3, r1
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 8001540:	6844      	ldr	r4, [r0, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001542:	4905      	ldr	r1, [pc, #20]	; (8001558 <I2C_TransferHandling+0x20>)
 8001544:	400c      	ands	r4, r1
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8001546:	4323      	orrs	r3, r4
 8001548:	9c02      	ldr	r4, [sp, #8]
 800154a:	0411      	lsls	r1, r2, #16
 800154c:	4323      	orrs	r3, r4
 800154e:	1c1a      	adds	r2, r3, #0
 8001550:	430a      	orrs	r2, r1
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8001552:	6042      	str	r2, [r0, #4]
}
 8001554:	bd10      	pop	{r4, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	fc009800 	.word	0xfc009800

0800155c <I2C_SMBusAlertCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 800155c:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800155e:	2900      	cmp	r1, #0
 8001560:	d103      	bne.n	800156a <I2C_SMBusAlertCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
  }
  else
  {
    /* Disable SMBus alert */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <I2C_SMBusAlertCmd+0x18>)
 8001564:	4013      	ands	r3, r2
 8001566:	6003      	str	r3, [r0, #0]
  }
}
 8001568:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	03cb      	lsls	r3, r1, #15
 800156e:	4313      	orrs	r3, r2
 8001570:	6003      	str	r3, [r0, #0]
 8001572:	e7f9      	b.n	8001568 <I2C_SMBusAlertCmd+0xc>
 8001574:	ffbfffff 	.word	0xffbfffff

08001578 <I2C_ClockTimeoutCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 8001578:	6942      	ldr	r2, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800157a:	2900      	cmp	r1, #0
 800157c:	d103      	bne.n	8001586 <I2C_ClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <I2C_ClockTimeoutCmd+0x18>)
 8001580:	4013      	ands	r3, r2
 8001582:	6143      	str	r3, [r0, #20]
  }
}
 8001584:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	020b      	lsls	r3, r1, #8
 800158a:	4313      	orrs	r3, r2
 800158c:	6143      	str	r3, [r0, #20]
 800158e:	e7f9      	b.n	8001584 <I2C_ClockTimeoutCmd+0xc>
 8001590:	ffff7fff 	.word	0xffff7fff

08001594 <I2C_ExtendedClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001594:	2900      	cmp	r1, #0
 8001596:	d104      	bne.n	80015a2 <I2C_ExtendedClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 8001598:	6943      	ldr	r3, [r0, #20]
 800159a:	0059      	lsls	r1, r3, #1
 800159c:	084a      	lsrs	r2, r1, #1
 800159e:	6142      	str	r2, [r0, #20]
  }
}
 80015a0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 80015a2:	6941      	ldr	r1, [r0, #20]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	061a      	lsls	r2, r3, #24
 80015a8:	430a      	orrs	r2, r1
 80015aa:	6142      	str	r2, [r0, #20]
 80015ac:	e7f8      	b.n	80015a0 <I2C_ExtendedClockTimeoutCmd+0xc>
 80015ae:	46c0      	nop			; (mov r8, r8)

080015b0 <I2C_IdleClockTimeoutCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 80015b0:	6942      	ldr	r2, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015b2:	2900      	cmp	r1, #0
 80015b4:	d103      	bne.n	80015be <I2C_IdleClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <I2C_IdleClockTimeoutCmd+0x18>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	6143      	str	r3, [r0, #20]
  }
}
 80015bc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 80015be:	2180      	movs	r1, #128	; 0x80
 80015c0:	014b      	lsls	r3, r1, #5
 80015c2:	4313      	orrs	r3, r2
 80015c4:	6143      	str	r3, [r0, #20]
 80015c6:	e7f9      	b.n	80015bc <I2C_IdleClockTimeoutCmd+0xc>
 80015c8:	ffffefff 	.word	0xffffefff

080015cc <I2C_TimeoutAConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 80015cc:	6943      	ldr	r3, [r0, #20]

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 80015ce:	0509      	lsls	r1, r1, #20
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 80015d0:	0b1a      	lsrs	r2, r3, #12
 80015d2:	0313      	lsls	r3, r2, #12

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 80015d4:	0d0a      	lsrs	r2, r1, #20
 80015d6:	431a      	orrs	r2, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 80015d8:	6142      	str	r2, [r0, #20]
}
 80015da:	4770      	bx	lr

080015dc <I2C_TimeoutBConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 80015dc:	6942      	ldr	r2, [r0, #20]

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <I2C_TimeoutBConfig+0x14>)

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 80015e0:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 80015e2:	4013      	ands	r3, r2

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <I2C_TimeoutBConfig+0x18>)
 80015e6:	4011      	ands	r1, r2
 80015e8:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 80015ea:	6141      	str	r1, [r0, #20]
}
 80015ec:	4770      	bx	lr
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	f000ffff 	.word	0xf000ffff
 80015f4:	0fff0000 	.word	0x0fff0000

080015f8 <I2C_CalculatePEC>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 80015f8:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015fa:	2900      	cmp	r1, #0
 80015fc:	d103      	bne.n	8001606 <I2C_CalculatePEC+0xe>
    I2Cx->CR1 |= I2C_CR1_PECEN;   
  }
  else
  {
    /* Disable PEC calculation */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <I2C_CalculatePEC+0x18>)
 8001600:	4013      	ands	r3, r2
 8001602:	6003      	str	r3, [r0, #0]
  }
}
 8001604:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	040b      	lsls	r3, r1, #16
 800160a:	4313      	orrs	r3, r2
 800160c:	6003      	str	r3, [r0, #0]
 800160e:	e7f9      	b.n	8001604 <I2C_CalculatePEC+0xc>
 8001610:	ff7fffff 	.word	0xff7fffff

08001614 <I2C_PECRequestCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 8001614:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001616:	2900      	cmp	r1, #0
 8001618:	d103      	bne.n	8001622 <I2C_PECRequestCmd+0xe>
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
  }
  else
  {
    /* Disable PEC transmission/reception request */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <I2C_PECRequestCmd+0x18>)
 800161c:	4013      	ands	r3, r2
 800161e:	6003      	str	r3, [r0, #0]
  }
}
 8001620:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	04cb      	lsls	r3, r1, #19
 8001626:	4313      	orrs	r3, r2
 8001628:	6003      	str	r3, [r0, #0]
 800162a:	e7f9      	b.n	8001620 <I2C_PECRequestCmd+0xc>
 800162c:	fbffffff 	.word	0xfbffffff

08001630 <I2C_GetPEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 8001630:	6a00      	ldr	r0, [r0, #32]
 8001632:	b2c0      	uxtb	r0, r0
}
 8001634:	4770      	bx	lr
 8001636:	46c0      	nop			; (mov r8, r8)

08001638 <I2C_ReadRegister>:
  *            @arg I2C_Register_RXDR: RXDR register.
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8001638:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t)I2Cx;
 800163e:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8001640:	9801      	ldr	r0, [sp, #4]
 8001642:	1809      	adds	r1, r1, r0
 8001644:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint32_t *) tmp);
 8001646:	9a01      	ldr	r2, [sp, #4]
 8001648:	6810      	ldr	r0, [r2, #0]
}
 800164a:	b002      	add	sp, #8
 800164c:	4770      	bx	lr
 800164e:	46c0      	nop			; (mov r8, r8)

08001650 <I2C_SendData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8001650:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001652:	4770      	bx	lr

08001654 <I2C_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8001654:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001656:	b2c0      	uxtb	r0, r0
}  
 8001658:	4770      	bx	lr
 800165a:	46c0      	nop			; (mov r8, r8)

0800165c <I2C_DMACmd>:
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 800165c:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
 800165e:	2a00      	cmp	r2, #0
 8001660:	d102      	bne.n	8001668 <I2C_DMACmd+0xc>
    I2Cx->CR1 |= I2C_DMAReq;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 8001662:	438b      	bics	r3, r1
 8001664:	6003      	str	r3, [r0, #0]
  }
}
 8001666:	4770      	bx	lr
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 8001668:	4319      	orrs	r1, r3
 800166a:	6001      	str	r1, [r0, #0]
 800166c:	e7fb      	b.n	8001666 <I2C_DMACmd+0xa>
 800166e:	46c0      	nop			; (mov r8, r8)

08001670 <I2C_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8001670:	6980      	ldr	r0, [r0, #24]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8001672:	4008      	ands	r0, r1
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  return bitstatus;
 8001674:	1e43      	subs	r3, r0, #1
 8001676:	4198      	sbcs	r0, r3
} 
 8001678:	4770      	bx	lr
 800167a:	46c0      	nop			; (mov r8, r8)

0800167c <I2C_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 800167c:	61c1      	str	r1, [r0, #28]
  }
 800167e:	4770      	bx	lr

08001680 <I2C_GetITStatus>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  /* If Error interrupt */
  if ((uint32_t)(I2C_IT & ERROR_IT_MASK))
 8001680:	23fc      	movs	r3, #252	; 0xfc
 8001682:	019a      	lsls	r2, r3, #6
 8001684:	4211      	tst	r1, r2
 8001686:	d00a      	beq.n	800169e <I2C_GetITStatus+0x1e>
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 8001688:	6803      	ldr	r3, [r0, #0]
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	401a      	ands	r2, r3
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
  }
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 800168e:	6983      	ldr	r3, [r0, #24]
    bitstatus = SET;
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8001690:	2000      	movs	r0, #0

  /* Get flag status */
  tmpreg &= I2C_IT;

  /* Check the status of the specified I2C flag */
  if((tmpreg != RESET) && enablestatus)
 8001692:	420b      	tst	r3, r1
 8001694:	d002      	beq.n	800169c <I2C_GetITStatus+0x1c>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8001696:	1c10      	adds	r0, r2, #0
 8001698:	1e42      	subs	r2, r0, #1
 800169a:	4190      	sbcs	r0, r2
    bitstatus = RESET;
  }

  /* Return the I2C_IT status */
  return bitstatus;
}
 800169c:	4770      	bx	lr
  if ((uint32_t)(I2C_IT & ERROR_IT_MASK))
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
  }
  /* If TC interrupt */
  else if ((uint32_t)(I2C_IT & TC_IT_MASK))
 800169e:	23c0      	movs	r3, #192	; 0xc0
 80016a0:	420b      	tst	r3, r1
 80016a2:	d003      	beq.n	80016ac <I2C_GetITStatus+0x2c>
  {
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 80016a4:	6803      	ldr	r3, [r0, #0]
 80016a6:	2240      	movs	r2, #64	; 0x40
 80016a8:	401a      	ands	r2, r3
 80016aa:	e7f0      	b.n	800168e <I2C_GetITStatus+0xe>
  }
  else
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 80016ac:	6802      	ldr	r2, [r0, #0]
 80016ae:	400a      	ands	r2, r1
 80016b0:	e7ed      	b.n	800168e <I2C_GetITStatus+0xe>
 80016b2:	46c0      	nop			; (mov r8, r8)

080016b4 <I2C_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_IT;
 80016b4:	61c1      	str	r1, [r0, #28]
}
 80016b6:	4770      	bx	lr

080016b8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80016b8:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80016ba:	7883      	ldrb	r3, [r0, #2]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d108      	bne.n	80016d2 <NVIC_Init+0x1a>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80016c0:	7800      	ldrb	r0, [r0, #0]
 80016c2:	211f      	movs	r1, #31
 80016c4:	4001      	ands	r1, r0
 80016c6:	2201      	movs	r2, #1
 80016c8:	4e10      	ldr	r6, [pc, #64]	; (800170c <NVIC_Init+0x54>)
 80016ca:	408a      	lsls	r2, r1
 80016cc:	2580      	movs	r5, #128	; 0x80
 80016ce:	5172      	str	r2, [r6, r5]
  }
}
 80016d0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80016d2:	7804      	ldrb	r4, [r0, #0]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80016d4:	2503      	movs	r5, #3
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80016d6:	08a1      	lsrs	r1, r4, #2
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <NVIC_Init+0x54>)
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80016da:	402c      	ands	r4, r5
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80016dc:	31c0      	adds	r1, #192	; 0xc0
 80016de:	008a      	lsls	r2, r1, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80016e0:	00e1      	lsls	r1, r4, #3
 80016e2:	24ff      	movs	r4, #255	; 0xff
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80016e4:	58d6      	ldr	r6, [r2, r3]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80016e6:	1c25      	adds	r5, r4, #0
 80016e8:	408d      	lsls	r5, r1
 80016ea:	43ae      	bics	r6, r5
 80016ec:	1c35      	adds	r5, r6, #0
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80016ee:	7846      	ldrb	r6, [r0, #1]
 80016f0:	01b6      	lsls	r6, r6, #6
 80016f2:	4034      	ands	r4, r6
 80016f4:	408c      	lsls	r4, r1
 80016f6:	1c29      	adds	r1, r5, #0
 80016f8:	4321      	orrs	r1, r4
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 80016fa:	50d1      	str	r1, [r2, r3]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80016fc:	7800      	ldrb	r0, [r0, #0]
 80016fe:	221f      	movs	r2, #31
 8001700:	4010      	ands	r0, r2
 8001702:	2401      	movs	r4, #1
 8001704:	4084      	lsls	r4, r0
 8001706:	601c      	str	r4, [r3, #0]
 8001708:	e7e2      	b.n	80016d0 <NVIC_Init+0x18>
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	e000e100 	.word	0xe000e100

08001710 <NVIC_SystemLPConfig>:
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <NVIC_SystemLPConfig+0x14>)
 8001712:	691a      	ldr	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001714:	2900      	cmp	r1, #0
 8001716:	d102      	bne.n	800171e <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8001718:	4382      	bics	r2, r0
 800171a:	611a      	str	r2, [r3, #16]
  }
}
 800171c:	4770      	bx	lr
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800171e:	4310      	orrs	r0, r2
 8001720:	6118      	str	r0, [r3, #16]
 8001722:	e7fb      	b.n	800171c <NVIC_SystemLPConfig+0xc>
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <SysTick_CLKSourceConfig>:
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SysTick_CLKSourceConfig+0x18>)
 800172a:	681a      	ldr	r2, [r3, #0]
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800172c:	2804      	cmp	r0, #4
 800172e:	d003      	beq.n	8001738 <SysTick_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001730:	2104      	movs	r1, #4
 8001732:	438a      	bics	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
  }
}
 8001736:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001738:	4310      	orrs	r0, r2
 800173a:	6018      	str	r0, [r3, #0]
 800173c:	e7fb      	b.n	8001736 <SysTick_CLKSourceConfig+0xe>
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	e000e010 	.word	0xe000e010

08001744 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <RCC_DeInit+0x48>)
 8001746:	2201      	movs	r2, #1
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	4311      	orrs	r1, r2
 800174c:	6019      	str	r1, [r3, #0]
#if defined (STM32F051)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800174e:	6858      	ldr	r0, [r3, #4]
 8001750:	490f      	ldr	r1, [pc, #60]	; (8001790 <RCC_DeInit+0x4c>)
 8001752:	4001      	ands	r1, r0
 8001754:	6059      	str	r1, [r3, #4]
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	490e      	ldr	r1, [pc, #56]	; (8001794 <RCC_DeInit+0x50>)
 800175a:	4001      	ands	r1, r0
 800175c:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	490d      	ldr	r1, [pc, #52]	; (8001798 <RCC_DeInit+0x54>)
 8001762:	4001      	ands	r1, r0
 8001764:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8001766:	6858      	ldr	r0, [r3, #4]
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <RCC_DeInit+0x58>)
 800176a:	4001      	ands	r1, r0
 800176c:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800176e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001770:	200f      	movs	r0, #15
 8001772:	4381      	bics	r1, r0
 8001774:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8001776:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001778:	4909      	ldr	r1, [pc, #36]	; (80017a0 <RCC_DeInit+0x5c>)
 800177a:	4001      	ands	r1, r0
 800177c:	6319      	str	r1, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800177e:	6b58      	ldr	r0, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001780:	2100      	movs	r1, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8001782:	4390      	bics	r0, r2
 8001784:	6358      	str	r0, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001786:	6099      	str	r1, [r3, #8]
}
 8001788:	4770      	bx	lr
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40021000 	.word	0x40021000
 8001790:	08ffb80c 	.word	0x08ffb80c
 8001794:	fef6ffff 	.word	0xfef6ffff
 8001798:	fffbffff 	.word	0xfffbffff
 800179c:	ffc0ffff 	.word	0xffc0ffff
 80017a0:	fffffeac 	.word	0xfffffeac

080017a4 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <RCC_HSEConfig+0xc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 80017aa:	7018      	strb	r0, [r3, #0]

}
 80017ac:	4770      	bx	lr
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	40021002 	.word	0x40021002

080017b4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80017b4:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 80017b6:	2300      	movs	r3, #0
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80017b8:	2280      	movs	r2, #128	; 0x80
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80017ba:	20a0      	movs	r0, #160	; 0xa0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80017bc:	490b      	ldr	r1, [pc, #44]	; (80017ec <RCC_WaitForHSEStartUp+0x38>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 80017be:	9301      	str	r3, [sp, #4]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80017c0:	0292      	lsls	r2, r2, #10
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80017c2:	01c0      	lsls	r0, r0, #7
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80017c4:	680b      	ldr	r3, [r1, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80017c6:	4213      	tst	r3, r2
 80017c8:	d10b      	bne.n	80017e2 <RCC_WaitForHSEStartUp+0x2e>
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 80017ca:	9b01      	ldr	r3, [sp, #4]
 80017cc:	3301      	adds	r3, #1
 80017ce:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80017d0:	9b01      	ldr	r3, [sp, #4]
 80017d2:	4283      	cmp	r3, r0
 80017d4:	d1f6      	bne.n	80017c4 <RCC_WaitForHSEStartUp+0x10>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <RCC_WaitForHSEStartUp+0x38>)
 80017d8:	6810      	ldr	r0, [r2, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80017da:	0383      	lsls	r3, r0, #14
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 80017dc:	0fd8      	lsrs	r0, r3, #31
}
 80017de:	b002      	add	sp, #8
 80017e0:	4770      	bx	lr
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 80017e2:	9901      	ldr	r1, [sp, #4]
 80017e4:	3101      	adds	r1, #1
 80017e6:	9101      	str	r1, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80017e8:	9b01      	ldr	r3, [sp, #4]
 80017ea:	e7f4      	b.n	80017d6 <RCC_WaitForHSEStartUp+0x22>
 80017ec:	40021000 	.word	0x40021000

080017f0 <RCC_AdjustHSICalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80017f2:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80017f4:	681a      	ldr	r2, [r3, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80017f6:	00c0      	lsls	r0, r0, #3
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80017f8:	438a      	bics	r2, r1
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80017fa:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CR = tmpreg;
 80017fc:	6018      	str	r0, [r3, #0]
}
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000

08001804 <RCC_HSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <RCC_HSICmd+0x1c>)
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001806:	2800      	cmp	r0, #0
 8001808:	d104      	bne.n	8001814 <RCC_HSICmd+0x10>
  {
    RCC->CR |= RCC_CR_HSION;
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	438a      	bics	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
  }
}
 8001812:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	4302      	orrs	r2, r0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e7f9      	b.n	8001812 <RCC_HSICmd+0xe>
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	40021000 	.word	0x40021000

08001824 <RCC_AdjustHSI14CalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8001826:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 8001828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 800182a:	00c0      	lsls	r0, r0, #3
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 800182c:	438a      	bics	r2, r1
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 800182e:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CR2 = tmpreg;
 8001830:	6358      	str	r0, [r3, #52]	; 0x34
}
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000

08001838 <RCC_HSI14Cmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <RCC_HSI14Cmd+0x1c>)
void RCC_HSI14Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800183a:	2800      	cmp	r0, #0
 800183c:	d104      	bne.n	8001848 <RCC_HSI14Cmd+0x10>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 800183e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001840:	2101      	movs	r1, #1
 8001842:	438a      	bics	r2, r1
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001846:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8001848:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800184a:	2201      	movs	r2, #1
 800184c:	4302      	orrs	r2, r0
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
 8001850:	e7f9      	b.n	8001846 <RCC_HSI14Cmd+0xe>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40021000 	.word	0x40021000

08001858 <RCC_HSI14ADCRequestCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <RCC_HSI14ADCRequestCmd+0x1c>)
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800185a:	2800      	cmp	r0, #0
 800185c:	d104      	bne.n	8001868 <RCC_HSI14ADCRequestCmd+0x10>
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 800185e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001860:	2204      	movs	r2, #4
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001866:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8001868:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800186a:	2104      	movs	r1, #4
 800186c:	4388      	bics	r0, r1
 800186e:	6358      	str	r0, [r3, #52]	; 0x34
 8001870:	e7f9      	b.n	8001866 <RCC_HSI14ADCRequestCmd+0xe>
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	40021000 	.word	0x40021000

08001878 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <RCC_LSEConfig+0x1c>)
 800187a:	2101      	movs	r1, #1
 800187c:	6a1a      	ldr	r2, [r3, #32]
 800187e:	438a      	bics	r2, r1
 8001880:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8001882:	6a1a      	ldr	r2, [r3, #32]
 8001884:	2104      	movs	r1, #4
 8001886:	438a      	bics	r2, r1
 8001888:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 800188a:	6a1a      	ldr	r2, [r3, #32]
 800188c:	4310      	orrs	r0, r2
 800188e:	6218      	str	r0, [r3, #32]
}
 8001890:	4770      	bx	lr
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	40021000 	.word	0x40021000

08001898 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <RCC_LSEDriveConfig+0x14>)
 800189a:	2118      	movs	r1, #24
 800189c:	6a1a      	ldr	r2, [r3, #32]
 800189e:	438a      	bics	r2, r1
 80018a0:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	4310      	orrs	r0, r2
 80018a6:	6218      	str	r0, [r3, #32]
}
 80018a8:	4770      	bx	lr
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000

080018b0 <RCC_LSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <RCC_LSICmd+0x1c>)
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d104      	bne.n	80018c0 <RCC_LSICmd+0x10>
  {
    RCC->CSR |= RCC_CSR_LSION;
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 80018b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b8:	2101      	movs	r1, #1
 80018ba:	438a      	bics	r2, r1
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80018be:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 80018c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80018c2:	2201      	movs	r2, #1
 80018c4:	4302      	orrs	r2, r0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
 80018c8:	e7f9      	b.n	80018be <RCC_LSICmd+0xe>
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	40021000 	.word	0x40021000

080018d0 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <RCC_PLLConfig+0x18>)
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80018d2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80018d4:	4a05      	ldr	r2, [pc, #20]	; (80018ec <RCC_PLLConfig+0x1c>)
 80018d6:	685c      	ldr	r4, [r3, #4]
 80018d8:	4022      	ands	r2, r4
 80018da:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80018dc:	685c      	ldr	r4, [r3, #4]
 80018de:	4320      	orrs	r0, r4
 80018e0:	4308      	orrs	r0, r1
 80018e2:	6058      	str	r0, [r3, #4]
}
 80018e4:	bd10      	pop	{r4, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40021000 	.word	0x40021000
 80018ec:	ffc27fff 	.word	0xffc27fff

080018f0 <RCC_PLLCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <RCC_PLLCmd+0x1c>)
 80018f2:	6819      	ldr	r1, [r3, #0]
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d103      	bne.n	8001900 <RCC_PLLCmd+0x10>
  {
    RCC->CR |= RCC_CR_PLLON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 80018f8:	4a05      	ldr	r2, [pc, #20]	; (8001910 <RCC_PLLCmd+0x20>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
  }
}
 80018fe:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 8001900:	2080      	movs	r0, #128	; 0x80
 8001902:	0442      	lsls	r2, r0, #17
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e7f9      	b.n	80018fe <RCC_PLLCmd+0xe>
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	40021000 	.word	0x40021000
 8001910:	feffffff 	.word	0xfeffffff

08001914 <RCC_HSI48Cmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI48ON;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <RCC_HSI48Cmd+0x1c>)
 8001916:	6b59      	ldr	r1, [r3, #52]	; 0x34
void RCC_HSI48Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001918:	2800      	cmp	r0, #0
 800191a:	d103      	bne.n	8001924 <RCC_HSI48Cmd+0x10>
  {
    RCC->CR2 |= RCC_CR2_HSI48ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI48ON;
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <RCC_HSI48Cmd+0x20>)
 800191e:	400a      	ands	r2, r1
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001922:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI48ON;
 8001924:	2080      	movs	r0, #128	; 0x80
 8001926:	0242      	lsls	r2, r0, #9
 8001928:	430a      	orrs	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
 800192c:	e7f9      	b.n	8001922 <RCC_HSI48Cmd+0xe>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40021000 	.word	0x40021000
 8001934:	fffeffff 	.word	0xfffeffff

08001938 <RCC_PREDIV1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <RCC_PREDIV1Config+0x10>)
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 800193a:	210f      	movs	r1, #15
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 800193c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 800193e:	438a      	bics	r2, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 8001940:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001942:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 8001944:	4770      	bx	lr
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40021000 	.word	0x40021000

0800194c <RCC_ClockSecuritySystemCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <RCC_ClockSecuritySystemCmd+0x1c>)
 800194e:	6819      	ldr	r1, [r3, #0]
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001950:	2800      	cmp	r0, #0
 8001952:	d103      	bne.n	800195c <RCC_ClockSecuritySystemCmd+0x10>
  {
    RCC->CR |= RCC_CR_CSSON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <RCC_ClockSecuritySystemCmd+0x20>)
 8001956:	400a      	ands	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
  }
}
 800195a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 800195c:	2080      	movs	r0, #128	; 0x80
 800195e:	0302      	lsls	r2, r0, #12
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e7f9      	b.n	800195a <RCC_ClockSecuritySystemCmd+0xe>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40021000 	.word	0x40021000
 800196c:	fff7ffff 	.word	0xfff7ffff

08001970 <RCC_MCOConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
  assert_param(IS_RCC_MCO_PRESCALER(RCC_MCOPrescaler));
    
  /* Get CFGR value */  
  tmpreg = RCC->CFGR;
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <RCC_MCOConfig+0x14>)
 8001972:	685a      	ldr	r2, [r3, #4]
  /* Clear MCOPRE[2:0] bits */
  tmpreg &= ~(RCC_CFGR_MCO_PRE | RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 8001974:	0212      	lsls	r2, r2, #8
 8001976:	0a12      	lsrs	r2, r2, #8
  /* Set the RCC_MCOSource and RCC_MCOPrescaler */
  tmpreg |= (RCC_MCOPrescaler | ((uint32_t)RCC_MCOSource<<24));
 8001978:	4311      	orrs	r1, r2
 800197a:	0602      	lsls	r2, r0, #24
 800197c:	1c08      	adds	r0, r1, #0
 800197e:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001980:	6058      	str	r0, [r3, #4]
}
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000

08001988 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <RCC_SYSCLKConfig+0x10>)
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800198a:	2103      	movs	r1, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 800198c:	685a      	ldr	r2, [r3, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800198e:	438a      	bics	r2, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001990:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001992:	6058      	str	r0, [r3, #4]
}
 8001994:	4770      	bx	lr
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40021000 	.word	0x40021000

0800199c <RCC_GetSYSCLKSource>:
  *           - 0x08: PLL used as system clock
  *           - 0x0C: HSI48 used as system clock, applicable only for STM32F072 devices  
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <RCC_GetSYSCLKSource+0xc>)
 800199e:	200c      	movs	r0, #12
 80019a0:	6859      	ldr	r1, [r3, #4]
 80019a2:	4008      	ands	r0, r1
}
 80019a4:	4770      	bx	lr
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000

080019ac <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <RCC_HCLKConfig+0x10>)
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80019ae:	21f0      	movs	r1, #240	; 0xf0
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 80019b0:	685a      	ldr	r2, [r3, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80019b2:	438a      	bics	r2, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80019b4:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019b6:	6058      	str	r0, [r3, #4]
}
 80019b8:	4770      	bx	lr
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000

080019c0 <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <RCC_PCLKConfig+0x14>)
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80019c4:	6859      	ldr	r1, [r3, #4]
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 80019c6:	400a      	ands	r2, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80019c8:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80019ca:	6058      	str	r0, [r3, #4]
}
 80019cc:	4770      	bx	lr
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	fffff8ff 	.word	0xfffff8ff

080019d8 <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <RCC_ADCCLKConfig+0x28>)
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <RCC_ADCCLKConfig+0x2c>)
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	400a      	ands	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	0402      	lsls	r2, r0, #16
 80019e6:	0c12      	lsrs	r2, r2, #16
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 80019ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ee:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <RCC_ADCCLKConfig+0x30>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 80019f0:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 80019f2:	400a      	ands	r2, r1
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 80019f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f8:	4308      	orrs	r0, r1
 80019fa:	6318      	str	r0, [r3, #48]	; 0x30
}
 80019fc:	4770      	bx	lr
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40021000 	.word	0x40021000
 8001a04:	ffffbfff 	.word	0xffffbfff
 8001a08:	fffffeff 	.word	0xfffffeff

08001a0c <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <RCC_CECCLKConfig+0x14>)
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a12:	438a      	bics	r2, r1
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 8001a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a18:	4310      	orrs	r0, r2
 8001a1a:	6318      	str	r0, [r3, #48]	; 0x30
}
 8001a1c:	4770      	bx	lr
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40021000 	.word	0x40021000

08001a24 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <RCC_I2CCLKConfig+0x14>)
 8001a26:	2110      	movs	r1, #16
 8001a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 8001a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a30:	4310      	orrs	r0, r2
 8001a32:	6318      	str	r0, [r3, #48]	; 0x30
}
 8001a34:	4770      	bx	lr
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40021000 	.word	0x40021000

08001a3c <RCC_USARTCLKConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Get USART index */
  tmp = (RCC_USARTCLK >> 28);
 8001a3c:	0f03      	lsrs	r3, r0, #28

  /* Clear USARTSW[1:0] bit */
  if (tmp == (uint32_t)0x00000001)
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d009      	beq.n	8001a56 <RCC_USARTCLKConfig+0x1a>
    RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
  }
  else
  {
    /* Clear USART2SW[1:0] bit */
    RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <RCC_USARTCLKConfig+0x28>)
 8001a44:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <RCC_USARTCLKConfig+0x2c>)
 8001a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a48:	400a      	ands	r2, r1
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Set USARTxSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <RCC_USARTCLKConfig+0x28>)
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a50:	4310      	orrs	r0, r2
 8001a52:	6318      	str	r0, [r3, #48]	; 0x30
}
 8001a54:	4770      	bx	lr

  /* Clear USARTSW[1:0] bit */
  if (tmp == (uint32_t)0x00000001)
  {
    /* Clear USART1SW[1:0] bit */  
    RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <RCC_USARTCLKConfig+0x28>)
 8001a58:	2103      	movs	r1, #3
 8001a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a60:	e7f4      	b.n	8001a4c <RCC_USARTCLKConfig+0x10>
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	40021000 	.word	0x40021000
 8001a68:	fffcffff 	.word	0xfffcffff

08001a6c <RCC_USBCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK(RCC_USBCLK));

  /* Clear USBSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <RCC_USBCLKConfig+0x14>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a72:	438a      	bics	r2, r1
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USBSW bits according to RCC_USBCLK value */
  RCC->CFGR3 |= RCC_USBCLK;
 8001a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a78:	4310      	orrs	r0, r2
 8001a7a:	6318      	str	r0, [r3, #48]	; 0x30
}
 8001a7c:	4770      	bx	lr
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40021000 	.word	0x40021000

08001a84 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <RCC_GetClocksFreq+0x140>)
 8001a86:	210c      	movs	r1, #12
 8001a88:	6853      	ldr	r3, [r2, #4]
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001a8a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001a8c:	400b      	ands	r3, r1
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001a8e:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d100      	bne.n	8001a96 <RCC_GetClocksFreq+0x12>
 8001a94:	e083      	b.n	8001b9e <RCC_GetClocksFreq+0x11a>
 8001a96:	d838      	bhi.n	8001b0a <RCC_GetClocksFreq+0x86>
      break;
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
      break;
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001a98:	494b      	ldr	r1, [pc, #300]	; (8001bc8 <RCC_GetClocksFreq+0x144>)
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001a9a:	2000      	movs	r0, #0
      break;
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
      break;
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001a9c:	6021      	str	r1, [r4, #0]
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001a9e:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <RCC_GetClocksFreq+0x140>)
 8001aa0:	685e      	ldr	r6, [r3, #4]
 8001aa2:	0635      	lsls	r5, r6, #24
  tmp = tmp >> 4;
 8001aa4:	0f2a      	lsrs	r2, r5, #28
  presc = APBAHBPrescTable[tmp]; 
 8001aa6:	4d49      	ldr	r5, [pc, #292]	; (8001bcc <RCC_GetClocksFreq+0x148>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001aa8:	1c0e      	adds	r6, r1, #0
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 8001aaa:	5caa      	ldrb	r2, [r5, r2]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001aac:	40d6      	lsrs	r6, r2
 8001aae:	6066      	str	r6, [r4, #4]
 8001ab0:	1c32      	adds	r2, r6, #0

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8001ab2:	685e      	ldr	r6, [r3, #4]
 8001ab4:	0576      	lsls	r6, r6, #21
  tmp = tmp >> 8;
 8001ab6:	0f76      	lsrs	r6, r6, #29
  presc = APBAHBPrescTable[tmp];
 8001ab8:	5dad      	ldrb	r5, [r5, r6]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001aba:	40ea      	lsrs	r2, r5
 8001abc:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8001abe:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8001ac0:	05f6      	lsls	r6, r6, #23
 8001ac2:	d44f      	bmi.n	8001b64 <RCC_GetClocksFreq+0xe0>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <RCC_GetClocksFreq+0x14c>)
 8001ac6:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8001ac8:	4d3e      	ldr	r5, [pc, #248]	; (8001bc4 <RCC_GetClocksFreq+0x140>)
 8001aca:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8001acc:	0676      	lsls	r6, r6, #25
 8001ace:	d446      	bmi.n	8001b5e <RCC_GetClocksFreq+0xda>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8001ad0:	4d40      	ldr	r5, [pc, #256]	; (8001bd4 <RCC_GetClocksFreq+0x150>)
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8001ad2:	4e3c      	ldr	r6, [pc, #240]	; (8001bc4 <RCC_GetClocksFreq+0x140>)
 8001ad4:	6125      	str	r5, [r4, #16]
 8001ad6:	6b35      	ldr	r5, [r6, #48]	; 0x30
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001ad8:	1c0b      	adds	r3, r1, #0
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8001ada:	06ee      	lsls	r6, r5, #27
 8001adc:	d400      	bmi.n	8001ae0 <RCC_GetClocksFreq+0x5c>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8001ade:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <RCC_GetClocksFreq+0x144>)
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8001ae0:	4d38      	ldr	r5, [pc, #224]	; (8001bc4 <RCC_GetClocksFreq+0x140>)
 8001ae2:	6163      	str	r3, [r4, #20]
 8001ae4:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	4233      	tst	r3, r6
 8001aea:	d129      	bne.n	8001b40 <RCC_GetClocksFreq+0xbc>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8001aec:	61a2      	str	r2, [r4, #24]
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8001aee:	4d35      	ldr	r5, [pc, #212]	; (8001bc4 <RCC_GetClocksFreq+0x140>)
 8001af0:	23c0      	movs	r3, #192	; 0xc0
 8001af2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	421e      	tst	r6, r3
 8001af8:	d10f      	bne.n	8001b1a <RCC_GetClocksFreq+0x96>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8001afa:	61e2      	str	r2, [r4, #28]
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 8001afc:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <RCC_GetClocksFreq+0x140>)
 8001afe:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8001b00:	062a      	lsls	r2, r5, #24
 8001b02:	d400      	bmi.n	8001b06 <RCC_GetClocksFreq+0x82>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 8001b04:	4834      	ldr	r0, [pc, #208]	; (8001bd8 <RCC_GetClocksFreq+0x154>)
 8001b06:	6220      	str	r0, [r4, #32]
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
  }   
}
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
  
  switch (tmp)
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d033      	beq.n	8001b76 <RCC_GetClocksFreq+0xf2>
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d1c2      	bne.n	8001a98 <RCC_GetClocksFreq+0x14>
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
      break;
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 8001b12:	4931      	ldr	r1, [pc, #196]	; (8001bd8 <RCC_GetClocksFreq+0x154>)
 8001b14:	6001      	str	r1, [r0, #0]
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001b16:	2000      	movs	r0, #0
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
      break;
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
      break;
 8001b18:	e7c1      	b.n	8001a9e <RCC_GetClocksFreq+0x1a>
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8001b1a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	401e      	ands	r6, r3
 8001b20:	0252      	lsls	r2, r2, #9
 8001b22:	4296      	cmp	r6, r2
 8001b24:	d044      	beq.n	8001bb0 <RCC_GetClocksFreq+0x12c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8001b26:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001b28:	2680      	movs	r6, #128	; 0x80
 8001b2a:	4019      	ands	r1, r3
 8001b2c:	02b2      	lsls	r2, r6, #10
 8001b2e:	4291      	cmp	r1, r2
 8001b30:	d044      	beq.n	8001bbc <RCC_GetClocksFreq+0x138>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8001b32:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8001b34:	401d      	ands	r5, r3
 8001b36:	429d      	cmp	r5, r3
 8001b38:	d1e0      	bne.n	8001afc <RCC_GetClocksFreq+0x78>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8001b3a:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <RCC_GetClocksFreq+0x144>)
 8001b3c:	61e3      	str	r3, [r4, #28]
 8001b3e:	e7dd      	b.n	8001afc <RCC_GetClocksFreq+0x78>
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8001b40:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8001b42:	401e      	ands	r6, r3
 8001b44:	2e01      	cmp	r6, #1
 8001b46:	d031      	beq.n	8001bac <RCC_GetClocksFreq+0x128>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8001b48:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8001b4a:	401e      	ands	r6, r3
 8001b4c:	2e02      	cmp	r6, #2
 8001b4e:	d031      	beq.n	8001bb4 <RCC_GetClocksFreq+0x130>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8001b50:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8001b52:	402b      	ands	r3, r5
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d1ca      	bne.n	8001aee <RCC_GetClocksFreq+0x6a>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <RCC_GetClocksFreq+0x144>)
 8001b5a:	61a3      	str	r3, [r4, #24]
 8001b5c:	e7c7      	b.n	8001aee <RCC_GetClocksFreq+0x6a>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	021d      	lsls	r5, r3, #8
 8001b62:	e7b6      	b.n	8001ad2 <RCC_GetClocksFreq+0x4e>
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	045d      	lsls	r5, r3, #17
 8001b68:	d402      	bmi.n	8001b70 <RCC_GetClocksFreq+0xec>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8001b6a:	0856      	lsrs	r6, r2, #1
 8001b6c:	60e6      	str	r6, [r4, #12]
 8001b6e:	e7ab      	b.n	8001ac8 <RCC_GetClocksFreq+0x44>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8001b70:	0895      	lsrs	r5, r2, #2
 8001b72:	60e5      	str	r5, [r4, #12]
 8001b74:	e7a8      	b.n	8001ac8 <RCC_GetClocksFreq+0x44>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001b76:	6855      	ldr	r5, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
 8001b78:	23c0      	movs	r3, #192	; 0xc0
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001b7a:	02ae      	lsls	r6, r5, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001b7c:	6850      	ldr	r0, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8001b7e:	0f35      	lsrs	r5, r6, #28
      
      if (pllsource == 0x00)
 8001b80:	0259      	lsls	r1, r3, #9
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8001b82:	3502      	adds	r5, #2
      
      if (pllsource == 0x00)
 8001b84:	4208      	tst	r0, r1
 8001b86:	d00e      	beq.n	8001ba6 <RCC_GetClocksFreq+0x122>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8001b88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	4011      	ands	r1, r2
 8001b8e:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8001b90:	4812      	ldr	r0, [pc, #72]	; (8001bdc <RCC_GetClocksFreq+0x158>)
 8001b92:	f000 fef9 	bl	8002988 <__aeabi_uidiv>
 8001b96:	4368      	muls	r0, r5
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8001b98:	6020      	str	r0, [r4, #0]
      break;
 8001b9a:	1c01      	adds	r1, r0, #0
 8001b9c:	e77f      	b.n	8001a9e <RCC_GetClocksFreq+0x1a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001b9e:	490f      	ldr	r1, [pc, #60]	; (8001bdc <RCC_GetClocksFreq+0x158>)
 8001ba0:	6001      	str	r1, [r0, #0]
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8001ba2:	2000      	movs	r0, #0
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
 8001ba4:	e77b      	b.n	8001a9e <RCC_GetClocksFreq+0x1a>
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8001ba6:	480e      	ldr	r0, [pc, #56]	; (8001be0 <RCC_GetClocksFreq+0x15c>)
 8001ba8:	4368      	muls	r0, r5
 8001baa:	e7f5      	b.n	8001b98 <RCC_GetClocksFreq+0x114>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001bac:	61a1      	str	r1, [r4, #24]
 8001bae:	e79e      	b.n	8001aee <RCC_GetClocksFreq+0x6a>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8001bb0:	61e1      	str	r1, [r4, #28]
 8001bb2:	e7a3      	b.n	8001afc <RCC_GetClocksFreq+0x78>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8001bb4:	2680      	movs	r6, #128	; 0x80
 8001bb6:	0235      	lsls	r5, r6, #8
 8001bb8:	61a5      	str	r5, [r4, #24]
 8001bba:	e798      	b.n	8001aee <RCC_GetClocksFreq+0x6a>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	020e      	lsls	r6, r1, #8
 8001bc0:	61e6      	str	r6, [r4, #28]
 8001bc2:	e79b      	b.n	8001afc <RCC_GetClocksFreq+0x78>
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	007a1200 	.word	0x007a1200
 8001bcc:	20000018 	.word	0x20000018
 8001bd0:	00d59f80 	.word	0x00d59f80
 8001bd4:	00008012 	.word	0x00008012
 8001bd8:	02dc6c00 	.word	0x02dc6c00
 8001bdc:	00b71b00 	.word	0x00b71b00
 8001be0:	003d0900 	.word	0x003d0900

08001be4 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <RCC_RTCCLKConfig+0xc>)
 8001be6:	6a1a      	ldr	r2, [r3, #32]
 8001be8:	4310      	orrs	r0, r2
 8001bea:	6218      	str	r0, [r3, #32]
}
 8001bec:	4770      	bx	lr
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <RCC_RTCCLKCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <RCC_RTCCLKCmd+0x1c>)
 8001bf6:	6a19      	ldr	r1, [r3, #32]
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d103      	bne.n	8001c04 <RCC_RTCCLKCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <RCC_RTCCLKCmd+0x20>)
 8001bfe:	400a      	ands	r2, r1
 8001c00:	621a      	str	r2, [r3, #32]
  }
}
 8001c02:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8001c04:	2080      	movs	r0, #128	; 0x80
 8001c06:	0202      	lsls	r2, r0, #8
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	621a      	str	r2, [r3, #32]
 8001c0c:	e7f9      	b.n	8001c02 <RCC_RTCCLKCmd+0xe>
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40021000 	.word	0x40021000
 8001c14:	ffff7fff 	.word	0xffff7fff

08001c18 <RCC_BackupResetCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <RCC_BackupResetCmd+0x1c>)
 8001c1a:	6a19      	ldr	r1, [r3, #32]
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d103      	bne.n	8001c28 <RCC_BackupResetCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8001c20:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <RCC_BackupResetCmd+0x20>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	621a      	str	r2, [r3, #32]
  }
}
 8001c26:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8001c28:	2080      	movs	r0, #128	; 0x80
 8001c2a:	0242      	lsls	r2, r0, #9
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	621a      	str	r2, [r3, #32]
 8001c30:	e7f9      	b.n	8001c26 <RCC_BackupResetCmd+0xe>
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40021000 	.word	0x40021000
 8001c38:	fffeffff 	.word	0xfffeffff

08001c3c <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <RCC_AHBPeriphClockCmd+0x14>)
 8001c3e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c40:	2900      	cmp	r1, #0
 8001c42:	d102      	bne.n	8001c4a <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001c44:	4382      	bics	r2, r0
 8001c46:	615a      	str	r2, [r3, #20]
  }
}
 8001c48:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001c4a:	4310      	orrs	r0, r2
 8001c4c:	6158      	str	r0, [r3, #20]
 8001c4e:	e7fb      	b.n	8001c48 <RCC_AHBPeriphClockCmd+0xc>
 8001c50:	40021000 	.word	0x40021000

08001c54 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <RCC_APB2PeriphClockCmd+0x14>)
 8001c56:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c58:	2900      	cmp	r1, #0
 8001c5a:	d102      	bne.n	8001c62 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001c5c:	4382      	bics	r2, r0
 8001c5e:	619a      	str	r2, [r3, #24]
  }
}
 8001c60:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001c62:	4310      	orrs	r0, r2
 8001c64:	6198      	str	r0, [r3, #24]
 8001c66:	e7fb      	b.n	8001c60 <RCC_APB2PeriphClockCmd+0xc>
 8001c68:	40021000 	.word	0x40021000

08001c6c <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <RCC_APB1PeriphClockCmd+0x14>)
 8001c6e:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c70:	2900      	cmp	r1, #0
 8001c72:	d102      	bne.n	8001c7a <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001c74:	4382      	bics	r2, r0
 8001c76:	61da      	str	r2, [r3, #28]
  }
}
 8001c78:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001c7a:	4310      	orrs	r0, r2
 8001c7c:	61d8      	str	r0, [r3, #28]
 8001c7e:	e7fb      	b.n	8001c78 <RCC_APB1PeriphClockCmd+0xc>
 8001c80:	40021000 	.word	0x40021000

08001c84 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <RCC_AHBPeriphResetCmd+0x14>)
 8001c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c88:	2900      	cmp	r1, #0
 8001c8a:	d102      	bne.n	8001c92 <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8001c8c:	4382      	bics	r2, r0
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8001c90:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8001c92:	4310      	orrs	r0, r2
 8001c94:	6298      	str	r0, [r3, #40]	; 0x28
 8001c96:	e7fb      	b.n	8001c90 <RCC_AHBPeriphResetCmd+0xc>
 8001c98:	40021000 	.word	0x40021000

08001c9c <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <RCC_APB2PeriphResetCmd+0x14>)
 8001c9e:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ca0:	2900      	cmp	r1, #0
 8001ca2:	d102      	bne.n	8001caa <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001ca4:	4382      	bics	r2, r0
 8001ca6:	60da      	str	r2, [r3, #12]
  }
}
 8001ca8:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001caa:	4310      	orrs	r0, r2
 8001cac:	60d8      	str	r0, [r3, #12]
 8001cae:	e7fb      	b.n	8001ca8 <RCC_APB2PeriphResetCmd+0xc>
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <RCC_APB1PeriphResetCmd+0x14>)
 8001cb6:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001cb8:	2900      	cmp	r1, #0
 8001cba:	d102      	bne.n	8001cc2 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001cbc:	4382      	bics	r2, r0
 8001cbe:	611a      	str	r2, [r3, #16]
  }
}
 8001cc0:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001cc2:	4310      	orrs	r0, r2
 8001cc4:	6118      	str	r0, [r3, #16]
 8001cc6:	e7fb      	b.n	8001cc0 <RCC_APB1PeriphResetCmd+0xc>
 8001cc8:	40021000 	.word	0x40021000

08001ccc <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <RCC_ITConfig+0x14>)
 8001cce:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001cd0:	2900      	cmp	r1, #0
 8001cd2:	d102      	bne.n	8001cda <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 8001cd4:	4382      	bics	r2, r0
 8001cd6:	701a      	strb	r2, [r3, #0]
  }
}
 8001cd8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8001cda:	4310      	orrs	r0, r2
 8001cdc:	7018      	strb	r0, [r3, #0]
 8001cde:	e7fb      	b.n	8001cd8 <RCC_ITConfig+0xc>
 8001ce0:	40021009 	.word	0x40021009

08001ce4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001ce4:	0943      	lsrs	r3, r0, #5

  if (tmp == 0)               /* The flag to check is in CR register */
 8001ce6:	d108      	bne.n	8001cfa <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->CR;
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <RCC_GetFlagStatus+0x30>)
 8001cea:	6812      	ldr	r2, [r2, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001cec:	231f      	movs	r3, #31
 8001cee:	4018      	ands	r0, r3
 8001cf0:	40c2      	lsrs	r2, r0
 8001cf2:	1c10      	adds	r0, r2, #0
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4008      	ands	r0, r1
}
 8001cf8:	4770      	bx	lr

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d004      	beq.n	8001d08 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d005      	beq.n	8001d0e <RCC_GetFlagStatus+0x2a>
  {
    statusreg = RCC->CSR;
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 8001d02:	4904      	ldr	r1, [pc, #16]	; (8001d14 <RCC_GetFlagStatus+0x30>)
 8001d04:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001d06:	e7f1      	b.n	8001cec <RCC_GetFlagStatus+0x8>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8001d08:	4902      	ldr	r1, [pc, #8]	; (8001d14 <RCC_GetFlagStatus+0x30>)
 8001d0a:	6a0a      	ldr	r2, [r1, #32]
 8001d0c:	e7ee      	b.n	8001cec <RCC_GetFlagStatus+0x8>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001d0e:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <RCC_GetFlagStatus+0x30>)
 8001d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d12:	e7eb      	b.n	8001cec <RCC_GetFlagStatus+0x8>
 8001d14:	40021000 	.word	0x40021000

08001d18 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <RCC_ClearFlag+0x10>)
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d1e:	0450      	lsls	r0, r2, #17
 8001d20:	4308      	orrs	r0, r1
 8001d22:	6258      	str	r0, [r3, #36]	; 0x24
}
 8001d24:	4770      	bx	lr
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	40021000 	.word	0x40021000

08001d2c <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001d2c:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <RCC_GetITStatus+0xc>)
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	4008      	ands	r0, r1
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001d32:	1e43      	subs	r3, r0, #1
 8001d34:	4198      	sbcs	r0, r3
}
 8001d36:	4770      	bx	lr
 8001d38:	40021000 	.word	0x40021000

08001d3c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 8001d3c:	4b01      	ldr	r3, [pc, #4]	; (8001d44 <RCC_ClearITPendingBit+0x8>)
 8001d3e:	7018      	strb	r0, [r3, #0]
}
 8001d40:	4770      	bx	lr
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	4002100a 	.word	0x4002100a

08001d48 <TIM_DeInit>:
  * @note   TIM2 is not applicable for STM32F030 devices.    
  * @retval None
  *   
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001d48:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
 8001d4a:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <TIM_DeInit+0xf4>)
 8001d4c:	4298      	cmp	r0, r3
 8001d4e:	d024      	beq.n	8001d9a <TIM_DeInit+0x52>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  }     
  else if (TIMx == TIM2)
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	05ca      	lsls	r2, r1, #23
 8001d54:	4290      	cmp	r0, r2
 8001d56:	d02b      	beq.n	8001db0 <TIM_DeInit+0x68>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <TIM_DeInit+0xf8>)
 8001d5a:	4298      	cmp	r0, r3
 8001d5c:	d031      	beq.n	8001dc2 <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }
  else if (TIMx == TIM6)
 8001d5e:	4939      	ldr	r1, [pc, #228]	; (8001e44 <TIM_DeInit+0xfc>)
 8001d60:	4288      	cmp	r0, r1
 8001d62:	d037      	beq.n	8001dd4 <TIM_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  } 
  else if (TIMx == TIM7)
 8001d64:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <TIM_DeInit+0x100>)
 8001d66:	4290      	cmp	r0, r2
 8001d68:	d03d      	beq.n	8001de6 <TIM_DeInit+0x9e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }
  else if (TIMx == TIM14) 
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <TIM_DeInit+0x104>)
 8001d6c:	4298      	cmp	r0, r3
 8001d6e:	d043      	beq.n	8001df8 <TIM_DeInit+0xb0>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
  }        
  else if (TIMx == TIM15)
 8001d70:	4937      	ldr	r1, [pc, #220]	; (8001e50 <TIM_DeInit+0x108>)
 8001d72:	4288      	cmp	r0, r1
 8001d74:	d04b      	beq.n	8001e0e <TIM_DeInit+0xc6>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
  } 
  else if (TIMx == TIM16)
 8001d76:	4a37      	ldr	r2, [pc, #220]	; (8001e54 <TIM_DeInit+0x10c>)
 8001d78:	4290      	cmp	r0, r2
 8001d7a:	d053      	beq.n	8001e24 <TIM_DeInit+0xdc>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
  } 
  else
  {
    if (TIMx == TIM17)
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <TIM_DeInit+0x110>)
 8001d7e:	4298      	cmp	r0, r3
 8001d80:	d000      	beq.n	8001d84 <TIM_DeInit+0x3c>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
     
}
 8001d82:	bd08      	pop	{r3, pc}
  } 
  else
  {
    if (TIMx == TIM17)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8001d84:	2080      	movs	r0, #128	; 0x80
 8001d86:	02c0      	lsls	r0, r0, #11
 8001d88:	2101      	movs	r1, #1
 8001d8a:	f7ff ff87 	bl	8001c9c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	02c8      	lsls	r0, r1, #11
 8001d92:	2100      	movs	r1, #0
 8001d94:	f7ff ff82 	bl	8001c9c <RCC_APB2PeriphResetCmd>
 8001d98:	e7f3      	b.n	8001d82 <TIM_DeInit+0x3a>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001d9a:	2080      	movs	r0, #128	; 0x80
 8001d9c:	0100      	lsls	r0, r0, #4
 8001d9e:	2101      	movs	r1, #1
 8001da0:	f7ff ff7c 	bl	8001c9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0108      	lsls	r0, r1, #4
 8001da8:	2100      	movs	r1, #0
 8001daa:	f7ff ff77 	bl	8001c9c <RCC_APB2PeriphResetCmd>
 8001dae:	e7e8      	b.n	8001d82 <TIM_DeInit+0x3a>
  }     
  else if (TIMx == TIM2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001db0:	2001      	movs	r0, #1
 8001db2:	2101      	movs	r1, #1
 8001db4:	f7ff ff7e 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001db8:	2001      	movs	r0, #1
 8001dba:	2100      	movs	r1, #0
 8001dbc:	f7ff ff7a 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
 8001dc0:	e7df      	b.n	8001d82 <TIM_DeInit+0x3a>
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	f7ff ff75 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001dca:	2002      	movs	r0, #2
 8001dcc:	2100      	movs	r1, #0
 8001dce:	f7ff ff71 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
 8001dd2:	e7d6      	b.n	8001d82 <TIM_DeInit+0x3a>
  }
  else if (TIMx == TIM6)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001dd4:	2010      	movs	r0, #16
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	f7ff ff6c 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001ddc:	2010      	movs	r0, #16
 8001dde:	2100      	movs	r1, #0
 8001de0:	f7ff ff68 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
 8001de4:	e7cd      	b.n	8001d82 <TIM_DeInit+0x3a>
  } 
  else if (TIMx == TIM7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001de6:	2020      	movs	r0, #32
 8001de8:	2101      	movs	r1, #1
 8001dea:	f7ff ff63 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001dee:	2020      	movs	r0, #32
 8001df0:	2100      	movs	r1, #0
 8001df2:	f7ff ff5f 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
 8001df6:	e7c4      	b.n	8001d82 <TIM_DeInit+0x3a>
  }
  else if (TIMx == TIM14) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	0050      	lsls	r0, r2, #1
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	f7ff ff59 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	0058      	lsls	r0, r3, #1
 8001e06:	2100      	movs	r1, #0
 8001e08:	f7ff ff54 	bl	8001cb4 <RCC_APB1PeriphResetCmd>
 8001e0c:	e7b9      	b.n	8001d82 <TIM_DeInit+0x3a>
  }        
  else if (TIMx == TIM15)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8001e0e:	2080      	movs	r0, #128	; 0x80
 8001e10:	0240      	lsls	r0, r0, #9
 8001e12:	2101      	movs	r1, #1
 8001e14:	f7ff ff42 	bl	8001c9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	0248      	lsls	r0, r1, #9
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f7ff ff3d 	bl	8001c9c <RCC_APB2PeriphResetCmd>
 8001e22:	e7ae      	b.n	8001d82 <TIM_DeInit+0x3a>
  } 
  else if (TIMx == TIM16)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	0290      	lsls	r0, r2, #10
 8001e28:	2101      	movs	r1, #1
 8001e2a:	f7ff ff37 	bl	8001c9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	0298      	lsls	r0, r3, #10
 8001e32:	2100      	movs	r1, #0
 8001e34:	f7ff ff32 	bl	8001c9c <RCC_APB2PeriphResetCmd>
 8001e38:	e7a3      	b.n	8001d82 <TIM_DeInit+0x3a>
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40001000 	.word	0x40001000
 8001e48:	40001400 	.word	0x40001400
 8001e4c:	40002000 	.word	0x40002000
 8001e50:	40014000 	.word	0x40014000
 8001e54:	40014400 	.word	0x40014400
 8001e58:	40014800 	.word	0x40014800

08001e5c <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <TIM_TimeBaseInit+0x70>)
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001e5e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001e60:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8001e62:	4290      	cmp	r0, r2
 8001e64:	d024      	beq.n	8001eb0 <TIM_TimeBaseInit+0x54>
 8001e66:	2480      	movs	r4, #128	; 0x80
 8001e68:	05e2      	lsls	r2, r4, #23
 8001e6a:	4290      	cmp	r0, r2
 8001e6c:	d020      	beq.n	8001eb0 <TIM_TimeBaseInit+0x54>
 8001e6e:	4c18      	ldr	r4, [pc, #96]	; (8001ed0 <TIM_TimeBaseInit+0x74>)
 8001e70:	42a0      	cmp	r0, r4
 8001e72:	d01d      	beq.n	8001eb0 <TIM_TimeBaseInit+0x54>
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
  }
 
  if(TIMx != TIM6)
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <TIM_TimeBaseInit+0x78>)
 8001e76:	4290      	cmp	r0, r2
 8001e78:	d021      	beq.n	8001ebe <TIM_TimeBaseInit+0x62>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001e7a:	4c17      	ldr	r4, [pc, #92]	; (8001ed8 <TIM_TimeBaseInit+0x7c>)
 8001e7c:	890a      	ldrh	r2, [r1, #8]
 8001e7e:	4023      	ands	r3, r4
 8001e80:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001e82:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001e84:	684b      	ldr	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001e86:	4c11      	ldr	r4, [pc, #68]	; (8001ecc <TIM_TimeBaseInit+0x70>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001e88:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001e8a:	880a      	ldrh	r2, [r1, #0]
 8001e8c:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	d00b      	beq.n	8001eaa <TIM_TimeBaseInit+0x4e>
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <TIM_TimeBaseInit+0x80>)
 8001e94:	4298      	cmp	r0, r3
 8001e96:	d008      	beq.n	8001eaa <TIM_TimeBaseInit+0x4e>
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <TIM_TimeBaseInit+0x84>)
 8001e9a:	4290      	cmp	r0, r2
 8001e9c:	d005      	beq.n	8001eaa <TIM_TimeBaseInit+0x4e>
 8001e9e:	4c11      	ldr	r4, [pc, #68]	; (8001ee4 <TIM_TimeBaseInit+0x88>)
 8001ea0:	42a0      	cmp	r0, r4
 8001ea2:	d002      	beq.n	8001eaa <TIM_TimeBaseInit+0x4e>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	8283      	strh	r3, [r0, #20]
}
 8001ea8:	bd10      	pop	{r4, pc}
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001eaa:	7a89      	ldrb	r1, [r1, #10]
 8001eac:	8601      	strh	r1, [r0, #48]	; 0x30
 8001eae:	e7f9      	b.n	8001ea4 <TIM_TimeBaseInit+0x48>
  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001eb0:	2270      	movs	r2, #112	; 0x70
 8001eb2:	4393      	bics	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001eb4:	884c      	ldrh	r4, [r1, #2]
  }
 
  if(TIMx != TIM6)
 8001eb6:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <TIM_TimeBaseInit+0x78>)

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001eb8:	4323      	orrs	r3, r4
  }
 
  if(TIMx != TIM6)
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	d1dd      	bne.n	8001e7a <TIM_TimeBaseInit+0x1e>
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001ebe:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001ec0:	684b      	ldr	r3, [r1, #4]
 8001ec2:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001ec4:	8809      	ldrh	r1, [r1, #0]
 8001ec6:	8501      	strh	r1, [r0, #40]	; 0x28
 8001ec8:	e7ec      	b.n	8001ea4 <TIM_TimeBaseInit+0x48>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40001000 	.word	0x40001000
 8001ed8:	fffffcff 	.word	0xfffffcff
 8001edc:	40014000 	.word	0x40014000
 8001ee0:	40014400 	.word	0x40014400
 8001ee4:	40014800 	.word	0x40014800

08001ee8 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001ee8:	2301      	movs	r3, #1
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001eea:	2200      	movs	r2, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001eec:	4259      	negs	r1, r3
 8001eee:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001ef0:	8002      	strh	r2, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001ef2:	8102      	strh	r2, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001ef4:	8042      	strh	r2, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001ef6:	7282      	strb	r2, [r0, #10]
}
 8001ef8:	4770      	bx	lr
 8001efa:	46c0      	nop			; (mov r8, r8)

08001efc <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001efc:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001efe:	8282      	strh	r2, [r0, #20]
}
 8001f00:	4770      	bx	lr
 8001f02:	46c0      	nop			; (mov r8, r8)

08001f04 <TIM_CounterModeConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  
  tmpcr1 = TIMx->CR1;
 8001f04:	8803      	ldrh	r3, [r0, #0]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001f06:	2270      	movs	r2, #112	; 0x70
 8001f08:	4393      	bics	r3, r2
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8001f0a:	4319      	orrs	r1, r3
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001f0c:	8001      	strh	r1, [r0, #0]
}
 8001f0e:	4770      	bx	lr

08001f10 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001f10:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001f12:	4770      	bx	lr

08001f14 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001f14:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8001f16:	4770      	bx	lr

08001f18 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 8001f18:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8001f1a:	4770      	bx	lr

08001f1c <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8001f1c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8001f1e:	4770      	bx	lr

08001f20 <TIM_UpdateDisableConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f20:	2900      	cmp	r1, #0
 8001f22:	d104      	bne.n	8001f2e <TIM_UpdateDisableConfig+0xe>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8001f24:	8803      	ldrh	r3, [r0, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	4393      	bics	r3, r2
 8001f2a:	8003      	strh	r3, [r0, #0]
  }
}
 8001f2c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001f2e:	8801      	ldrh	r1, [r0, #0]
 8001f30:	2302      	movs	r3, #2
 8001f32:	430b      	orrs	r3, r1
 8001f34:	8003      	strh	r3, [r0, #0]
 8001f36:	e7f9      	b.n	8001f2c <TIM_UpdateDisableConfig+0xc>

08001f38 <TIM_UpdateRequestConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001f38:	2900      	cmp	r1, #0
 8001f3a:	d104      	bne.n	8001f46 <TIM_UpdateRequestConfig+0xe>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8001f3c:	8803      	ldrh	r3, [r0, #0]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	4393      	bics	r3, r2
 8001f42:	8003      	strh	r3, [r0, #0]
  }
}
 8001f44:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001f46:	8801      	ldrh	r1, [r0, #0]
 8001f48:	2304      	movs	r3, #4
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	8003      	strh	r3, [r0, #0]
 8001f4e:	e7f9      	b.n	8001f44 <TIM_UpdateRequestConfig+0xc>

08001f50 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f50:	2900      	cmp	r1, #0
 8001f52:	d104      	bne.n	8001f5e <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001f54:	8803      	ldrh	r3, [r0, #0]
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	4393      	bics	r3, r2
 8001f5a:	8003      	strh	r3, [r0, #0]
  }
}
 8001f5c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001f5e:	8801      	ldrh	r1, [r0, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	430b      	orrs	r3, r1
 8001f64:	8003      	strh	r3, [r0, #0]
 8001f66:	e7f9      	b.n	8001f5c <TIM_ARRPreloadConfig+0xc>

08001f68 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8001f68:	8803      	ldrh	r3, [r0, #0]
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	8003      	strh	r3, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8001f70:	8803      	ldrh	r3, [r0, #0]
 8001f72:	4319      	orrs	r1, r3
 8001f74:	8001      	strh	r1, [r0, #0]
}
 8001f76:	4770      	bx	lr

08001f78 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8001f78:	8802      	ldrh	r2, [r0, #0]
 8001f7a:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <TIM_SetClockDivision+0x10>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	8003      	strh	r3, [r0, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8001f80:	8802      	ldrh	r2, [r0, #0]
 8001f82:	4311      	orrs	r1, r2
 8001f84:	8001      	strh	r1, [r0, #0]
}
 8001f86:	4770      	bx	lr
 8001f88:	fffffcff 	.word	0xfffffcff

08001f8c <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f8c:	2900      	cmp	r1, #0
 8001f8e:	d104      	bne.n	8001f9a <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001f90:	8803      	ldrh	r3, [r0, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	4393      	bics	r3, r2
 8001f96:	8003      	strh	r3, [r0, #0]
  }
}
 8001f98:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001f9a:	8801      	ldrh	r1, [r0, #0]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	8003      	strh	r3, [r0, #0]
 8001fa2:	e7f9      	b.n	8001f98 <TIM_Cmd+0xc>

08001fa4 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8001fa4:	880b      	ldrh	r3, [r1, #0]
 8001fa6:	884a      	ldrh	r2, [r1, #2]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	888b      	ldrh	r3, [r1, #4]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	88cb      	ldrh	r3, [r1, #6]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	890b      	ldrh	r3, [r1, #8]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	894b      	ldrh	r3, [r1, #10]
 8001fb8:	8989      	ldrh	r1, [r1, #12]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	2344      	movs	r3, #68	; 0x44
 8001fc0:	52c2      	strh	r2, [r0, r3]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8001fc2:	4770      	bx	lr

08001fc4 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8001fc8:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8001fca:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8001fcc:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8001fce:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8001fd0:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8001fd2:	8183      	strh	r3, [r0, #12]
}
 8001fd4:	4770      	bx	lr
 8001fd6:	46c0      	nop			; (mov r8, r8)

08001fd8 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001fd8:	2344      	movs	r3, #68	; 0x44
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001fda:	2900      	cmp	r1, #0
 8001fdc:	d104      	bne.n	8001fe8 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001fde:	5ac2      	ldrh	r2, [r0, r3]
 8001fe0:	0451      	lsls	r1, r2, #17
 8001fe2:	0c4a      	lsrs	r2, r1, #17
 8001fe4:	52c2      	strh	r2, [r0, r3]
  }  
}
 8001fe6:	4770      	bx	lr
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001fe8:	5ac1      	ldrh	r1, [r0, r3]
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	0212      	lsls	r2, r2, #8
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	52c2      	strh	r2, [r0, r3]
 8001ff2:	e7f8      	b.n	8001fe6 <TIM_CtrlPWMOutputs+0xe>

08001ff4 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001ff6:	8c03      	ldrh	r3, [r0, #32]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4393      	bics	r3, r2
 8001ffc:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffe:	8c05      	ldrh	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002000:	8882      	ldrh	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002002:	8b04      	ldrh	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8002004:	2673      	movs	r6, #115	; 0x73

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002006:	880b      	ldrh	r3, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8002008:	43b4      	bics	r4, r6

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800200a:	2602      	movs	r6, #2
 800200c:	43b5      	bics	r5, r6
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800200e:	431c      	orrs	r4, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002010:	884e      	ldrh	r6, [r1, #2]
 8002012:	898b      	ldrh	r3, [r1, #12]
 8002014:	4333      	orrs	r3, r6
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002016:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8002018:	4d10      	ldr	r5, [pc, #64]	; (800205c <TIM_OC1Init+0x68>)
 800201a:	42a8      	cmp	r0, r5
 800201c:	d00e      	beq.n	800203c <TIM_OC1Init+0x48>
 800201e:	4e10      	ldr	r6, [pc, #64]	; (8002060 <TIM_OC1Init+0x6c>)
 8002020:	42b0      	cmp	r0, r6
 8002022:	d00b      	beq.n	800203c <TIM_OC1Init+0x48>
 8002024:	4d0f      	ldr	r5, [pc, #60]	; (8002064 <TIM_OC1Init+0x70>)
 8002026:	42a8      	cmp	r0, r5
 8002028:	d008      	beq.n	800203c <TIM_OC1Init+0x48>
 800202a:	4e0f      	ldr	r6, [pc, #60]	; (8002068 <TIM_OC1Init+0x74>)
 800202c:	42b0      	cmp	r0, r6
 800202e:	d005      	beq.n	800203c <TIM_OC1Init+0x48>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8002030:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002032:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002034:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8002036:	6341      	str	r1, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002038:	8403      	strh	r3, [r0, #32]
}
 800203a:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800203c:	2508      	movs	r5, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800203e:	89ce      	ldrh	r6, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8002040:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002042:	4333      	orrs	r3, r6
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8002044:	2504      	movs	r5, #4
 8002046:	43ab      	bics	r3, r5
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002048:	888e      	ldrh	r6, [r1, #4]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800204a:	4d08      	ldr	r5, [pc, #32]	; (800206c <TIM_OC1Init+0x78>)
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800204c:	4333      	orrs	r3, r6
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800204e:	402a      	ands	r2, r5
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002050:	8a4e      	ldrh	r6, [r1, #18]
 8002052:	8a0d      	ldrh	r5, [r1, #16]
 8002054:	4335      	orrs	r5, r6
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8002056:	432a      	orrs	r2, r5
 8002058:	e7ea      	b.n	8002030 <TIM_OC1Init+0x3c>
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40014000 	.word	0x40014000
 8002064:	40014400 	.word	0x40014400
 8002068:	40014800 	.word	0x40014800
 800206c:	fffffcff 	.word	0xfffffcff

08002070 <TIM_OC2Init>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8002070:	8c03      	ldrh	r3, [r0, #32]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002072:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8002074:	2210      	movs	r2, #16
 8002076:	4393      	bics	r3, r2
 8002078:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800207a:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 800207c:	4c1d      	ldr	r4, [pc, #116]	; (80020f4 <TIM_OC2Init+0x84>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800207e:	8883      	ldrh	r3, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002080:	8b05      	ldrh	r5, [r0, #24]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8002082:	402c      	ands	r4, r5
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002084:	880d      	ldrh	r5, [r1, #0]
 8002086:	022d      	lsls	r5, r5, #8
 8002088:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800208a:	2520      	movs	r5, #32
 800208c:	43aa      	bics	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800208e:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002090:	b2a4      	uxth	r4, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002092:	012d      	lsls	r5, r5, #4
 8002094:	432a      	orrs	r2, r5
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002096:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002098:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800209a:	012d      	lsls	r5, r5, #4
 800209c:	432a      	orrs	r2, r5
    
  if((TIMx == TIM1) || (TIMx == TIM15))
 800209e:	4d16      	ldr	r5, [pc, #88]	; (80020f8 <TIM_OC2Init+0x88>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80020a0:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM15))
 80020a2:	42a8      	cmp	r0, r5
 80020a4:	d00f      	beq.n	80020c6 <TIM_OC2Init+0x56>
 80020a6:	4d15      	ldr	r5, [pc, #84]	; (80020fc <TIM_OC2Init+0x8c>)
 80020a8:	42a8      	cmp	r0, r5
 80020aa:	d005      	beq.n	80020b8 <TIM_OC2Init+0x48>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80020ac:	6889      	ldr	r1, [r1, #8]
      /* Set the Output N Idle state */
      tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    }
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ae:	8083      	strh	r3, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b0:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80020b2:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b4:	8402      	strh	r2, [r0, #32]
}
 80020b6:	bd30      	pop	{r4, r5, pc}
  {
    /* Check the parameters */
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Ouput Compare State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 80020b8:	4d11      	ldr	r5, [pc, #68]	; (8002100 <TIM_OC2Init+0x90>)
 80020ba:	402b      	ands	r3, r5
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80020bc:	8a0d      	ldrh	r5, [r1, #16]
 80020be:	00ad      	lsls	r5, r5, #2
 80020c0:	432b      	orrs	r3, r5
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	e7f2      	b.n	80020ac <TIM_OC2Init+0x3c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Ouput Compare State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 80020c6:	4d0e      	ldr	r5, [pc, #56]	; (8002100 <TIM_OC2Init+0x90>)
 80020c8:	402b      	ands	r3, r5
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80020ca:	8a0d      	ldrh	r5, [r1, #16]
 80020cc:	00ad      	lsls	r5, r5, #2
 80020ce:	432b      	orrs	r3, r5
      assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
      assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
      assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
      
      /* Reset the Output N Polarity level */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80020d0:	2580      	movs	r5, #128	; 0x80
 80020d2:	43aa      	bics	r2, r5
      /* Set the Output N Polarity */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80020d4:	89cd      	ldrh	r5, [r1, #14]
 80020d6:	012d      	lsls	r5, r5, #4
 80020d8:	432a      	orrs	r2, r5
      
      /* Reset the Output N State */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 80020da:	4d0a      	ldr	r5, [pc, #40]	; (8002104 <TIM_OC2Init+0x94>)
 80020dc:	402a      	ands	r2, r5
      /* Set the Output N State */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80020de:	888d      	ldrh	r5, [r1, #4]
 80020e0:	012d      	lsls	r5, r5, #4
 80020e2:	432a      	orrs	r2, r5
      
      /* Reset the Output Compare N IDLE State */
      tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 80020e4:	4d08      	ldr	r5, [pc, #32]	; (8002108 <TIM_OC2Init+0x98>)
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
      
      /* Reset the Output N State */
      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
      /* Set the Output N State */
      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80020e6:	b292      	uxth	r2, r2
      
      /* Reset the Output Compare N IDLE State */
      tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 80020e8:	402b      	ands	r3, r5
      
      /* Set the Output N Idle state */
      tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80020ea:	8a4d      	ldrh	r5, [r1, #18]
 80020ec:	00ad      	lsls	r5, r5, #2
 80020ee:	432b      	orrs	r3, r5
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	e7db      	b.n	80020ac <TIM_OC2Init+0x3c>
 80020f4:	ffff8cff 	.word	0xffff8cff
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40014000 	.word	0x40014000
 8002100:	fffffbff 	.word	0xfffffbff
 8002104:	0000ffbf 	.word	0x0000ffbf
 8002108:	0000f7ff 	.word	0x0000f7ff

0800210c <TIM_OC3Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800210c:	8c02      	ldrh	r2, [r0, #32]
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <TIM_OC3Init+0x6c>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002110:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8002112:	4013      	ands	r3, r2
 8002114:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002116:	8c05      	ldrh	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002118:	8882      	ldrh	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800211a:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 800211c:	2373      	movs	r3, #115	; 0x73
 800211e:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002120:	880b      	ldrh	r3, [r1, #0]
 8002122:	431c      	orrs	r4, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <TIM_OC3Init+0x70>)
 8002126:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002128:	898d      	ldrh	r5, [r1, #12]
 800212a:	022d      	lsls	r5, r5, #8
 800212c:	432b      	orrs	r3, r5
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800212e:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002130:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002132:	022d      	lsls	r5, r5, #8
 8002134:	432b      	orrs	r3, r5
    
  if(TIMx == TIM1)
 8002136:	4d12      	ldr	r5, [pc, #72]	; (8002180 <TIM_OC3Init+0x74>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002138:	b29b      	uxth	r3, r3
    
  if(TIMx == TIM1)
 800213a:	42a8      	cmp	r0, r5
 800213c:	d005      	beq.n	800214a <TIM_OC3Init+0x3e>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800213e:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002140:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002142:	8384      	strh	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002144:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002146:	8403      	strh	r3, [r0, #32]
}
 8002148:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 800214a:	4d0e      	ldr	r5, [pc, #56]	; (8002184 <TIM_OC3Init+0x78>)
 800214c:	402b      	ands	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800214e:	89cd      	ldrh	r5, [r1, #14]
 8002150:	022d      	lsls	r5, r5, #8
 8002152:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8002154:	4d0c      	ldr	r5, [pc, #48]	; (8002188 <TIM_OC3Init+0x7c>)
 8002156:	402b      	ands	r3, r5
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002158:	888d      	ldrh	r5, [r1, #4]
 800215a:	022d      	lsls	r5, r5, #8
 800215c:	432b      	orrs	r3, r5
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800215e:	4d0b      	ldr	r5, [pc, #44]	; (800218c <TIM_OC3Init+0x80>)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002160:	b29b      	uxth	r3, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8002162:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002164:	8a0d      	ldrh	r5, [r1, #16]
 8002166:	012d      	lsls	r5, r5, #4
 8002168:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800216a:	8a4d      	ldrh	r5, [r1, #18]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800216c:	b292      	uxth	r2, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800216e:	012d      	lsls	r5, r5, #4
 8002170:	432a      	orrs	r2, r5
 8002172:	b292      	uxth	r2, r2
 8002174:	e7e3      	b.n	800213e <TIM_OC3Init+0x32>
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	fffffeff 	.word	0xfffffeff
 800217c:	fffffdff 	.word	0xfffffdff
 8002180:	40012c00 	.word	0x40012c00
 8002184:	fffff7ff 	.word	0xfffff7ff
 8002188:	0000fbff 	.word	0x0000fbff
 800218c:	ffffcfff 	.word	0xffffcfff

08002190 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8002190:	8c02      	ldrh	r2, [r0, #32]
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <TIM_OC4Init+0x50>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002194:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8002196:	4013      	ands	r3, r2
 8002198:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800219a:	8c05      	ldrh	r5, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <TIM_OC4Init+0x54>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800219e:	8883      	ldrh	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021a0:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80021a2:	4014      	ands	r4, r2
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021a4:	880a      	ldrh	r2, [r1, #0]
 80021a6:	0212      	lsls	r2, r2, #8
 80021a8:	4314      	orrs	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80021aa:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <TIM_OC4Init+0x58>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80021ac:	b2a4      	uxth	r4, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80021ae:	402a      	ands	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80021b0:	898d      	ldrh	r5, [r1, #12]
 80021b2:	032d      	lsls	r5, r5, #12
 80021b4:	432a      	orrs	r2, r5
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80021b6:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80021b8:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80021ba:	032d      	lsls	r5, r5, #12
 80021bc:	432a      	orrs	r2, r5
    
  if(TIMx == TIM1)
 80021be:	4d0b      	ldr	r5, [pc, #44]	; (80021ec <TIM_OC4Init+0x5c>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80021c0:	b292      	uxth	r2, r2
    
  if(TIMx == TIM1)
 80021c2:	42a8      	cmp	r0, r5
 80021c4:	d005      	beq.n	80021d2 <TIM_OC4Init+0x42>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80021c6:	6889      	ldr	r1, [r1, #8]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021c8:	8083      	strh	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80021ca:	8384      	strh	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80021cc:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ce:	8402      	strh	r2, [r0, #32]
}
 80021d0:	bd30      	pop	{r4, r5, pc}
    
  if(TIMx == TIM1)
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 80021d2:	4d07      	ldr	r5, [pc, #28]	; (80021f0 <TIM_OC4Init+0x60>)
 80021d4:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80021d6:	8a0d      	ldrh	r5, [r1, #16]
 80021d8:	01ad      	lsls	r5, r5, #6
 80021da:	432b      	orrs	r3, r5
 80021dc:	b29b      	uxth	r3, r3
 80021de:	e7f2      	b.n	80021c6 <TIM_OC4Init+0x36>
 80021e0:	ffffefff 	.word	0xffffefff
 80021e4:	ffff8cff 	.word	0xffff8cff
 80021e8:	ffffdfff 	.word	0xffffdfff
 80021ec:	40012c00 	.word	0x40012c00
 80021f0:	ffffbfff 	.word	0xffffbfff

080021f4 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80021f4:	2300      	movs	r3, #0
 80021f6:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80021f8:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80021fa:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 80021fc:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80021fe:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002200:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002202:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002204:	8243      	strh	r3, [r0, #18]
}
 8002206:	4770      	bx	lr

08002208 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002208:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800220a:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800220c:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800220e:	408c      	lsls	r4, r1
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002210:	1c05      	adds	r5, r0, #0

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002212:	43a3      	bics	r3, r4
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002214:	3518      	adds	r5, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002216:	8403      	strh	r3, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002218:	2900      	cmp	r1, #0
 800221a:	d00f      	beq.n	800223c <TIM_SelectOCxM+0x34>
 800221c:	2908      	cmp	r1, #8
 800221e:	d00d      	beq.n	800223c <TIM_SelectOCxM+0x34>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002220:	3904      	subs	r1, #4
 8002222:	b289      	uxth	r1, r1
 8002224:	0848      	lsrs	r0, r1, #1
 8002226:	1945      	adds	r5, r0, r5

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8002228:	682c      	ldr	r4, [r5, #0]
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <TIM_SelectOCxM+0x48>)
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800222c:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 800222e:	4023      	ands	r3, r4
 8002230:	602b      	str	r3, [r5, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002232:	6829      	ldr	r1, [r5, #0]
 8002234:	b290      	uxth	r0, r2
 8002236:	4308      	orrs	r0, r1
 8002238:	6028      	str	r0, [r5, #0]
 800223a:	e008      	b.n	800224e <TIM_SelectOCxM+0x46>
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 800223c:	084c      	lsrs	r4, r1, #1
 800223e:	1965      	adds	r5, r4, r5

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	2170      	movs	r1, #112	; 0x70
 8002244:	438b      	bics	r3, r1
 8002246:	602b      	str	r3, [r5, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002248:	6828      	ldr	r0, [r5, #0]
 800224a:	4302      	orrs	r2, r0
 800224c:	602a      	str	r2, [r5, #0]
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  }
}
 800224e:	bd30      	pop	{r4, r5, pc}
 8002250:	ffff8fff 	.word	0xffff8fff

08002254 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8002254:	6341      	str	r1, [r0, #52]	; 0x34
}
 8002256:	4770      	bx	lr

08002258 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002258:	6381      	str	r1, [r0, #56]	; 0x38
}
 800225a:	4770      	bx	lr

0800225c <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800225c:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800225e:	4770      	bx	lr

08002260 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8002260:	6401      	str	r1, [r0, #64]	; 0x40
}
 8002262:	4770      	bx	lr

08002264 <TIM_ForcedOC1Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002264:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8002266:	2270      	movs	r2, #112	; 0x70
 8002268:	4393      	bics	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800226a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800226c:	8301      	strh	r1, [r0, #24]
}
 800226e:	4770      	bx	lr

08002270 <TIM_ForcedOC2Config>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr1 = TIMx->CCMR1;
 8002270:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <TIM_ForcedOC2Config+0x14>)
 8002274:	401a      	ands	r2, r3
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002276:	020b      	lsls	r3, r1, #8
 8002278:	1c11      	adds	r1, r2, #0
 800227a:	4319      	orrs	r1, r3
 800227c:	b28a      	uxth	r2, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800227e:	8302      	strh	r2, [r0, #24]
}
 8002280:	4770      	bx	lr
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	ffff8fff 	.word	0xffff8fff

08002288 <TIM_ForcedOC3Config>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 8002288:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 800228a:	2270      	movs	r2, #112	; 0x70
 800228c:	4393      	bics	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800228e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002290:	8381      	strh	r1, [r0, #28]
}
 8002292:	4770      	bx	lr

08002294 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 8002294:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <TIM_ForcedOC4Config+0x14>)
 8002298:	401a      	ands	r2, r3
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800229a:	020b      	lsls	r3, r1, #8
 800229c:	1c11      	adds	r1, r2, #0
 800229e:	4319      	orrs	r1, r3
 80022a0:	b28a      	uxth	r2, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80022a2:	8382      	strh	r2, [r0, #28]
}
 80022a4:	4770      	bx	lr
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	ffff8fff 	.word	0xffff8fff

080022ac <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80022ac:	2900      	cmp	r1, #0
 80022ae:	d104      	bne.n	80022ba <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 80022b0:	8883      	ldrh	r3, [r0, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4393      	bics	r3, r2
 80022b6:	8083      	strh	r3, [r0, #4]
  }
}
 80022b8:	4770      	bx	lr
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80022ba:	8881      	ldrh	r1, [r0, #4]
 80022bc:	2301      	movs	r3, #1
 80022be:	430b      	orrs	r3, r1
 80022c0:	8083      	strh	r3, [r0, #4]
 80022c2:	e7f9      	b.n	80022b8 <TIM_CCPreloadControl+0xc>

080022c4 <TIM_OC1PreloadConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 80022c4:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80022c6:	2208      	movs	r2, #8
 80022c8:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80022ca:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80022cc:	8301      	strh	r1, [r0, #24]
}
 80022ce:	4770      	bx	lr

080022d0 <TIM_OC2PreloadConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 80022d0:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <TIM_OC2PreloadConfig+0x14>)
 80022d4:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80022d6:	020b      	lsls	r3, r1, #8
 80022d8:	1c11      	adds	r1, r2, #0
 80022da:	4319      	orrs	r1, r3
 80022dc:	b28a      	uxth	r2, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80022de:	8302      	strh	r2, [r0, #24]
}
 80022e0:	4770      	bx	lr
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	fffff7ff 	.word	0xfffff7ff

080022e8 <TIM_OC3PreloadConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 80022e8:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 80022ea:	2208      	movs	r2, #8
 80022ec:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80022ee:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80022f0:	8381      	strh	r1, [r0, #28]
}
 80022f2:	4770      	bx	lr

080022f4 <TIM_OC4PreloadConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 80022f4:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <TIM_OC4PreloadConfig+0x14>)
 80022f8:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80022fa:	020b      	lsls	r3, r1, #8
 80022fc:	1c11      	adds	r1, r2, #0
 80022fe:	4319      	orrs	r1, r3
 8002300:	b28a      	uxth	r2, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002302:	8382      	strh	r2, [r0, #28]
}
 8002304:	4770      	bx	lr
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	fffff7ff 	.word	0xfffff7ff

0800230c <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800230c:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 800230e:	2204      	movs	r2, #4
 8002310:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002312:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002314:	8301      	strh	r1, [r0, #24]
}
 8002316:	4770      	bx	lr

08002318 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002318:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <TIM_OC2FastConfig+0x14>)
 800231c:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800231e:	020b      	lsls	r3, r1, #8
 8002320:	1c11      	adds	r1, r2, #0
 8002322:	4319      	orrs	r1, r3
 8002324:	b28a      	uxth	r2, r1
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002326:	8302      	strh	r2, [r0, #24]
}
 8002328:	4770      	bx	lr
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	fffffbff 	.word	0xfffffbff

08002330 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002330:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8002332:	2204      	movs	r2, #4
 8002334:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002336:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002338:	8381      	strh	r1, [r0, #28]
}
 800233a:	4770      	bx	lr

0800233c <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800233c:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <TIM_OC4FastConfig+0x14>)
 8002340:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002342:	020b      	lsls	r3, r1, #8
 8002344:	1c11      	adds	r1, r2, #0
 8002346:	4319      	orrs	r1, r3
 8002348:	b28a      	uxth	r2, r1
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800234a:	8382      	strh	r2, [r0, #28]
}
 800234c:	4770      	bx	lr
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	fffffbff 	.word	0xfffffbff

08002354 <TIM_ClearOC1Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8002354:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800235a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800235c:	8301      	strh	r1, [r0, #24]
}
 800235e:	4770      	bx	lr

08002360 <TIM_ClearOC2Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8002360:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002362:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8002364:	045a      	lsls	r2, r3, #17
 8002366:	0c53      	lsrs	r3, r2, #17
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002368:	4319      	orrs	r1, r3
 800236a:	b28a      	uxth	r2, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800236c:	8302      	strh	r2, [r0, #24]
}
 800236e:	4770      	bx	lr

08002370 <TIM_ClearOC3Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8002370:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002376:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002378:	8381      	strh	r1, [r0, #28]
}
 800237a:	4770      	bx	lr

0800237c <TIM_ClearOC4Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 800237c:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800237e:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8002380:	045a      	lsls	r2, r3, #17
 8002382:	0c53      	lsrs	r3, r2, #17
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002384:	4319      	orrs	r1, r3
 8002386:	b28a      	uxth	r2, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002388:	8382      	strh	r2, [r0, #28]
}
 800238a:	4770      	bx	lr

0800238c <TIM_OC1PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 800238c:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 800238e:	2202      	movs	r2, #2
 8002390:	4393      	bics	r3, r2
  tmpccer |= TIM_OCPolarity;
 8002392:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002394:	8401      	strh	r1, [r0, #32]
}
 8002396:	4770      	bx	lr

08002398 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002398:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 800239a:	2208      	movs	r2, #8
 800239c:	4393      	bics	r3, r2
  tmpccer |= TIM_OCNPolarity;
 800239e:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023a0:	8401      	strh	r1, [r0, #32]
}
 80023a2:	4770      	bx	lr

080023a4 <TIM_OC2PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 80023a4:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 80023a6:	2320      	movs	r3, #32
 80023a8:	439a      	bics	r2, r3
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 80023aa:	010b      	lsls	r3, r1, #4
 80023ac:	1c11      	adds	r1, r2, #0
 80023ae:	4319      	orrs	r1, r3
 80023b0:	b28a      	uxth	r2, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023b2:	8402      	strh	r2, [r0, #32]
}
 80023b4:	4770      	bx	lr
 80023b6:	46c0      	nop			; (mov r8, r8)

080023b8 <TIM_OC2NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80023b8:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	439a      	bics	r2, r3
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80023be:	010b      	lsls	r3, r1, #4
 80023c0:	1c11      	adds	r1, r2, #0
 80023c2:	4319      	orrs	r1, r3
 80023c4:	b28a      	uxth	r2, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023c6:	8402      	strh	r2, [r0, #32]
}
 80023c8:	4770      	bx	lr
 80023ca:	46c0      	nop			; (mov r8, r8)

080023cc <TIM_OC3PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 80023cc:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <TIM_OC3PolarityConfig+0x14>)
 80023d0:	401a      	ands	r2, r3
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80023d2:	020b      	lsls	r3, r1, #8
 80023d4:	1c11      	adds	r1, r2, #0
 80023d6:	4319      	orrs	r1, r3
 80023d8:	b28a      	uxth	r2, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023da:	8402      	strh	r2, [r0, #32]
}
 80023dc:	4770      	bx	lr
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	fffffdff 	.word	0xfffffdff

080023e4 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80023e4:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <TIM_OC3NPolarityConfig+0x14>)
 80023e8:	401a      	ands	r2, r3
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80023ea:	020b      	lsls	r3, r1, #8
 80023ec:	1c11      	adds	r1, r2, #0
 80023ee:	4319      	orrs	r1, r3
 80023f0:	b28a      	uxth	r2, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80023f2:	8402      	strh	r2, [r0, #32]
}
 80023f4:	4770      	bx	lr
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	fffff7ff 	.word	0xfffff7ff

080023fc <TIM_OC4PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 80023fc:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <TIM_OC4PolarityConfig+0x14>)
 8002400:	401a      	ands	r2, r3
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002402:	030b      	lsls	r3, r1, #12
 8002404:	1c11      	adds	r1, r2, #0
 8002406:	4319      	orrs	r1, r3
 8002408:	b28a      	uxth	r2, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800240a:	8402      	strh	r2, [r0, #32]
}
 800240c:	4770      	bx	lr
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	ffffdfff 	.word	0xffffdfff

08002414 <TIM_SelectOCREFClear>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8002414:	8903      	ldrh	r3, [r0, #8]
 8002416:	2208      	movs	r2, #8
 8002418:	4393      	bics	r3, r2
 800241a:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 800241c:	8903      	ldrh	r3, [r0, #8]
 800241e:	4319      	orrs	r1, r3
 8002420:	8101      	strh	r1, [r0, #8]
}
 8002422:	4770      	bx	lr

08002424 <TIM_CCxCmd>:
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002424:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002426:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx)); 
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002428:	2401      	movs	r4, #1
 800242a:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800242c:	43a3      	bics	r3, r4
 800242e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002430:	8c03      	ldrh	r3, [r0, #32]
 8002432:	408a      	lsls	r2, r1
 8002434:	1c11      	adds	r1, r2, #0
 8002436:	4319      	orrs	r1, r3
 8002438:	b28a      	uxth	r2, r1
 800243a:	8402      	strh	r2, [r0, #32]
}
 800243c:	bd10      	pop	{r4, pc}
 800243e:	46c0      	nop			; (mov r8, r8)

08002440 <TIM_CCxNCmd>:
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002440:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002442:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002444:	2404      	movs	r4, #4
 8002446:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002448:	43a3      	bics	r3, r4
 800244a:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800244c:	8c03      	ldrh	r3, [r0, #32]
 800244e:	408a      	lsls	r2, r1
 8002450:	1c11      	adds	r1, r2, #0
 8002452:	4319      	orrs	r1, r3
 8002454:	b28a      	uxth	r2, r1
 8002456:	8402      	strh	r2, [r0, #32]
}
 8002458:	bd10      	pop	{r4, pc}
 800245a:	46c0      	nop			; (mov r8, r8)

0800245c <TIM_SelectCOM>:
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800245c:	2900      	cmp	r1, #0
 800245e:	d104      	bne.n	800246a <TIM_SelectCOM+0xe>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8002460:	8883      	ldrh	r3, [r0, #4]
 8002462:	2204      	movs	r2, #4
 8002464:	4393      	bics	r3, r2
 8002466:	8083      	strh	r3, [r0, #4]
  }
}
 8002468:	4770      	bx	lr
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800246a:	8881      	ldrh	r1, [r0, #4]
 800246c:	2304      	movs	r3, #4
 800246e:	430b      	orrs	r3, r1
 8002470:	8083      	strh	r3, [r0, #4]
 8002472:	e7f9      	b.n	8002468 <TIM_SelectCOM+0xc>

08002474 <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002476:	880b      	ldrh	r3, [r1, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02a      	beq.n	80024d2 <TIM_ICInit+0x5e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800247c:	2b04      	cmp	r3, #4
 800247e:	d048      	beq.n	8002512 <TIM_ICInit+0x9e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002480:	2b08      	cmp	r3, #8
 8002482:	d100      	bne.n	8002486 <TIM_ICInit+0x12>
 8002484:	e06a      	b.n	800255c <TIM_ICInit+0xe8>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8002486:	8c05      	ldrh	r5, [r0, #32]
 8002488:	4a45      	ldr	r2, [pc, #276]	; (80025a0 <TIM_ICInit+0x12c>)
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800248a:	884b      	ldrh	r3, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 800248c:	402a      	ands	r2, r5
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800248e:	888e      	ldrh	r6, [r1, #4]
 8002490:	890c      	ldrh	r4, [r1, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8002492:	8402      	strh	r2, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002494:	8b87      	ldrh	r7, [r0, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002496:	4a43      	ldr	r2, [pc, #268]	; (80025a4 <TIM_ICInit+0x130>)
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8002498:	0236      	lsls	r6, r6, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 800249a:	403a      	ands	r2, r7
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 800249c:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800249e:	4332      	orrs	r2, r6
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80024a0:	4e41      	ldr	r6, [pc, #260]	; (80025a8 <TIM_ICInit+0x134>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80024a2:	b297      	uxth	r7, r2
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 80024a4:	0324      	lsls	r4, r4, #12
 80024a6:	4327      	orrs	r7, r4

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80024a8:	031b      	lsls	r3, r3, #12
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80024aa:	402e      	ands	r6, r5
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 80024ac:	b2ba      	uxth	r2, r7
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80024ae:	431e      	orrs	r6, r3
 80024b0:	2780      	movs	r7, #128	; 0x80
 80024b2:	b2b5      	uxth	r5, r6
 80024b4:	017c      	lsls	r4, r7, #5
 80024b6:	432c      	orrs	r4, r5
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80024b8:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 80024ba:	8404      	strh	r4, [r0, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80024bc:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80024be:	4a3b      	ldr	r2, [pc, #236]	; (80025ac <TIM_ICInit+0x138>)
 80024c0:	8b81      	ldrh	r1, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80024c2:	021d      	lsls	r5, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80024c4:	400a      	ands	r2, r1
 80024c6:	8382      	strh	r2, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80024c8:	8b86      	ldrh	r6, [r0, #28]
 80024ca:	4335      	orrs	r5, r6
 80024cc:	b2af      	uxth	r7, r5
 80024ce:	8387      	strh	r7, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80024d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80024d2:	8c02      	ldrh	r2, [r0, #32]
 80024d4:	2401      	movs	r4, #1
 80024d6:	43a2      	bics	r2, r4

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80024d8:	884d      	ldrh	r5, [r1, #2]
 80024da:	888b      	ldrh	r3, [r1, #4]
 80024dc:	890e      	ldrh	r6, [r1, #8]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80024de:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e0:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80024e2:	27f3      	movs	r7, #243	; 0xf3
 80024e4:	43ba      	bics	r2, r7
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80024e6:	0136      	lsls	r6, r6, #4
 80024e8:	4332      	orrs	r2, r6
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80024ea:	8c04      	ldrh	r4, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80024ec:	b292      	uxth	r2, r2
 80024ee:	431a      	orrs	r2, r3
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80024f0:	2701      	movs	r7, #1
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80024f2:	230a      	movs	r3, #10
 80024f4:	439c      	bics	r4, r3
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80024f6:	432f      	orrs	r7, r5
 80024f8:	4327      	orrs	r7, r4
 80024fa:	b2bd      	uxth	r5, r7
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024fc:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024fe:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002500:	8b06      	ldrh	r6, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002502:	88cc      	ldrh	r4, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002504:	210c      	movs	r1, #12
 8002506:	438e      	bics	r6, r1
 8002508:	8306      	strh	r6, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800250a:	8b02      	ldrh	r2, [r0, #24]
 800250c:	4314      	orrs	r4, r2
 800250e:	8304      	strh	r4, [r0, #24]
 8002510:	e7de      	b.n	80024d0 <TIM_ICInit+0x5c>
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8002512:	8c05      	ldrh	r5, [r0, #32]
 8002514:	2310      	movs	r3, #16
 8002516:	439d      	bics	r5, r3
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002518:	884c      	ldrh	r4, [r1, #2]
 800251a:	888e      	ldrh	r6, [r1, #4]
 800251c:	890f      	ldrh	r7, [r1, #8]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800251e:	8405      	strh	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002520:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002522:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <TIM_ICInit+0x130>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002524:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002526:	4015      	ands	r5, r2
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002528:	033f      	lsls	r7, r7, #12
 800252a:	433d      	orrs	r5, r7
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800252c:	27a0      	movs	r7, #160	; 0xa0
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800252e:	0124      	lsls	r4, r4, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002530:	43bb      	bics	r3, r7
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002532:	b2ad      	uxth	r5, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8002534:	4323      	orrs	r3, r4
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8002536:	0236      	lsls	r6, r6, #8
 8002538:	432e      	orrs	r6, r5
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 800253a:	b29b      	uxth	r3, r3
 800253c:	2510      	movs	r5, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 800253e:	b2b2      	uxth	r2, r6
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8002540:	432b      	orrs	r3, r5
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002542:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002544:	8403      	strh	r3, [r0, #32]
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002546:	88ce      	ldrh	r6, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <TIM_ICInit+0x138>)
 800254a:	8b01      	ldrh	r1, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800254c:	0237      	lsls	r7, r6, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800254e:	400a      	ands	r2, r1
 8002550:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002552:	8b04      	ldrh	r4, [r0, #24]
 8002554:	4327      	orrs	r7, r4
 8002556:	b2bb      	uxth	r3, r7
 8002558:	8303      	strh	r3, [r0, #24]
 800255a:	e7b9      	b.n	80024d0 <TIM_ICInit+0x5c>
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800255c:	8c05      	ldrh	r5, [r0, #32]
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <TIM_ICInit+0x13c>)
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002560:	888c      	ldrh	r4, [r1, #4]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002562:	402a      	ands	r2, r5
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002564:	884b      	ldrh	r3, [r1, #2]
 8002566:	890e      	ldrh	r6, [r1, #8]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8002568:	8402      	strh	r2, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800256a:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800256c:	27f3      	movs	r7, #243	; 0xf3
 800256e:	43ba      	bics	r2, r7
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002570:	0136      	lsls	r6, r6, #4
 8002572:	4332      	orrs	r2, r6
 8002574:	b292      	uxth	r2, r2
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8002576:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002578:	4322      	orrs	r2, r4
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800257a:	4c0e      	ldr	r4, [pc, #56]	; (80025b4 <TIM_ICInit+0x140>)
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800257c:	021b      	lsls	r3, r3, #8
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800257e:	402c      	ands	r4, r5
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 8002580:	431c      	orrs	r4, r3
 8002582:	2780      	movs	r7, #128	; 0x80
 8002584:	b2a5      	uxth	r5, r4
 8002586:	007e      	lsls	r6, r7, #1
 8002588:	432e      	orrs	r6, r5
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800258a:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800258c:	8406      	strh	r6, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800258e:	8b82      	ldrh	r2, [r0, #28]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002590:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8002592:	210c      	movs	r1, #12
 8002594:	438a      	bics	r2, r1
 8002596:	8382      	strh	r2, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002598:	8b84      	ldrh	r4, [r0, #28]
 800259a:	4323      	orrs	r3, r4
 800259c:	8383      	strh	r3, [r0, #28]
 800259e:	e797      	b.n	80024d0 <TIM_ICInit+0x5c>
 80025a0:	ffffefff 	.word	0xffffefff
 80025a4:	00000cff 	.word	0x00000cff
 80025a8:	00005fff 	.word	0x00005fff
 80025ac:	fffff3ff 	.word	0xfffff3ff
 80025b0:	fffffeff 	.word	0xfffffeff
 80025b4:	fffff5ff 	.word	0xfffff5ff

080025b8 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80025b8:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80025ba:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80025bc:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80025be:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80025c0:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80025c2:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80025c4:	8103      	strh	r3, [r0, #8]
}
 80025c6:	4770      	bx	lr

080025c8 <TIM_PWMIConfig>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80025c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ca:	4657      	mov	r7, sl
 80025cc:	464e      	mov	r6, r9
 80025ce:	4645      	mov	r5, r8
 80025d0:	b4e0      	push	{r5, r6, r7}
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80025d2:	884b      	ldrh	r3, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80025d4:	425c      	negs	r4, r3
 80025d6:	415c      	adcs	r4, r3
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80025d8:	888a      	ldrh	r2, [r1, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80025da:	0064      	lsls	r4, r4, #1
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80025dc:	2a01      	cmp	r2, #1
 80025de:	d100      	bne.n	80025e2 <TIM_PWMIConfig+0x1a>
 80025e0:	e097      	b.n	8002712 <TIM_PWMIConfig+0x14a>
 80025e2:	2580      	movs	r5, #128	; 0x80
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80025e4:	2601      	movs	r6, #1
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80025e6:	006f      	lsls	r7, r5, #1
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80025e8:	46b2      	mov	sl, r6
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80025ea:	880d      	ldrh	r5, [r1, #0]
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	d049      	beq.n	8002684 <TIM_PWMIConfig+0xbc>
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80025f0:	8c06      	ldrh	r6, [r0, #32]
 80025f2:	2710      	movs	r7, #16
 80025f4:	43be      	bics	r6, r7
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80025f6:	890d      	ldrh	r5, [r1, #8]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80025f8:	8406      	strh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fa:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
 80025fc:	8c06      	ldrh	r6, [r0, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
 80025fe:	46b8      	mov	r8, r7
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002600:	4f46      	ldr	r7, [pc, #280]	; (800271c <TIM_PWMIConfig+0x154>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002602:	46b4      	mov	ip, r6
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002604:	4646      	mov	r6, r8
 8002606:	403e      	ands	r6, r7
 8002608:	46b1      	mov	r9, r6
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800260a:	464f      	mov	r7, r9
 800260c:	032e      	lsls	r6, r5, #12
 800260e:	433e      	orrs	r6, r7
 8002610:	b2b6      	uxth	r6, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8002612:	0212      	lsls	r2, r2, #8
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8002614:	011f      	lsls	r7, r3, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8002616:	4332      	orrs	r2, r6
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002618:	23a0      	movs	r3, #160	; 0xa0
 800261a:	4666      	mov	r6, ip
 800261c:	439e      	bics	r6, r3
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 800261e:	1c33      	adds	r3, r6, #0
 8002620:	433b      	orrs	r3, r7
 8002622:	b29e      	uxth	r6, r3
 8002624:	2710      	movs	r7, #16
 8002626:	433e      	orrs	r6, r7
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8002628:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800262a:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800262c:	8406      	strh	r6, [r0, #32]
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800262e:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002630:	4a3b      	ldr	r2, [pc, #236]	; (8002720 <TIM_PWMIConfig+0x158>)
 8002632:	8b01      	ldrh	r1, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002634:	021f      	lsls	r7, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002636:	400a      	ands	r2, r1
 8002638:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800263a:	8b06      	ldrh	r6, [r0, #24]
 800263c:	4337      	orrs	r7, r6
 800263e:	b2b9      	uxth	r1, r7
 8002640:	8301      	strh	r1, [r0, #24]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8002642:	8c02      	ldrh	r2, [r0, #32]
 8002644:	2601      	movs	r6, #1
 8002646:	43b2      	bics	r2, r6
 8002648:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800264a:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800264c:	0129      	lsls	r1, r5, #4
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800264e:	25f3      	movs	r5, #243	; 0xf3
 8002650:	43af      	bics	r7, r5
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002652:	8c02      	ldrh	r2, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8002654:	1c3e      	adds	r6, r7, #0
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002656:	430e      	orrs	r6, r1
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002658:	210a      	movs	r1, #10
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800265a:	b2b7      	uxth	r7, r6
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800265c:	438a      	bics	r2, r1
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800265e:	2601      	movs	r6, #1
 8002660:	4332      	orrs	r2, r6
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002662:	4655      	mov	r5, sl
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002664:	4314      	orrs	r4, r2
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002666:	433d      	orrs	r5, r7
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002668:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 800266a:	8404      	strh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800266c:	8b04      	ldrh	r4, [r0, #24]
 800266e:	220c      	movs	r2, #12
 8002670:	4394      	bics	r4, r2
 8002672:	8304      	strh	r4, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8002674:	8b07      	ldrh	r7, [r0, #24]
 8002676:	433b      	orrs	r3, r7
 8002678:	8303      	strh	r3, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800267a:	bc1c      	pop	{r2, r3, r4}
 800267c:	4690      	mov	r8, r2
 800267e:	4699      	mov	r9, r3
 8002680:	46a2      	mov	sl, r4
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002684:	890d      	ldrh	r5, [r1, #8]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8002686:	8c06      	ldrh	r6, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002688:	46a9      	mov	r9, r5
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800268a:	2501      	movs	r5, #1
 800268c:	43ae      	bics	r6, r5
 800268e:	8406      	strh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002690:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 8002692:	8c05      	ldrh	r5, [r0, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
 8002694:	46b4      	mov	ip, r6
  tmpccer = TIMx->CCER;
 8002696:	46aa      	mov	sl, r5
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8002698:	26f3      	movs	r6, #243	; 0xf3
 800269a:	4665      	mov	r5, ip
 800269c:	43b5      	bics	r5, r6
 800269e:	46a8      	mov	r8, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80026a0:	464e      	mov	r6, r9
 80026a2:	0135      	lsls	r5, r6, #4
 80026a4:	4646      	mov	r6, r8
 80026a6:	432e      	orrs	r6, r5
 80026a8:	b2b5      	uxth	r5, r6
 80026aa:	432a      	orrs	r2, r5
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026ac:	260a      	movs	r6, #10
 80026ae:	4655      	mov	r5, sl
 80026b0:	43b5      	bics	r5, r6
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80026b2:	2601      	movs	r6, #1
 80026b4:	46b4      	mov	ip, r6
 80026b6:	4666      	mov	r6, ip
 80026b8:	4333      	orrs	r3, r6
 80026ba:	432b      	orrs	r3, r5
 80026bc:	b29b      	uxth	r3, r3
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026be:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80026c0:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80026c2:	8b02      	ldrh	r2, [r0, #24]
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80026c4:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80026c6:	210c      	movs	r1, #12
 80026c8:	438a      	bics	r2, r1
 80026ca:	8302      	strh	r2, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80026cc:	8b05      	ldrh	r5, [r0, #24]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80026ce:	2210      	movs	r2, #16
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80026d0:	431d      	orrs	r5, r3
 80026d2:	8305      	strh	r5, [r0, #24]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80026d4:	8c06      	ldrh	r6, [r0, #32]
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80026d6:	021b      	lsls	r3, r3, #8
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80026d8:	4396      	bics	r6, r2
 80026da:	8406      	strh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026dc:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80026de:	4e0f      	ldr	r6, [pc, #60]	; (800271c <TIM_PWMIConfig+0x154>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80026e0:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80026e2:	464a      	mov	r2, r9
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80026e4:	4035      	ands	r5, r6
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80026e6:	0316      	lsls	r6, r2, #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026e8:	22a0      	movs	r2, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80026ea:	4335      	orrs	r5, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026ec:	4391      	bics	r1, r2
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 80026ee:	2610      	movs	r6, #16
 80026f0:	4331      	orrs	r1, r6
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80026f2:	b2ad      	uxth	r5, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 80026f4:	432f      	orrs	r7, r5
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80026f6:	0125      	lsls	r5, r4, #4
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 80026f8:	1c0c      	adds	r4, r1, #0
 80026fa:	432c      	orrs	r4, r5
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026fc:	8307      	strh	r7, [r0, #24]
  TIMx->CCER = tmpccer;
 80026fe:	8404      	strh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002700:	8b07      	ldrh	r7, [r0, #24]
 8002702:	4907      	ldr	r1, [pc, #28]	; (8002720 <TIM_PWMIConfig+0x158>)
 8002704:	4039      	ands	r1, r7
 8002706:	8301      	strh	r1, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002708:	8b02      	ldrh	r2, [r0, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	b29e      	uxth	r6, r3
 800270e:	8306      	strh	r6, [r0, #24]
 8002710:	e7b3      	b.n	800267a <TIM_PWMIConfig+0xb2>
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002712:	2580      	movs	r5, #128	; 0x80
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002714:	2602      	movs	r6, #2
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002716:	00af      	lsls	r7, r5, #2
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002718:	46b2      	mov	sl, r6
 800271a:	e766      	b.n	80025ea <TIM_PWMIConfig+0x22>
 800271c:	00000cff 	.word	0x00000cff
 8002720:	fffff3ff 	.word	0xfffff3ff

08002724 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002724:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8002726:	4770      	bx	lr

08002728 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8002728:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800272a:	4770      	bx	lr

0800272c <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800272c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800272e:	4770      	bx	lr

08002730 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002730:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002732:	4770      	bx	lr

08002734 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8002734:	8b03      	ldrh	r3, [r0, #24]
 8002736:	220c      	movs	r2, #12
 8002738:	4393      	bics	r3, r2
 800273a:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800273c:	8b03      	ldrh	r3, [r0, #24]
 800273e:	4319      	orrs	r1, r3
 8002740:	8301      	strh	r1, [r0, #24]
}
 8002742:	4770      	bx	lr

08002744 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8002744:	8b02      	ldrh	r2, [r0, #24]
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <TIM_SetIC2Prescaler+0x14>)
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002748:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800274a:	4013      	ands	r3, r2
 800274c:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800274e:	8b02      	ldrh	r2, [r0, #24]
 8002750:	4311      	orrs	r1, r2
 8002752:	b28b      	uxth	r3, r1
 8002754:	8303      	strh	r3, [r0, #24]
}
 8002756:	4770      	bx	lr
 8002758:	fffff3ff 	.word	0xfffff3ff

0800275c <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800275c:	8b83      	ldrh	r3, [r0, #28]
 800275e:	220c      	movs	r2, #12
 8002760:	4393      	bics	r3, r2
 8002762:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002764:	8b83      	ldrh	r3, [r0, #28]
 8002766:	4319      	orrs	r1, r3
 8002768:	8381      	strh	r1, [r0, #28]
}
 800276a:	4770      	bx	lr

0800276c <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 800276c:	8b82      	ldrh	r2, [r0, #28]
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <TIM_SetIC4Prescaler+0x14>)
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002770:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8002772:	4013      	ands	r3, r2
 8002774:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002776:	8b82      	ldrh	r2, [r0, #28]
 8002778:	4311      	orrs	r1, r2
 800277a:	b28b      	uxth	r3, r1
 800277c:	8383      	strh	r3, [r0, #28]
}
 800277e:	4770      	bx	lr
 8002780:	fffff3ff 	.word	0xfffff3ff

08002784 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002784:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002786:	2a00      	cmp	r2, #0
 8002788:	d102      	bne.n	8002790 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800278a:	438b      	bics	r3, r1
 800278c:	8183      	strh	r3, [r0, #12]
  }
}
 800278e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002790:	4319      	orrs	r1, r3
 8002792:	8181      	strh	r1, [r0, #12]
 8002794:	e7fb      	b.n	800278e <TIM_ITConfig+0xa>
 8002796:	46c0      	nop			; (mov r8, r8)

08002798 <TIM_GenerateEvent>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource)); 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002798:	8281      	strh	r1, [r0, #20]
}
 800279a:	4770      	bx	lr

0800279c <TIM_GetFlagStatus>:
   
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800279c:	8a00      	ldrh	r0, [r0, #16]
 800279e:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 80027a0:	1e43      	subs	r3, r0, #1
 80027a2:	4198      	sbcs	r0, r3
}
 80027a4:	4770      	bx	lr
 80027a6:	46c0      	nop			; (mov r8, r8)

080027a8 <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80027a8:	43c9      	mvns	r1, r1
 80027aa:	b28a      	uxth	r2, r1
 80027ac:	8202      	strh	r2, [r0, #16]
}
 80027ae:	4770      	bx	lr

080027b0 <TIM_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80027b0:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80027b2:	8980      	ldrh	r0, [r0, #12]
 80027b4:	1c02      	adds	r2, r0, #0
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80027b6:	2000      	movs	r0, #0
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80027b8:	420b      	tst	r3, r1
 80027ba:	d003      	beq.n	80027c4 <TIM_GetITStatus+0x14>
 80027bc:	1c10      	adds	r0, r2, #0
 80027be:	4008      	ands	r0, r1
  {
    bitstatus = SET;
 80027c0:	1e42      	subs	r2, r0, #1
 80027c2:	4190      	sbcs	r0, r2
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80027c4:	4770      	bx	lr
 80027c6:	46c0      	nop			; (mov r8, r8)

080027c8 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80027c8:	43c9      	mvns	r1, r1
 80027ca:	b28a      	uxth	r2, r1
 80027cc:	8202      	strh	r2, [r0, #16]
}
 80027ce:	4770      	bx	lr

080027d0 <TIM_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80027d0:	4311      	orrs	r1, r2
 80027d2:	2348      	movs	r3, #72	; 0x48
 80027d4:	52c1      	strh	r1, [r0, r3]
}
 80027d6:	4770      	bx	lr

080027d8 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80027d8:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST10_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80027da:	2a00      	cmp	r2, #0
 80027dc:	d102      	bne.n	80027e4 <TIM_DMACmd+0xc>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80027de:	438b      	bics	r3, r1
 80027e0:	8183      	strh	r3, [r0, #12]
  }
}
 80027e2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80027e4:	4319      	orrs	r1, r3
 80027e6:	8181      	strh	r1, [r0, #12]
 80027e8:	e7fb      	b.n	80027e2 <TIM_DMACmd+0xa>
 80027ea:	46c0      	nop			; (mov r8, r8)

080027ec <TIM_SelectCCDMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d104      	bne.n	80027fa <TIM_SelectCCDMA+0xe>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 80027f0:	8883      	ldrh	r3, [r0, #4]
 80027f2:	2208      	movs	r2, #8
 80027f4:	4393      	bics	r3, r2
 80027f6:	8083      	strh	r3, [r0, #4]
  }
}
 80027f8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80027fa:	8881      	ldrh	r1, [r0, #4]
 80027fc:	2308      	movs	r3, #8
 80027fe:	430b      	orrs	r3, r1
 8002800:	8083      	strh	r3, [r0, #4]
 8002802:	e7f9      	b.n	80027f8 <TIM_SelectCCDMA+0xc>

08002804 <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002804:	8903      	ldrh	r3, [r0, #8]
 8002806:	2207      	movs	r2, #7
 8002808:	4393      	bics	r3, r2
 800280a:	8103      	strh	r3, [r0, #8]
}
 800280c:	4770      	bx	lr
 800280e:	46c0      	nop			; (mov r8, r8)

08002810 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002810:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8002812:	2270      	movs	r2, #112	; 0x70
 8002814:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002816:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002818:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800281a:	8901      	ldrh	r1, [r0, #8]
 800281c:	2307      	movs	r3, #7
 800281e:	430b      	orrs	r3, r1
 8002820:	8103      	strh	r3, [r0, #8]
}
 8002822:	4770      	bx	lr

08002824 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002824:	b570      	push	{r4, r5, r6, lr}
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8002826:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002828:	2960      	cmp	r1, #96	; 0x60
 800282a:	d01d      	beq.n	8002868 <TIM_TIxExternalClockConfig+0x44>
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800282c:	2501      	movs	r5, #1
 800282e:	43ac      	bics	r4, r5
 8002830:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002832:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8002834:	24f3      	movs	r4, #243	; 0xf3
 8002836:	43a6      	bics	r6, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002838:	2401      	movs	r4, #1
 800283a:	4326      	orrs	r6, r4
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800283c:	8c05      	ldrh	r5, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800283e:	b2b6      	uxth	r6, r6
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	4333      	orrs	r3, r6
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002844:	260a      	movs	r6, #10
 8002846:	43b5      	bics	r5, r6
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002848:	432c      	orrs	r4, r5
 800284a:	b2a5      	uxth	r5, r4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800284c:	b29b      	uxth	r3, r3
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800284e:	432a      	orrs	r2, r5
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002850:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002852:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002854:	8906      	ldrh	r6, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8002856:	2370      	movs	r3, #112	; 0x70
 8002858:	439e      	bics	r6, r3
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800285a:	4331      	orrs	r1, r6
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285c:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800285e:	8901      	ldrh	r1, [r0, #8]
 8002860:	2407      	movs	r4, #7
 8002862:	430c      	orrs	r4, r1
 8002864:	8104      	strh	r4, [r0, #8]
}
 8002866:	bd70      	pop	{r4, r5, r6, pc}
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8002868:	2610      	movs	r6, #16
 800286a:	43b4      	bics	r4, r6
 800286c:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002870:	4c0a      	ldr	r4, [pc, #40]	; (800289c <TIM_TIxExternalClockConfig+0x78>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8002872:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8002874:	4026      	ands	r6, r4
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002876:	2480      	movs	r4, #128	; 0x80
 8002878:	0064      	lsls	r4, r4, #1
 800287a:	4326      	orrs	r6, r4
 800287c:	031c      	lsls	r4, r3, #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 800287e:	1c33      	adds	r3, r6, #0
 8002880:	4323      	orrs	r3, r4
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002882:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8002884:	b29e      	uxth	r6, r3
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002886:	43a5      	bics	r5, r4
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8002888:	2310      	movs	r3, #16
 800288a:	431d      	orrs	r5, r3
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800288c:	0114      	lsls	r4, r2, #4
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 800288e:	1c2a      	adds	r2, r5, #0
 8002890:	4322      	orrs	r2, r4
 8002892:	b295      	uxth	r5, r2
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002894:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8002896:	8405      	strh	r5, [r0, #32]
 8002898:	e7dc      	b.n	8002854 <TIM_TIxExternalClockConfig+0x30>
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	00000cff 	.word	0x00000cff

080028a0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 80028a0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 80028a2:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80028a4:	25ff      	movs	r5, #255	; 0xff
 80028a6:	402c      	ands	r4, r5
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80028a8:	4321      	orrs	r1, r4
 80028aa:	430a      	orrs	r2, r1
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	431a      	orrs	r2, r3
 80028b0:	b292      	uxth	r2, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b2:	8102      	strh	r2, [r0, #8]
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b4:	8901      	ldrh	r1, [r0, #8]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80028b6:	2477      	movs	r4, #119	; 0x77
 80028b8:	43a1      	bics	r1, r4
  tmpsmcr |= TIM_TS_ETRF;
 80028ba:	4321      	orrs	r1, r4
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028bc:	8101      	strh	r1, [r0, #8]
}
 80028be:	bd30      	pop	{r4, r5, pc}

080028c0 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80028c0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 80028c2:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80028c4:	25ff      	movs	r5, #255	; 0xff
 80028c6:	402c      	ands	r4, r5
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80028c8:	4321      	orrs	r1, r4
 80028ca:	430a      	orrs	r2, r1
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	431a      	orrs	r2, r3
 80028d0:	b292      	uxth	r2, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d2:	8102      	strh	r2, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80028d4:	8901      	ldrh	r1, [r0, #8]
 80028d6:	2480      	movs	r4, #128	; 0x80
 80028d8:	01e5      	lsls	r5, r4, #7
 80028da:	430d      	orrs	r5, r1
 80028dc:	8105      	strh	r5, [r0, #8]
}
 80028de:	bd30      	pop	{r4, r5, pc}

080028e0 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028e0:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80028e2:	2270      	movs	r2, #112	; 0x70
 80028e4:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80028e6:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e8:	8101      	strh	r1, [r0, #8]
}
 80028ea:	4770      	bx	lr

080028ec <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 80028ec:	8883      	ldrh	r3, [r0, #4]
 80028ee:	2270      	movs	r2, #112	; 0x70
 80028f0:	4393      	bics	r3, r2
 80028f2:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80028f4:	8883      	ldrh	r3, [r0, #4]
 80028f6:	4319      	orrs	r1, r3
 80028f8:	8081      	strh	r1, [r0, #4]
}
 80028fa:	4770      	bx	lr

080028fc <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  
  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 80028fc:	8903      	ldrh	r3, [r0, #8]
 80028fe:	2207      	movs	r2, #7
 8002900:	4393      	bics	r3, r2
 8002902:	8103      	strh	r3, [r0, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002904:	8903      	ldrh	r3, [r0, #8]
 8002906:	4319      	orrs	r1, r3
 8002908:	8101      	strh	r1, [r0, #8]
}
 800290a:	4770      	bx	lr

0800290c <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 800290c:	8903      	ldrh	r3, [r0, #8]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	4393      	bics	r3, r2
 8002912:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8002914:	8903      	ldrh	r3, [r0, #8]
 8002916:	4319      	orrs	r1, r3
 8002918:	8101      	strh	r1, [r0, #8]
}
 800291a:	4770      	bx	lr

0800291c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 800291c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 800291e:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002920:	25ff      	movs	r5, #255	; 0xff
 8002922:	402c      	ands	r4, r5
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002924:	4321      	orrs	r1, r4
 8002926:	430a      	orrs	r2, r1
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	431a      	orrs	r2, r3
 800292c:	b292      	uxth	r2, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292e:	8102      	strh	r2, [r0, #8]
}
 8002930:	bd30      	pop	{r4, r5, pc}
 8002932:	46c0      	nop			; (mov r8, r8)

08002934 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002936:	8904      	ldrh	r4, [r0, #8]
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002938:	2707      	movs	r7, #7
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800293a:	8b06      	ldrh	r6, [r0, #24]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800293c:	43bc      	bics	r4, r7
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293e:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
 8002940:	4321      	orrs	r1, r4
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002942:	27aa      	movs	r7, #170	; 0xaa
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8002944:	4c06      	ldr	r4, [pc, #24]	; (8002960 <TIM_EncoderInterfaceConfig+0x2c>)
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002946:	43bd      	bics	r5, r7
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002948:	432a      	orrs	r2, r5
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800294a:	4034      	ands	r4, r6
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800294c:	011b      	lsls	r3, r3, #4
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800294e:	4e05      	ldr	r6, [pc, #20]	; (8002964 <TIM_EncoderInterfaceConfig+0x30>)
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002950:	431a      	orrs	r2, r3
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002952:	4334      	orrs	r4, r6
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002954:	b292      	uxth	r2, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002956:	8101      	strh	r1, [r0, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002958:	8304      	strh	r4, [r0, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295a:	8402      	strh	r2, [r0, #32]
}
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	fffffcfc 	.word	0xfffffcfc
 8002964:	00000101 	.word	0x00000101

08002968 <TIM_SelectHallSensor>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002968:	2900      	cmp	r1, #0
 800296a:	d104      	bne.n	8002976 <TIM_SelectHallSensor+0xe>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 800296c:	8883      	ldrh	r3, [r0, #4]
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	4393      	bics	r3, r2
 8002972:	8083      	strh	r3, [r0, #4]
  }
}
 8002974:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002976:	8881      	ldrh	r1, [r0, #4]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	430b      	orrs	r3, r1
 800297c:	8083      	strh	r3, [r0, #4]
 800297e:	e7f9      	b.n	8002974 <TIM_SelectHallSensor+0xc>

08002980 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST11_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002980:	2350      	movs	r3, #80	; 0x50
 8002982:	52c1      	strh	r1, [r0, r3]
}
 8002984:	4770      	bx	lr
 8002986:	46c0      	nop			; (mov r8, r8)

08002988 <__aeabi_uidiv>:
 8002988:	2900      	cmp	r1, #0
 800298a:	d034      	beq.n	80029f6 <.udivsi3_skip_div0_test+0x6a>

0800298c <.udivsi3_skip_div0_test>:
 800298c:	2301      	movs	r3, #1
 800298e:	2200      	movs	r2, #0
 8002990:	b410      	push	{r4}
 8002992:	4288      	cmp	r0, r1
 8002994:	d32c      	bcc.n	80029f0 <.udivsi3_skip_div0_test+0x64>
 8002996:	2401      	movs	r4, #1
 8002998:	0724      	lsls	r4, r4, #28
 800299a:	42a1      	cmp	r1, r4
 800299c:	d204      	bcs.n	80029a8 <.udivsi3_skip_div0_test+0x1c>
 800299e:	4281      	cmp	r1, r0
 80029a0:	d202      	bcs.n	80029a8 <.udivsi3_skip_div0_test+0x1c>
 80029a2:	0109      	lsls	r1, r1, #4
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	e7f8      	b.n	800299a <.udivsi3_skip_div0_test+0xe>
 80029a8:	00e4      	lsls	r4, r4, #3
 80029aa:	42a1      	cmp	r1, r4
 80029ac:	d204      	bcs.n	80029b8 <.udivsi3_skip_div0_test+0x2c>
 80029ae:	4281      	cmp	r1, r0
 80029b0:	d202      	bcs.n	80029b8 <.udivsi3_skip_div0_test+0x2c>
 80029b2:	0049      	lsls	r1, r1, #1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	e7f8      	b.n	80029aa <.udivsi3_skip_div0_test+0x1e>
 80029b8:	4288      	cmp	r0, r1
 80029ba:	d301      	bcc.n	80029c0 <.udivsi3_skip_div0_test+0x34>
 80029bc:	1a40      	subs	r0, r0, r1
 80029be:	431a      	orrs	r2, r3
 80029c0:	084c      	lsrs	r4, r1, #1
 80029c2:	42a0      	cmp	r0, r4
 80029c4:	d302      	bcc.n	80029cc <.udivsi3_skip_div0_test+0x40>
 80029c6:	1b00      	subs	r0, r0, r4
 80029c8:	085c      	lsrs	r4, r3, #1
 80029ca:	4322      	orrs	r2, r4
 80029cc:	088c      	lsrs	r4, r1, #2
 80029ce:	42a0      	cmp	r0, r4
 80029d0:	d302      	bcc.n	80029d8 <.udivsi3_skip_div0_test+0x4c>
 80029d2:	1b00      	subs	r0, r0, r4
 80029d4:	089c      	lsrs	r4, r3, #2
 80029d6:	4322      	orrs	r2, r4
 80029d8:	08cc      	lsrs	r4, r1, #3
 80029da:	42a0      	cmp	r0, r4
 80029dc:	d302      	bcc.n	80029e4 <.udivsi3_skip_div0_test+0x58>
 80029de:	1b00      	subs	r0, r0, r4
 80029e0:	08dc      	lsrs	r4, r3, #3
 80029e2:	4322      	orrs	r2, r4
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d003      	beq.n	80029f0 <.udivsi3_skip_div0_test+0x64>
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	d001      	beq.n	80029f0 <.udivsi3_skip_div0_test+0x64>
 80029ec:	0909      	lsrs	r1, r1, #4
 80029ee:	e7e3      	b.n	80029b8 <.udivsi3_skip_div0_test+0x2c>
 80029f0:	1c10      	adds	r0, r2, #0
 80029f2:	bc10      	pop	{r4}
 80029f4:	4770      	bx	lr
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d001      	beq.n	80029fe <.udivsi3_skip_div0_test+0x72>
 80029fa:	2000      	movs	r0, #0
 80029fc:	43c0      	mvns	r0, r0
 80029fe:	b407      	push	{r0, r1, r2}
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <.udivsi3_skip_div0_test+0x80>)
 8002a02:	a102      	add	r1, pc, #8	; (adr r1, 8002a0c <.udivsi3_skip_div0_test+0x80>)
 8002a04:	1840      	adds	r0, r0, r1
 8002a06:	9002      	str	r0, [sp, #8]
 8002a08:	bd03      	pop	{r0, r1, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	00000019 	.word	0x00000019

08002a10 <__aeabi_uidivmod>:
 8002a10:	2900      	cmp	r1, #0
 8002a12:	d0f0      	beq.n	80029f6 <.udivsi3_skip_div0_test+0x6a>
 8002a14:	b503      	push	{r0, r1, lr}
 8002a16:	f7ff ffb9 	bl	800298c <.udivsi3_skip_div0_test>
 8002a1a:	bc0e      	pop	{r1, r2, r3}
 8002a1c:	4342      	muls	r2, r0
 8002a1e:	1a89      	subs	r1, r1, r2
 8002a20:	4718      	bx	r3
 8002a22:	46c0      	nop			; (mov r8, r8)

08002a24 <__aeabi_idiv0>:
 8002a24:	4770      	bx	lr
 8002a26:	46c0      	nop			; (mov r8, r8)

08002a28 <main>:
 * @brief  Main program.
 * @param  None
 * @retval None
 */
int main(void)
{
 8002a28:	b508      	push	{r3, lr}
       file (startup_stm32f0xx.s) before to branch to application main.
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f0xx.c file
	 */
	//-------------------------------
	Pstate=1;
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <main+0x34>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

	PWMval=1000;
 8002a30:	20fa      	movs	r0, #250	; 0xfa
 8002a32:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <main+0x38>)
 8002a34:	0081      	lsls	r1, r0, #2
 8002a36:	6011      	str	r1, [r2, #0]
	avance=0;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <main+0x3c>)
	RPMr=20000;
 8002a3a:	490b      	ldr	r1, [pc, #44]	; (8002a68 <main+0x40>)
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <main+0x44>)
	 */
	//-------------------------------
	Pstate=1;

	PWMval=1000;
	avance=0;
 8002a3e:	2000      	movs	r0, #0
 8002a40:	6018      	str	r0, [r3, #0]
	RPMr=20000;
 8002a42:	600a      	str	r2, [r1, #0]
	CCR1r=RPM2CNT(RPMr);
 8002a44:	6809      	ldr	r1, [r1, #0]
 8002a46:	480a      	ldr	r0, [pc, #40]	; (8002a70 <main+0x48>)
 8002a48:	f7ff ff9e 	bl	8002988 <__aeabi_uidiv>
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <main+0x4c>)
 8002a4e:	6018      	str	r0, [r3, #0]

	hw_init();
 8002a50:	f7fd fb38 	bl	80000c4 <hw_init>
	//SysTick_Config(SystemCoreClock/1e3); //ms timer
	//SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
	/* Infinite loop */
	uint32_t start,adc,adc_sum=2048;
	volatile uint32_t tt;
	start=toc;
 8002a54:	2080      	movs	r0, #128	; 0x80
 8002a56:	05c1      	lsls	r1, r0, #23
 8002a58:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002a5a:	e7fe      	b.n	8002a5a <main+0x32>
 8002a5c:	20000054 	.word	0x20000054
 8002a60:	20000084 	.word	0x20000084
 8002a64:	20000080 	.word	0x20000080
 8002a68:	20000050 	.word	0x20000050
 8002a6c:	00004e20 	.word	0x00004e20
 8002a70:	2aea5400 	.word	0x2aea5400
 8002a74:	20000058 	.word	0x20000058

08002a78 <Reset_Handler>:
 8002a78:	480c      	ldr	r0, [pc, #48]	; (8002aac <LoopForever+0x2>)
 8002a7a:	4685      	mov	sp, r0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	e003      	b.n	8002a88 <LoopCopyDataInit>

08002a80 <CopyDataInit>:
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <LoopForever+0x6>)
 8002a82:	585b      	ldr	r3, [r3, r1]
 8002a84:	5043      	str	r3, [r0, r1]
 8002a86:	3104      	adds	r1, #4

08002a88 <LoopCopyDataInit>:
 8002a88:	480a      	ldr	r0, [pc, #40]	; (8002ab4 <LoopForever+0xa>)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <LoopForever+0xe>)
 8002a8c:	1842      	adds	r2, r0, r1
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3f6      	bcc.n	8002a80 <CopyDataInit>
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <LoopForever+0x12>)
 8002a94:	e002      	b.n	8002a9c <LoopFillZerobss>

08002a96 <FillZerobss>:
 8002a96:	2300      	movs	r3, #0
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	3204      	adds	r2, #4

08002a9c <LoopFillZerobss>:
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <LoopForever+0x16>)
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3f9      	bcc.n	8002a96 <FillZerobss>
 8002aa2:	f7fd ff27 	bl	80008f4 <SystemInit>
 8002aa6:	f7ff ffbf 	bl	8002a28 <main>

08002aaa <LoopForever>:
 8002aaa:	e7fe      	b.n	8002aaa <LoopForever>
 8002aac:	20001000 	.word	0x20001000
 8002ab0:	08002ae4 	.word	0x08002ae4
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000028 	.word	0x20000028
 8002abc:	20000028 	.word	0x20000028
 8002ac0:	20000888 	.word	0x20000888

08002ac4 <CEC_IRQHandler>:
 8002ac4:	e7fe      	b.n	8002ac4 <CEC_IRQHandler>
	...
